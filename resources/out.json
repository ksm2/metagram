{"namespaces":[["xmi","http://www.omg.org/spec/XMI/20131001"],["uml","http://www.omg.org/spec/UML/20131001"],["mofext","http://www.omg.org/spec/MOF/20131001"]],"content":[{"$type":"Package","$id":"_0","$ns":"uml","name":"UML","URI":"http://www.omg.org/spec/UML/20131001","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":[{"$type":"Package","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#_0"}]},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Actions"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"Activities"},{"$type":"PackageImport","$id":"_packageImport.3","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.4","$ns":"uml","importedPackage":"CommonBehavior"},{"$type":"PackageImport","$id":"_packageImport.5","$ns":"uml","importedPackage":"CommonStructure"},{"$type":"PackageImport","$id":"_packageImport.6","$ns":"uml","importedPackage":"Deployments"},{"$type":"PackageImport","$id":"_packageImport.7","$ns":"uml","importedPackage":"InformationFlows"},{"$type":"PackageImport","$id":"_packageImport.8","$ns":"uml","importedPackage":"Interactions"},{"$type":"PackageImport","$id":"_packageImport.9","$ns":"uml","importedPackage":"Packages"},{"$type":"PackageImport","$id":"_packageImport.10","$ns":"uml","importedPackage":"SimpleClassifiers"},{"$type":"PackageImport","$id":"_packageImport.11","$ns":"uml","importedPackage":"StateMachines"},{"$type":"PackageImport","$id":"_packageImport.12","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.13","$ns":"uml","importedPackage":"UseCases"},{"$type":"PackageImport","$id":"_packageImport.14","$ns":"uml","importedPackage":"Values"}],"packagedElement":[{"$type":"Package","$id":"Activities","$ns":"uml","name":"Activities","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Actions"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Classification"}],"packagedElement":[{"$type":"Class","$id":"Activity","$ns":"uml","name":"Activity","ownedComment":[{"$type":"Comment","$id":"Activity-_ownedComment.0","$ns":"uml","annotatedElement":"Activity","body":"An Activity is the specification of parameterized Behavior as the coordinated sequencing of subordinate units."}],"ownedRule":[{"$type":"Constraint","$id":"Activity-maximum_one_parameter_node","$ns":"uml","name":"maximum_one_parameter_node","constrainedElement":"Activity","ownedComment":[{"$type":"Comment","$id":"Activity-maximum_one_parameter_node-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-maximum_one_parameter_node","body":"A Parameter with direction other than inout must have exactly one ActivityParameterNode in an Activity."}],"specification":[{"$type":"OpaqueExpression","$id":"Activity-maximum_one_parameter_node-_specification","$ns":"uml","language":"OCL","body":"ownedParameter->forAll(p | \r\n   p.direction <> ParameterDirectionKind::inout implies node->select(\r\n       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)"}]},{"$type":"Constraint","$id":"Activity-maximum_two_parameter_nodes","$ns":"uml","name":"maximum_two_parameter_nodes","constrainedElement":"Activity","ownedComment":[{"$type":"Comment","$id":"Activity-maximum_two_parameter_nodes-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-maximum_two_parameter_nodes","body":"A Parameter with direction inout must have exactly two ActivityParameterNodes in an Activity, at most one with incoming ActivityEdges and at most one with outgoing ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"Activity-maximum_two_parameter_nodes-_specification","$ns":"uml","language":"OCL","body":"ownedParameter->forAll(p | \r\np.direction = ParameterDirectionKind::inout implies\r\nlet associatedNodes : Set(ActivityNode) = node->select(\r\n       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in \r\n  associatedNodes->size()=2 and\r\n  associatedNodes->select(incoming->notEmpty())->size()<=1 and\r\n  associatedNodes->select(outgoing->notEmpty())->size()<=1\r\n)\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"Activity-_generalization.0","$ns":"uml","general":"Behavior"}],"ownedAttribute":[{"$type":"Property","$id":"Activity-edge","$ns":"uml","name":"edge","type":"ActivityEdge","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_edge_activity","ownedComment":[{"$type":"Comment","$id":"Activity-edge-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-edge","body":"ActivityEdges expressing flow between the nodes of the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-edge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-edge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-group","$ns":"uml","name":"group","type":"ActivityGroup","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_group_inActivity","ownedComment":[{"$type":"Comment","$id":"Activity-group-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-group","body":"Top-level ActivityGroups in the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-group-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-group-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-isReadOnly","$ns":"uml","name":"isReadOnly","ownedComment":[{"$type":"Comment","$id":"Activity-isReadOnly-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-isReadOnly","body":"If true, this Activity must not make any changes to objects. The default is false (an Activity may make nonlocal changes). (This is an assertion, not an executable property. It may be used by an execution engine to optimize model execution. If the assertion is violated by the Activity, then the model is ill-formed.) "}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Activity-isReadOnly-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-isSingleExecution","$ns":"uml","name":"isSingleExecution","ownedComment":[{"$type":"Comment","$id":"Activity-isSingleExecution-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-isSingleExecution","body":"If true, all invocations of the Activity are handled by the same execution."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Activity-isSingleExecution-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-node","$ns":"uml","name":"node","type":"ActivityNode","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_node_activity","ownedComment":[{"$type":"Comment","$id":"Activity-node-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-node","body":"ActivityNodes coordinated by the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-node-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-node-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-partition","$ns":"uml","name":"partition","type":"ActivityPartition","subsettedProperty":"Activity-group","association":"A_partition_activity","ownedComment":[{"$type":"Comment","$id":"Activity-partition-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-partition","body":"Top-level ActivityPartitions in the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-partition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-partition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-structuredNode","$ns":"uml","name":"structuredNode","type":"StructuredActivityNode","aggregation":"composite","subsettedProperty":"Activity-group Activity-node","association":"A_structuredNode_activity","ownedComment":[{"$type":"Comment","$id":"Activity-structuredNode-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-structuredNode","body":"Top-level StructuredActivityNodes in the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-structuredNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-structuredNode-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Activity-variable","$ns":"uml","name":"variable","type":"Variable","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_variable_activityScope","ownedComment":[{"$type":"Comment","$id":"Activity-variable-_ownedComment.0","$ns":"uml","annotatedElement":"Activity-variable","body":"Top-level Variables defined by the Activity."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Activity-variable-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Activity-variable-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ActivityEdge","$ns":"uml","name":"ActivityEdge","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge","body":"An ActivityEdge is an abstract class for directed connections between two ActivityNodes."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityEdge-source_and_target","$ns":"uml","name":"source_and_target","constrainedElement":"ActivityEdge","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-source_and_target-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-source_and_target","body":"If an ActivityEdge is directly owned by an Activity, then its source and target must be directly or indirectly contained in the same Activity."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityEdge-source_and_target-_specification","$ns":"uml","language":"OCL","body":"activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity"}]}],"generalization":[{"$type":"Generalization","$id":"ActivityEdge-_generalization.0","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"ActivityEdge-activity","$ns":"uml","name":"activity","type":"Activity","subsettedProperty":"Element-owner","association":"A_edge_activity","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-activity-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-activity","body":"The Activity containing the ActivityEdge, if it is directly owned by an Activity."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-activity-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-guard","$ns":"uml","name":"guard","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_guard_activityEdge","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-guard-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-guard","body":"A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-guard-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-inGroup","$ns":"uml","name":"inGroup","type":"ActivityGroup","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_containedEdge_inGroup","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-inGroup-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-inGroup","body":"ActivityGroups containing the ActivityEdge."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityEdge-inGroup-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-inGroup-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-inPartition","$ns":"uml","name":"inPartition","type":"ActivityPartition","subsettedProperty":"ActivityEdge-inGroup","association":"A_edge_inPartition","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-inPartition-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-inPartition","body":"ActivityPartitions containing the ActivityEdge."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityEdge-inPartition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-inPartition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-inStructuredNode","$ns":"uml","name":"inStructuredNode","type":"StructuredActivityNode","subsettedProperty":"ActivityEdge-inGroup Element-owner","association":"A_edge_inStructuredNode","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-inStructuredNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-inStructuredNode","body":"The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-inStructuredNode-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-interrupts","$ns":"uml","name":"interrupts","type":"InterruptibleActivityRegion","association":"A_interruptingEdge_interrupts","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-interrupts-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-interrupts","body":"The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-interrupts-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-redefinedEdge","$ns":"uml","name":"redefinedEdge","type":"ActivityEdge","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedEdge_activityEdge","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-redefinedEdge-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-redefinedEdge","body":"ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityEdge-redefinedEdge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-redefinedEdge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityEdge-source","$ns":"uml","name":"source","type":"ActivityNode","association":"A_outgoing_source_node","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-source-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-source","body":"The ActivityNode from which tokens are taken when they traverse the ActivityEdge."}]},{"$type":"Property","$id":"ActivityEdge-target","$ns":"uml","name":"target","type":"ActivityNode","association":"A_incoming_target_node","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-target-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-target","body":"The ActivityNode to which tokens are put when they traverse the ActivityEdge."}]},{"$type":"Property","$id":"ActivityEdge-weight","$ns":"uml","name":"weight","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_weight_activityEdge","ownedComment":[{"$type":"Comment","$id":"ActivityEdge-weight-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityEdge-weight","body":"The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityEdge-weight-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ActivityEdge-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"ActivityEdge-isConsistentWith-spec","ownedRule":[{"$type":"Constraint","$id":"ActivityEdge-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"ActivityEdge-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"ActivityEdge-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (redefiningElement.oclIsKindOf(ActivityEdge))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ActivityEdge-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"ActivityEdge-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]}]},{"$type":"Class","$id":"ActivityFinalNode","$ns":"uml","name":"ActivityFinalNode","ownedComment":[{"$type":"Comment","$id":"ActivityFinalNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityFinalNode","body":"An ActivityFinalNode is a FinalNode that terminates the execution of its owning Activity or StructuredActivityNode."}],"generalization":[{"$type":"Generalization","$id":"ActivityFinalNode-_generalization.0","$ns":"uml","general":"FinalNode"}]},{"$type":"Class","$id":"ActivityGroup","$ns":"uml","name":"ActivityGroup","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup","body":"ActivityGroup is an abstract class for defining sets of ActivityNodes and ActivityEdges in an Activity."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityGroup-nodes_and_edges","$ns":"uml","name":"nodes_and_edges","constrainedElement":"ActivityGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-nodes_and_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-nodes_and_edges","body":"All containedNodes and containeEdges of an ActivityGroup must be in the same Activity as the group."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityGroup-nodes_and_edges-_specification","$ns":"uml","language":"OCL","body":"containedNode->forAll(activity = self.containingActivity()) and \r\ncontainedEdge->forAll(activity = self.containingActivity())"}]},{"$type":"Constraint","$id":"ActivityGroup-not_contained","$ns":"uml","name":"not_contained","constrainedElement":"ActivityGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-not_contained-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-not_contained","body":"No containedNode or containedEdge of an ActivityGroup may be contained by its subgroups or its superGroups, transitively."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityGroup-not_contained-_specification","$ns":"uml","language":"OCL","body":"subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and\r\nsuperGroup->closure(superGroup).containedNode->excludesAll(containedNode) and \r\nsubgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and \r\nsuperGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)"}]}],"generalization":[{"$type":"Generalization","$id":"ActivityGroup-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"ActivityGroup-containedEdge","$ns":"uml","name":"containedEdge","type":"ActivityEdge","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_containedEdge_inGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-containedEdge-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-containedEdge","body":"ActivityEdges immediately contained in the ActivityGroup."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityGroup-containedEdge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-containedEdge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityGroup-containedNode","$ns":"uml","name":"containedNode","type":"ActivityNode","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_containedNode_inGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-containedNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-containedNode","body":"ActivityNodes immediately contained in the ActivityGroup."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityGroup-containedNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-containedNode-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityGroup-inActivity","$ns":"uml","name":"inActivity","type":"Activity","subsettedProperty":"Element-owner","association":"A_group_inActivity","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-inActivity-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-inActivity","body":"The Activity containing the ActivityGroup, if it is directly owned by an Activity."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-inActivity-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityGroup-subgroup","$ns":"uml","name":"subgroup","type":"ActivityGroup","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_subgroup_superGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-subgroup-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-subgroup","body":"Other ActivityGroups immediately contained in this ActivityGroup."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityGroup-subgroup-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-subgroup-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityGroup-superGroup","$ns":"uml","name":"superGroup","type":"ActivityGroup","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Element-owner","association":"A_subgroup_superGroup","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-superGroup-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-superGroup","body":"The ActivityGroup immediately containing this ActivityGroup, if it is directly owned by another ActivityGroup."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-superGroup-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ActivityGroup-containingActivity","$ns":"uml","name":"containingActivity","isQuery":"true","bodyCondition":"ActivityGroup-containingActivity-spec","ownedComment":[{"$type":"Comment","$id":"ActivityGroup-containingActivity-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityGroup-containingActivity","body":"The Activity that directly or indirectly contains this ActivityGroup."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityGroup-containingActivity-spec","$ns":"uml","name":"spec","constrainedElement":"ActivityGroup-containingActivity","specification":[{"$type":"OpaqueExpression","$id":"ActivityGroup-containingActivity-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if superGroup<>null then superGroup.containingActivity()\r\nelse inActivity\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ActivityGroup-containingActivity-result","$ns":"uml","name":"result","type":"Activity","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"ActivityGroup-containingActivity-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ActivityNode","$ns":"uml","name":"ActivityNode","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ActivityNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode","body":"ActivityNode is an abstract class for points in the flow of an Activity connected by ActivityEdges."}],"generalization":[{"$type":"Generalization","$id":"ActivityNode-_generalization.0","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"ActivityNode-activity","$ns":"uml","name":"activity","type":"Activity","subsettedProperty":"Element-owner","association":"A_node_activity","ownedComment":[{"$type":"Comment","$id":"ActivityNode-activity-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-activity","body":"The Activity containing the ActivityNode, if it is directly owned by an Activity."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-activity-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-inGroup","$ns":"uml","name":"inGroup","type":"ActivityGroup","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_containedNode_inGroup","ownedComment":[{"$type":"Comment","$id":"ActivityNode-inGroup-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-inGroup","body":"ActivityGroups containing the ActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-inGroup-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-inGroup-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-inInterruptibleRegion","$ns":"uml","name":"inInterruptibleRegion","type":"InterruptibleActivityRegion","subsettedProperty":"ActivityNode-inGroup","association":"A_inInterruptibleRegion_node","ownedComment":[{"$type":"Comment","$id":"ActivityNode-inInterruptibleRegion-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-inInterruptibleRegion","body":"InterruptibleActivityRegions containing the ActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-inInterruptibleRegion-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-inInterruptibleRegion-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-inPartition","$ns":"uml","name":"inPartition","type":"ActivityPartition","subsettedProperty":"ActivityNode-inGroup","association":"A_inPartition_node","ownedComment":[{"$type":"Comment","$id":"ActivityNode-inPartition-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-inPartition","body":"ActivityPartitions containing the ActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-inPartition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-inPartition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-inStructuredNode","$ns":"uml","name":"inStructuredNode","type":"StructuredActivityNode","subsettedProperty":"ActivityNode-inGroup Element-owner","association":"A_node_inStructuredNode","ownedComment":[{"$type":"Comment","$id":"ActivityNode-inStructuredNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-inStructuredNode","body":"The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-inStructuredNode-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-incoming","$ns":"uml","name":"incoming","type":"ActivityEdge","association":"A_incoming_target_node","ownedComment":[{"$type":"Comment","$id":"ActivityNode-incoming-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-incoming","body":"ActivityEdges that have the ActivityNode as their target."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-incoming-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-incoming-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-outgoing","$ns":"uml","name":"outgoing","type":"ActivityEdge","association":"A_outgoing_source_node","ownedComment":[{"$type":"Comment","$id":"ActivityNode-outgoing-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-outgoing","body":"ActivityEdges that have the ActivityNode as their source."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-outgoing-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-outgoing-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityNode-redefinedNode","$ns":"uml","name":"redefinedNode","type":"ActivityNode","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedNode_activityNode","ownedComment":[{"$type":"Comment","$id":"ActivityNode-redefinedNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-redefinedNode","body":"ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityNode-redefinedNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-redefinedNode-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ActivityNode-containingActivity","$ns":"uml","name":"containingActivity","isQuery":"true","bodyCondition":"ActivityNode-containingActivity-spec","ownedComment":[{"$type":"Comment","$id":"ActivityNode-containingActivity-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityNode-containingActivity","body":"The Activity that directly or indirectly contains this ActivityNode."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityNode-containingActivity-spec","$ns":"uml","name":"spec","constrainedElement":"ActivityNode-containingActivity","specification":[{"$type":"OpaqueExpression","$id":"ActivityNode-containingActivity-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if inStructuredNode<>null then inStructuredNode.containingActivity()\r\nelse activity\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ActivityNode-containingActivity-result","$ns":"uml","name":"result","type":"Activity","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"ActivityNode-containingActivity-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"ActivityNode-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"ActivityNode-isConsistentWith-spec","ownedRule":[{"$type":"Constraint","$id":"ActivityNode-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"ActivityNode-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"ActivityNode-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (redefiningElement.oclIsKindOf(ActivityNode))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ActivityNode-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"ActivityNode-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]}]},{"$type":"Class","$id":"ActivityParameterNode","$ns":"uml","name":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode","body":"An ActivityParameterNode is an ObjectNode for accepting values from the input Parameters or providing values to the output Parameters of an Activity."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityParameterNode-no_outgoing_edges","$ns":"uml","name":"no_outgoing_edges","constrainedElement":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-no_outgoing_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-no_outgoing_edges","body":"An ActivityParameterNode with no outgoing ActivityEdges and one or more incoming ActivityEdges must have a parameter with direction out, inout, or return."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityParameterNode-no_outgoing_edges-_specification","$ns":"uml","language":"OCL","body":"(incoming->notEmpty() and outgoing->isEmpty()) implies \r\n\t(parameter.direction = ParameterDirectionKind::out or \r\n\t parameter.direction = ParameterDirectionKind::inout or \r\n\t parameter.direction = ParameterDirectionKind::return)"}]},{"$type":"Constraint","$id":"ActivityParameterNode-has_parameters","$ns":"uml","name":"has_parameters","constrainedElement":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-has_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-has_parameters","body":"The parameter of an ActivityParameterNode must be from the containing Activity."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityParameterNode-has_parameters-_specification","$ns":"uml","language":"OCL","body":"activity.ownedParameter->includes(parameter)"}]},{"$type":"Constraint","$id":"ActivityParameterNode-same_type","$ns":"uml","name":"same_type","constrainedElement":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-same_type-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-same_type","body":"The type of an ActivityParameterNode is the same as the type of its parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityParameterNode-same_type-_specification","$ns":"uml","language":"OCL","body":"type = parameter.type"}]},{"$type":"Constraint","$id":"ActivityParameterNode-no_incoming_edges","$ns":"uml","name":"no_incoming_edges","constrainedElement":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-no_incoming_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-no_incoming_edges","body":"An ActivityParameterNode with no incoming ActivityEdges and one or more outgoing ActivityEdges must have a parameter with direction in or inout."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityParameterNode-no_incoming_edges-_specification","$ns":"uml","language":"OCL","body":"(outgoing->notEmpty() and incoming->isEmpty()) implies \r\n\t(parameter.direction = ParameterDirectionKind::_'in' or \r\n\t parameter.direction = ParameterDirectionKind::inout)"}]},{"$type":"Constraint","$id":"ActivityParameterNode-no_edges","$ns":"uml","name":"no_edges","constrainedElement":"ActivityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-no_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-no_edges","body":"An ActivityParameterNode may have all incoming ActivityEdges or all outgoing ActivityEdges, but it must not have both incoming and outgoing ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityParameterNode-no_edges-_specification","$ns":"uml","language":"OCL","body":"incoming->isEmpty() or outgoing->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"ActivityParameterNode-_generalization.0","$ns":"uml","general":"ObjectNode"}],"ownedAttribute":[{"$type":"Property","$id":"ActivityParameterNode-parameter","$ns":"uml","name":"parameter","type":"Parameter","association":"A_parameter_activityParameterNode","ownedComment":[{"$type":"Comment","$id":"ActivityParameterNode-parameter-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityParameterNode-parameter","body":"The Parameter for which the ActivityParameterNode will be accepting or providing values."}]}]},{"$type":"Class","$id":"ActivityPartition","$ns":"uml","name":"ActivityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition","body":"An ActivityPartition is a kind of ActivityGroup for identifying ActivityNodes that have some characteristic in common."}],"ownedRule":[{"$type":"Constraint","$id":"ActivityPartition-represents_classifier","$ns":"uml","name":"represents_classifier","constrainedElement":"ActivityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-represents_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-represents_classifier","body":"If a non-external ActivityPartition represents a Classifier and has a superPartition, then the superPartition must represent a Classifier, and the Classifier of the subpartition must be nested (nestedClassifier or ownedBehavior) in the Classifier represented by the superPartition, or be at the contained end of a composition Association with the Classifier represented by the superPartition."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityPartition-represents_classifier-_specification","$ns":"uml","language":"OCL","body":"(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies\r\n(\r\n   let representedClassifier : Classifier = represents.oclAsType(Classifier) in\r\n     superPartition.represents.oclIsKindOf(Classifier) and\r\n      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in\r\n       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and \r\n        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) \r\n       or\r\n       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))\r\n       or\r\n       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and \r\n                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))\r\n)"}]},{"$type":"Constraint","$id":"ActivityPartition-represents_property_and_is_contained","$ns":"uml","name":"represents_property_and_is_contained","constrainedElement":"ActivityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-represents_property_and_is_contained-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-represents_property_and_is_contained","body":"If an ActivityPartition represents a Property and has a superPartition, then the Property must be of a Classifier represented by the superPartition, or of a Classifier that is the type of a Property represented by the superPartition."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityPartition-represents_property_and_is_contained-_specification","$ns":"uml","language":"OCL","body":"(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies\r\n(\r\n  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or \r\n  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)\r\n)"}]},{"$type":"Constraint","$id":"ActivityPartition-represents_property","$ns":"uml","name":"represents_property","constrainedElement":"ActivityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-represents_property-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-represents_property","body":"If an ActivityPartition represents a Property and has a superPartition representing a Classifier, then all the other non-external subpartitions of the superPartition must represent Properties directly owned by the same Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityPartition-represents_property-_specification","$ns":"uml","language":"OCL","body":"(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies\r\n(\r\n  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)\r\n  in\r\n    superPartition.subpartition->reject(isExternal)->forAll(p | \r\n       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)\r\n)"}]},{"$type":"Constraint","$id":"ActivityPartition-dimension_not_contained","$ns":"uml","name":"dimension_not_contained","constrainedElement":"ActivityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-dimension_not_contained-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-dimension_not_contained","body":"An ActvivityPartition with isDimension = true may not be contained by another ActivityPartition."}],"specification":[{"$type":"OpaqueExpression","$id":"ActivityPartition-dimension_not_contained-_specification","$ns":"uml","language":"OCL","body":"isDimension implies superPartition->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"ActivityPartition-_generalization.0","$ns":"uml","general":"ActivityGroup"}],"ownedAttribute":[{"$type":"Property","$id":"ActivityPartition-edge","$ns":"uml","name":"edge","type":"ActivityEdge","subsettedProperty":"ActivityGroup-containedEdge","association":"A_edge_inPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-edge-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-edge","body":"ActivityEdges immediately contained in the ActivityPartition."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityPartition-edge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityPartition-edge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-isDimension","$ns":"uml","name":"isDimension","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-isDimension-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-isDimension","body":"Indicates whether the ActivityPartition groups other ActivityPartitions along a dimension."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ActivityPartition-isDimension-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-isExternal","$ns":"uml","name":"isExternal","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-isExternal-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-isExternal","body":"Indicates whether the ActivityPartition represents an entity to which the partitioning structure does not apply."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ActivityPartition-isExternal-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-node","$ns":"uml","name":"node","type":"ActivityNode","subsettedProperty":"ActivityGroup-containedNode","association":"A_inPartition_node","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-node-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-node","body":"ActivityNodes immediately contained in the ActivityPartition."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityPartition-node-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityPartition-node-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-represents","$ns":"uml","name":"represents","type":"Element","association":"A_represents_activityPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-represents-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-represents","body":"An Element represented by the functionality modeled within the ActivityPartition."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityPartition-represents-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-subpartition","$ns":"uml","name":"subpartition","type":"ActivityPartition","aggregation":"composite","subsettedProperty":"ActivityGroup-subgroup","association":"A_subpartition_superPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-subpartition-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-subpartition","body":"Other ActivityPartitions immediately contained in this ActivityPartition (as its subgroups)."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ActivityPartition-subpartition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityPartition-subpartition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ActivityPartition-superPartition","$ns":"uml","name":"superPartition","type":"ActivityPartition","subsettedProperty":"ActivityGroup-superGroup","association":"A_subpartition_superPartition","ownedComment":[{"$type":"Comment","$id":"ActivityPartition-superPartition-_ownedComment.0","$ns":"uml","annotatedElement":"ActivityPartition-superPartition","body":"Other ActivityPartitions immediately containing this ActivityPartition (as its superGroups)."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ActivityPartition-superPartition-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"CentralBufferNode","$ns":"uml","name":"CentralBufferNode","ownedComment":[{"$type":"Comment","$id":"CentralBufferNode-_ownedComment.0","$ns":"uml","annotatedElement":"CentralBufferNode","body":"A CentralBufferNode is an ObjectNode for managing flows from multiple sources and targets."}],"generalization":[{"$type":"Generalization","$id":"CentralBufferNode-_generalization.0","$ns":"uml","general":"ObjectNode"}]},{"$type":"Class","$id":"ControlFlow","$ns":"uml","name":"ControlFlow","ownedComment":[{"$type":"Comment","$id":"ControlFlow-_ownedComment.0","$ns":"uml","annotatedElement":"ControlFlow","body":"A ControlFlow is an ActivityEdge traversed by control tokens or object tokens of control type, which are use to control the execution of ExecutableNodes."}],"ownedRule":[{"$type":"Constraint","$id":"ControlFlow-object_nodes","$ns":"uml","name":"object_nodes","constrainedElement":"ControlFlow","ownedComment":[{"$type":"Comment","$id":"ControlFlow-object_nodes-_ownedComment.0","$ns":"uml","annotatedElement":"ControlFlow-object_nodes","body":"ControlFlows may not have ObjectNodes at either end, except for ObjectNodes with control type."}],"specification":[{"$type":"OpaqueExpression","$id":"ControlFlow-object_nodes-_specification","$ns":"uml","language":"OCL","body":"(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and \r\n(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)"}]}],"generalization":[{"$type":"Generalization","$id":"ControlFlow-_generalization.0","$ns":"uml","general":"ActivityEdge"}]},{"$type":"Class","$id":"ControlNode","$ns":"uml","name":"ControlNode","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ControlNode-_ownedComment.0","$ns":"uml","annotatedElement":"ControlNode","body":"A ControlNode is an abstract ActivityNode that coordinates flows in an Activity."}],"generalization":[{"$type":"Generalization","$id":"ControlNode-_generalization.0","$ns":"uml","general":"ActivityNode"}]},{"$type":"Class","$id":"DataStoreNode","$ns":"uml","name":"DataStoreNode","ownedComment":[{"$type":"Comment","$id":"DataStoreNode-_ownedComment.0","$ns":"uml","annotatedElement":"DataStoreNode","body":"A DataStoreNode is a CentralBufferNode for persistent data."}],"generalization":[{"$type":"Generalization","$id":"DataStoreNode-_generalization.0","$ns":"uml","general":"CentralBufferNode"}]},{"$type":"Class","$id":"DecisionNode","$ns":"uml","name":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode","body":"A DecisionNode is a ControlNode that chooses between outgoing ActivityEdges for the routing of tokens."}],"ownedRule":[{"$type":"Constraint","$id":"DecisionNode-zero_input_parameters","$ns":"uml","name":"zero_input_parameters","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-zero_input_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-zero_input_parameters","body":"If the DecisionNode has no decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has no in parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-zero_input_parameters-_specification","$ns":"uml","language":"OCL","body":"(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies\r\n   decisionInput.inputParameters()->isEmpty()"}]},{"$type":"Constraint","$id":"DecisionNode-edges","$ns":"uml","name":"edges","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-edges-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-edges","body":"The ActivityEdges incoming to and outgoing from a DecisionNode, other than the decisionInputFlow (if any), must be either all ObjectFlows or all ControlFlows."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-edges-_specification","$ns":"uml","language":"OCL","body":"let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in\r\nlet allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in\r\nallRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))\r\n"}]},{"$type":"Constraint","$id":"DecisionNode-decision_input_flow_incoming","$ns":"uml","name":"decision_input_flow_incoming","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-decision_input_flow_incoming-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-decision_input_flow_incoming","body":"The decisionInputFlow of a DecisionNode must be an incoming ActivityEdge of the DecisionNode."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-decision_input_flow_incoming-_specification","$ns":"uml","language":"OCL","body":"incoming->includes(decisionInputFlow)"}]},{"$type":"Constraint","$id":"DecisionNode-two_input_parameters","$ns":"uml","name":"two_input_parameters","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-two_input_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-two_input_parameters","body":"If the DecisionNode has a decisionInputFlow and an second incoming ObjectFlow, then any decisionInput has two in Parameters, the first of which has a type that is the same as or a supertype of the type of object tokens offered on the non-decisionInputFlow and the second of which has a type that is the same as or a supertype of the type of object tokens offered on the decisionInputFlow."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-two_input_parameters-_specification","$ns":"uml","language":"OCL","body":"(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies\r\n\tdecisionInput.inputParameters()->size()=2"}]},{"$type":"Constraint","$id":"DecisionNode-incoming_outgoing_edges","$ns":"uml","name":"incoming_outgoing_edges","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-incoming_outgoing_edges-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-incoming_outgoing_edges","body":"A DecisionNode has one or two incoming ActivityEdges and at least one outgoing ActivityEdge."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-incoming_outgoing_edges-_specification","$ns":"uml","language":"OCL","body":"(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0"}]},{"$type":"Constraint","$id":"DecisionNode-incoming_control_one_input_parameter","$ns":"uml","name":"incoming_control_one_input_parameter","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-incoming_control_one_input_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-incoming_control_one_input_parameter","body":"If the DecisionNode has a decisionInputFlow and an incoming ControlFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the decisionInputFlow."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-incoming_control_one_input_parameter-_specification","$ns":"uml","language":"OCL","body":"(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies\r\n\tdecisionInput.inputParameters()->size()=1"}]},{"$type":"Constraint","$id":"DecisionNode-parameters","$ns":"uml","name":"parameters","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-parameters-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-parameters","body":"A decisionInput Behavior has no out parameters, no inout parameters, and one return parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-parameters-_specification","$ns":"uml","language":"OCL","body":"decisionInput<>null implies \r\n  (decisionInput.ownedParameter->forAll(par | \r\n     par.direction <> ParameterDirectionKind::out and \r\n     par.direction <> ParameterDirectionKind::inout ) and\r\n   decisionInput.ownedParameter->one(par | \r\n     par.direction <> ParameterDirectionKind::return))\r\n     "}]},{"$type":"Constraint","$id":"DecisionNode-incoming_object_one_input_parameter","$ns":"uml","name":"incoming_object_one_input_parameter","constrainedElement":"DecisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-incoming_object_one_input_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-incoming_object_one_input_parameter","body":"If the DecisionNode has no decisionInputFlow and an incoming ObjectFlow, then any decisionInput Behavior has one in Parameter whose type is the same as or a supertype of the type of object tokens offered on the incoming ObjectFlow."}],"specification":[{"$type":"OpaqueExpression","$id":"DecisionNode-incoming_object_one_input_parameter-_specification","$ns":"uml","language":"OCL","body":"(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies\r\n\tdecisionInput.inputParameters()->size()=1"}]}],"generalization":[{"$type":"Generalization","$id":"DecisionNode-_generalization.0","$ns":"uml","general":"ControlNode"}],"ownedAttribute":[{"$type":"Property","$id":"DecisionNode-decisionInput","$ns":"uml","name":"decisionInput","type":"Behavior","association":"A_decisionInput_decisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-decisionInput-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-decisionInput","body":"A Behavior that is executed to provide an input to guard ValueSpecifications on ActivityEdges outgoing from the DecisionNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"DecisionNode-decisionInput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DecisionNode-decisionInputFlow","$ns":"uml","name":"decisionInputFlow","type":"ObjectFlow","association":"A_decisionInputFlow_decisionNode","ownedComment":[{"$type":"Comment","$id":"DecisionNode-decisionInputFlow-_ownedComment.0","$ns":"uml","annotatedElement":"DecisionNode-decisionInputFlow","body":"An additional ActivityEdge incoming to the DecisionNode that provides a decision input value for the guards ValueSpecifications on ActivityEdges outgoing from the DecisionNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"DecisionNode-decisionInputFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ExceptionHandler","$ns":"uml","name":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler","body":"An ExceptionHandler is an Element that specifies a handlerBody ExecutableNode to execute in case the specified exception occurs during the execution of the protected ExecutableNode."}],"ownedRule":[{"$type":"Constraint","$id":"ExceptionHandler-handler_body_edges","$ns":"uml","name":"handler_body_edges","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-handler_body_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-handler_body_edges","body":"The handlerBody has no incoming or outgoing ActivityEdges and the exceptionInput has no incoming ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-handler_body_edges-_specification","$ns":"uml","language":"OCL","body":"handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()"}]},{"$type":"Constraint","$id":"ExceptionHandler-output_pins","$ns":"uml","name":"output_pins","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-output_pins","body":"If the protectedNode is an Action with OutputPins, then the handlerBody must also be an Action with the same number of OutputPins, which are compatible in type, ordering, and multiplicity to those of the protectedNode."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-output_pins-_specification","$ns":"uml","language":"OCL","body":"(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies\r\n(\r\n  handlerBody.oclIsKindOf(Action) and \r\n  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,\r\n        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in\r\n    protectedNodeOutput->size() = handlerBodyOutput->size() and\r\n    Sequence{1..protectedNodeOutput->size()}->forAll(i |\r\n    \thandlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and\r\n    \thandlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and\r\n    \thandlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))\r\n)"}]},{"$type":"Constraint","$id":"ExceptionHandler-one_input","$ns":"uml","name":"one_input","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-one_input-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-one_input","body":"The handlerBody is an Action with one InputPin, and that InputPin is the same as the exceptionInput."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-one_input-_specification","$ns":"uml","language":"OCL","body":"handlerBody.oclIsKindOf(Action) and\r\nlet inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in\r\ninputs->size()=1 and inputs->first()=exceptionInput"}]},{"$type":"Constraint","$id":"ExceptionHandler-edge_source_target","$ns":"uml","name":"edge_source_target","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-edge_source_target-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-edge_source_target","body":"An ActivityEdge that has a source within the handlerBody of an ExceptionHandler must have its target in the handlerBody also, and vice versa."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-edge_source_target-_specification","$ns":"uml","language":"OCL","body":"let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in\r\nnodes.outgoing->forAll(nodes->includes(target)) and\r\nnodes.incoming->forAll(nodes->includes(source))"}]},{"$type":"Constraint","$id":"ExceptionHandler-handler_body_owner","$ns":"uml","name":"handler_body_owner","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-handler_body_owner-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-handler_body_owner","body":"The handlerBody must have the same owner as the protectedNode."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-handler_body_owner-_specification","$ns":"uml","language":"OCL","body":"handlerBody.owner=protectedNode.owner"}]},{"$type":"Constraint","$id":"ExceptionHandler-exception_input_type","$ns":"uml","name":"exception_input_type","constrainedElement":"ExceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-exception_input_type-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-exception_input_type","body":"The exceptionInput must either have no type or every exceptionType must conform to the exceptionInput type."}],"specification":[{"$type":"OpaqueExpression","$id":"ExceptionHandler-exception_input_type-_specification","$ns":"uml","language":"OCL","body":"exceptionInput.type=null or \r\nexceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))"}]}],"generalization":[{"$type":"Generalization","$id":"ExceptionHandler-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"ExceptionHandler-exceptionInput","$ns":"uml","name":"exceptionInput","type":"ObjectNode","association":"A_exceptionInput_exceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-exceptionInput-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-exceptionInput","body":"An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute."}]},{"$type":"Property","$id":"ExceptionHandler-exceptionType","$ns":"uml","name":"exceptionType","type":"Classifier","association":"A_exceptionType_exceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-exceptionType-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-exceptionType","body":"The Classifiers whose instances the ExceptionHandler catches as exceptions. If an exception occurs whose type is any exceptionType, the ExceptionHandler catches the exception and executes the handlerBody."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ExceptionHandler-exceptionType-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"ExceptionHandler-handlerBody","$ns":"uml","name":"handlerBody","type":"ExecutableNode","association":"A_handlerBody_exceptionHandler","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-handlerBody-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-handlerBody","body":"An ExecutableNode that is executed if the ExceptionHandler catches an exception."}]},{"$type":"Property","$id":"ExceptionHandler-protectedNode","$ns":"uml","name":"protectedNode","type":"ExecutableNode","subsettedProperty":"Element-owner","association":"A_handler_protectedNode","ownedComment":[{"$type":"Comment","$id":"ExceptionHandler-protectedNode-_ownedComment.0","$ns":"uml","annotatedElement":"ExceptionHandler-protectedNode","body":"The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler."}]}]},{"$type":"Class","$id":"ExecutableNode","$ns":"uml","name":"ExecutableNode","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ExecutableNode-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutableNode","body":"An ExecutableNode is an abstract class for ActivityNodes whose execution may be controlled using ControlFlows and to which ExceptionHandlers may be attached."}],"generalization":[{"$type":"Generalization","$id":"ExecutableNode-_generalization.0","$ns":"uml","general":"ActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"ExecutableNode-handler","$ns":"uml","name":"handler","type":"ExceptionHandler","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_handler_protectedNode","ownedComment":[{"$type":"Comment","$id":"ExecutableNode-handler-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutableNode-handler","body":"A set of ExceptionHandlers that are examined if an exception propagates out of the ExceptionNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ExecutableNode-handler-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExecutableNode-handler-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"FinalNode","$ns":"uml","name":"FinalNode","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"FinalNode-_ownedComment.0","$ns":"uml","annotatedElement":"FinalNode","body":"A FinalNode is an abstract ControlNode at which a flow in an Activity stops."}],"ownedRule":[{"$type":"Constraint","$id":"FinalNode-no_outgoing_edges","$ns":"uml","name":"no_outgoing_edges","constrainedElement":"FinalNode","ownedComment":[{"$type":"Comment","$id":"FinalNode-no_outgoing_edges-_ownedComment.0","$ns":"uml","annotatedElement":"FinalNode-no_outgoing_edges","body":"A FinalNode has no outgoing ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalNode-no_outgoing_edges-_specification","$ns":"uml","language":"OCL","body":"outgoing->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"FinalNode-_generalization.0","$ns":"uml","general":"ControlNode"}]},{"$type":"Class","$id":"FlowFinalNode","$ns":"uml","name":"FlowFinalNode","ownedComment":[{"$type":"Comment","$id":"FlowFinalNode-_ownedComment.0","$ns":"uml","annotatedElement":"FlowFinalNode","body":"A FlowFinalNode is a FinalNode that terminates a flow by consuming the tokens offered to it."}],"generalization":[{"$type":"Generalization","$id":"FlowFinalNode-_generalization.0","$ns":"uml","general":"FinalNode"}]},{"$type":"Class","$id":"ForkNode","$ns":"uml","name":"ForkNode","ownedComment":[{"$type":"Comment","$id":"ForkNode-_ownedComment.0","$ns":"uml","annotatedElement":"ForkNode","body":"A ForkNode is a ControlNode that splits a flow into multiple concurrent flows."}],"ownedRule":[{"$type":"Constraint","$id":"ForkNode-edges","$ns":"uml","name":"edges","constrainedElement":"ForkNode","ownedComment":[{"$type":"Comment","$id":"ForkNode-edges-_ownedComment.0","$ns":"uml","annotatedElement":"ForkNode-edges","body":"The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows."}],"specification":[{"$type":"OpaqueExpression","$id":"ForkNode-edges-_specification","$ns":"uml","language":"OCL","body":"let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\r\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))\r\n"}]},{"$type":"Constraint","$id":"ForkNode-one_incoming_edge","$ns":"uml","name":"one_incoming_edge","constrainedElement":"ForkNode","ownedComment":[{"$type":"Comment","$id":"ForkNode-one_incoming_edge-_ownedComment.0","$ns":"uml","annotatedElement":"ForkNode-one_incoming_edge","body":"A ForkNode has one incoming ActivityEdge."}],"specification":[{"$type":"OpaqueExpression","$id":"ForkNode-one_incoming_edge-_specification","$ns":"uml","language":"OCL","body":"incoming->size()=1"}]}],"generalization":[{"$type":"Generalization","$id":"ForkNode-_generalization.0","$ns":"uml","general":"ControlNode"}]},{"$type":"Class","$id":"InitialNode","$ns":"uml","name":"InitialNode","ownedComment":[{"$type":"Comment","$id":"InitialNode-_ownedComment.0","$ns":"uml","annotatedElement":"InitialNode","body":"An InitialNode is a ControlNode that offers a single control token when initially enabled."}],"ownedRule":[{"$type":"Constraint","$id":"InitialNode-no_incoming_edges","$ns":"uml","name":"no_incoming_edges","constrainedElement":"InitialNode","ownedComment":[{"$type":"Comment","$id":"InitialNode-no_incoming_edges-_ownedComment.0","$ns":"uml","annotatedElement":"InitialNode-no_incoming_edges","body":"An InitialNode has no incoming ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"InitialNode-no_incoming_edges-_specification","$ns":"uml","language":"OCL","body":"incoming->isEmpty()"}]},{"$type":"Constraint","$id":"InitialNode-control_edges","$ns":"uml","name":"control_edges","constrainedElement":"InitialNode","ownedComment":[{"$type":"Comment","$id":"InitialNode-control_edges-_ownedComment.0","$ns":"uml","annotatedElement":"InitialNode-control_edges","body":"All the outgoing ActivityEdges from an InitialNode must be ControlFlows."}],"specification":[{"$type":"OpaqueExpression","$id":"InitialNode-control_edges-_specification","$ns":"uml","language":"OCL","body":"outgoing->forAll(oclIsKindOf(ControlFlow))"}]}],"generalization":[{"$type":"Generalization","$id":"InitialNode-_generalization.0","$ns":"uml","general":"ControlNode"}]},{"$type":"Class","$id":"InterruptibleActivityRegion","$ns":"uml","name":"InterruptibleActivityRegion","ownedComment":[{"$type":"Comment","$id":"InterruptibleActivityRegion-_ownedComment.0","$ns":"uml","annotatedElement":"InterruptibleActivityRegion","body":"An InterruptibleActivityRegion is an ActivityGroup that supports the termination of tokens flowing in the portions of an activity within it."}],"ownedRule":[{"$type":"Constraint","$id":"InterruptibleActivityRegion-interrupting_edges","$ns":"uml","name":"interrupting_edges","constrainedElement":"InterruptibleActivityRegion","ownedComment":[{"$type":"Comment","$id":"InterruptibleActivityRegion-interrupting_edges-_ownedComment.0","$ns":"uml","annotatedElement":"InterruptibleActivityRegion-interrupting_edges","body":"The interruptingEdges of an InterruptibleActivityRegion must have their source in the region and their target outside the region, but within the same Activity containing the region."}],"specification":[{"$type":"OpaqueExpression","$id":"InterruptibleActivityRegion-interrupting_edges-_specification","$ns":"uml","language":"OCL","body":"interruptingEdge->forAll(edge | \r\n  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)"}]}],"generalization":[{"$type":"Generalization","$id":"InterruptibleActivityRegion-_generalization.0","$ns":"uml","general":"ActivityGroup"}],"ownedAttribute":[{"$type":"Property","$id":"InterruptibleActivityRegion-interruptingEdge","$ns":"uml","name":"interruptingEdge","type":"ActivityEdge","association":"A_interruptingEdge_interrupts","ownedComment":[{"$type":"Comment","$id":"InterruptibleActivityRegion-interruptingEdge-_ownedComment.0","$ns":"uml","annotatedElement":"InterruptibleActivityRegion-interruptingEdge","body":"The ActivityEdges leaving the InterruptibleActivityRegion on which a traversing token will result in the termination of other tokens flowing in the InterruptibleActivityRegion."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InterruptibleActivityRegion-interruptingEdge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InterruptibleActivityRegion-interruptingEdge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InterruptibleActivityRegion-node","$ns":"uml","name":"node","type":"ActivityNode","subsettedProperty":"ActivityGroup-containedNode","association":"A_inInterruptibleRegion_node","ownedComment":[{"$type":"Comment","$id":"InterruptibleActivityRegion-node-_ownedComment.0","$ns":"uml","annotatedElement":"InterruptibleActivityRegion-node","body":"ActivityNodes immediately contained in the InterruptibleActivityRegion."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InterruptibleActivityRegion-node-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InterruptibleActivityRegion-node-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"JoinNode","$ns":"uml","name":"JoinNode","ownedComment":[{"$type":"Comment","$id":"JoinNode-_ownedComment.0","$ns":"uml","annotatedElement":"JoinNode","body":"A JoinNode is a ControlNode that synchronizes multiple flows."}],"ownedRule":[{"$type":"Constraint","$id":"JoinNode-one_outgoing_edge","$ns":"uml","name":"one_outgoing_edge","constrainedElement":"JoinNode","ownedComment":[{"$type":"Comment","$id":"JoinNode-one_outgoing_edge-_ownedComment.0","$ns":"uml","annotatedElement":"JoinNode-one_outgoing_edge","body":"A JoinNode has one outgoing ActivityEdge."}],"specification":[{"$type":"OpaqueExpression","$id":"JoinNode-one_outgoing_edge-_specification","$ns":"uml","language":"OCL","body":"outgoing->size() = 1"}]},{"$type":"Constraint","$id":"JoinNode-incoming_object_flow","$ns":"uml","name":"incoming_object_flow","constrainedElement":"JoinNode","ownedComment":[{"$type":"Comment","$id":"JoinNode-incoming_object_flow-_ownedComment.0","$ns":"uml","annotatedElement":"JoinNode-incoming_object_flow","body":"If one of the incoming ActivityEdges of a JoinNode is an ObjectFlow, then its outgoing ActivityEdge must be an ObjectFlow. Otherwise its outgoing ActivityEdge must be a ControlFlow."}],"specification":[{"$type":"OpaqueExpression","$id":"JoinNode-incoming_object_flow-_specification","$ns":"uml","language":"OCL","body":"if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))\r\nelse outgoing->forAll(oclIsKindOf(ControlFlow))\r\nendif"}]}],"generalization":[{"$type":"Generalization","$id":"JoinNode-_generalization.0","$ns":"uml","general":"ControlNode"}],"ownedAttribute":[{"$type":"Property","$id":"JoinNode-isCombineDuplicate","$ns":"uml","name":"isCombineDuplicate","ownedComment":[{"$type":"Comment","$id":"JoinNode-isCombineDuplicate-_ownedComment.0","$ns":"uml","annotatedElement":"JoinNode-isCombineDuplicate","body":"Indicates whether incoming tokens having objects with the same identity are combined into one by the JoinNode."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"JoinNode-isCombineDuplicate-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"JoinNode-joinSpec","$ns":"uml","name":"joinSpec","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_joinSpec_joinNode","ownedComment":[{"$type":"Comment","$id":"JoinNode-joinSpec-_ownedComment.0","$ns":"uml","annotatedElement":"JoinNode-joinSpec","body":"A ValueSpecification giving the condition under which the JoinNode will offer a token on its outgoing ActivityEdge. If no joinSpec is specified, then the JoinNode will offer an outgoing token if tokens are offered on all of its incoming ActivityEdges (an \"and\" condition)."}],"lowerValue":[{"$type":"LiteralInteger","$id":"JoinNode-joinSpec-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"MergeNode","$ns":"uml","name":"MergeNode","ownedComment":[{"$type":"Comment","$id":"MergeNode-_ownedComment.0","$ns":"uml","annotatedElement":"MergeNode","body":"A merge node is a control node that brings together multiple alternate flows. It is not used to synchronize concurrent flows but to accept one among several alternate flows."}],"ownedRule":[{"$type":"Constraint","$id":"MergeNode-one_outgoing_edge","$ns":"uml","name":"one_outgoing_edge","constrainedElement":"MergeNode","ownedComment":[{"$type":"Comment","$id":"MergeNode-one_outgoing_edge-_ownedComment.0","$ns":"uml","annotatedElement":"MergeNode-one_outgoing_edge","body":"A MergeNode has one outgoing ActivityEdge."}],"specification":[{"$type":"OpaqueExpression","$id":"MergeNode-one_outgoing_edge-_specification","$ns":"uml","language":"OCL","body":"outgoing->size()=1"}]},{"$type":"Constraint","$id":"MergeNode-edges","$ns":"uml","name":"edges","constrainedElement":"MergeNode","ownedComment":[{"$type":"Comment","$id":"MergeNode-edges-_ownedComment.0","$ns":"uml","annotatedElement":"MergeNode-edges","body":"The ActivityEdges incoming to and outgoing from a MergeNode must be either all ObjectFlows or all ControlFlows."}],"specification":[{"$type":"OpaqueExpression","$id":"MergeNode-edges-_specification","$ns":"uml","language":"OCL","body":"let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in\r\nallEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"MergeNode-_generalization.0","$ns":"uml","general":"ControlNode"}]},{"$type":"Class","$id":"ObjectFlow","$ns":"uml","name":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow","body":"An ObjectFlow is an ActivityEdge that is traversed by object tokens that may hold values. Object flows also support multicast/receive, token selection from object nodes, and transformation of tokens."}],"ownedRule":[{"$type":"Constraint","$id":"ObjectFlow-input_and_output_parameter","$ns":"uml","name":"input_and_output_parameter","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-input_and_output_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-input_and_output_parameter","body":"A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same as or a supertype of the type of the source ObjectNode, be non-unique and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of source ObjectNode. The Behavior cannot have side effects."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-input_and_output_parameter-_specification","$ns":"uml","language":"OCL","body":"selection<>null implies\r\n\tselection.inputParameters()->size()=1 and\r\n\tselection.inputParameters()->forAll(not isUnique and is(0,*)) and\r\n\tselection.outputParameters()->size()=1"}]},{"$type":"Constraint","$id":"ObjectFlow-no_executable_nodes","$ns":"uml","name":"no_executable_nodes","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-no_executable_nodes-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-no_executable_nodes","body":"ObjectFlows may not have ExecutableNodes at either end."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-no_executable_nodes-_specification","$ns":"uml","language":"OCL","body":"not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))"}]},{"$type":"Constraint","$id":"ObjectFlow-transformation_behavior","$ns":"uml","name":"transformation_behavior","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-transformation_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-transformation_behavior","body":"A transformation Behavior has one input Parameter and one output Parameter. The input Parameter must be the same as or a supertype of the type of object token coming from the source end. The output Parameter must be the same or a subtype of the type of object token expected downstream. The Behavior cannot have side effects."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-transformation_behavior-_specification","$ns":"uml","language":"OCL","body":"transformation<>null implies\r\n\ttransformation.inputParameters()->size()=1 and\r\n\ttransformation.outputParameters()->size()=1"}]},{"$type":"Constraint","$id":"ObjectFlow-selection_behavior","$ns":"uml","name":"selection_behavior","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-selection_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-selection_behavior","body":"An ObjectFlow may have a selection Behavior only if it has an ObjectNode as its source."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-selection_behavior-_specification","$ns":"uml","language":"OCL","body":"selection<>null implies source.oclIsKindOf(ObjectNode)"}]},{"$type":"Constraint","$id":"ObjectFlow-compatible_types","$ns":"uml","name":"compatible_types","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-compatible_types-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-compatible_types","body":"ObjectNodes connected by an ObjectFlow, with optionally intervening ControlNodes, must have compatible types. In particular, the downstream ObjectNode type must be the same or a supertype of the upstream ObjectNode type."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-compatible_types-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"ObjectFlow-same_upper_bounds","$ns":"uml","name":"same_upper_bounds","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-same_upper_bounds-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-same_upper_bounds","body":"ObjectNodes connected by an ObjectFlow, with optionally intervening ControlNodes, must have the same upperBounds."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-same_upper_bounds-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"ObjectFlow-target","$ns":"uml","name":"target","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-target-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-target","body":"An ObjectFlow with a constant weight may not target an ObjectNode, with optionally intervening ControlNodes, that has an upper bound less than the weight."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-target-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"ObjectFlow-is_multicast_or_is_multireceive","$ns":"uml","name":"is_multicast_or_is_multireceive","constrainedElement":"ObjectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-is_multicast_or_is_multireceive-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-is_multicast_or_is_multireceive","body":"isMulticast and isMultireceive cannot both be true."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectFlow-is_multicast_or_is_multireceive-_specification","$ns":"uml","language":"OCL","body":"not (isMulticast and isMultireceive)"}]}],"generalization":[{"$type":"Generalization","$id":"ObjectFlow-_generalization.0","$ns":"uml","general":"ActivityEdge"}],"ownedAttribute":[{"$type":"Property","$id":"ObjectFlow-isMulticast","$ns":"uml","name":"isMulticast","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-isMulticast-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-isMulticast","body":"Indicates whether the objects in the ObjectFlow are passed by multicasting."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ObjectFlow-isMulticast-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectFlow-isMultireceive","$ns":"uml","name":"isMultireceive","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-isMultireceive-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-isMultireceive","body":"Indicates whether the objects in the ObjectFlow are gathered from respondents to multicasting."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ObjectFlow-isMultireceive-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectFlow-selection","$ns":"uml","name":"selection","type":"Behavior","association":"A_selection_objectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-selection-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-selection","body":"A Behavior used to select tokens from a source ObjectNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ObjectFlow-selection-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectFlow-transformation","$ns":"uml","name":"transformation","type":"Behavior","association":"A_transformation_objectFlow","ownedComment":[{"$type":"Comment","$id":"ObjectFlow-transformation-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectFlow-transformation","body":"A Behavior used to change or replace object tokens flowing along the ObjectFlow."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ObjectFlow-transformation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ObjectNode","$ns":"uml","name":"ObjectNode","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ObjectNode-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode","body":"An ObjectNode is an abstract ActivityNode that may hold tokens within the object flow in an Activity. ObjectNodes also support token selection, limitation on the number of tokens held, specification of the state required for tokens being held, and carrying control values.\r\n"}],"ownedRule":[{"$type":"Constraint","$id":"ObjectNode-input_output_parameter","$ns":"uml","name":"input_output_parameter","constrainedElement":"ObjectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-input_output_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-input_output_parameter","body":"A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same type as  or a supertype of the type of ObjectNode, be non-unique, and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of ObjectNode. The Behavior cannot have side effects."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectNode-input_output_parameter-_specification","$ns":"uml","language":"OCL","body":"selection<>null implies\r\n\tselection.inputParameters()->size()=1 and\r\n\tselection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and\r\n\tselection.outputParameters()->size()=1 and\r\n\t\tselection.inputParameters()->forAll(p | self.type.conformsTo(p.type))\r\n\t"}]},{"$type":"Constraint","$id":"ObjectNode-selection_behavior","$ns":"uml","name":"selection_behavior","constrainedElement":"ObjectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-selection_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-selection_behavior","body":"If an ObjectNode has a selection Behavior, then the ordering of the object node is ordered, and vice versa."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectNode-selection_behavior-_specification","$ns":"uml","language":"OCL","body":"(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)"}]},{"$type":"Constraint","$id":"ObjectNode-object_flow_edges","$ns":"uml","name":"object_flow_edges","constrainedElement":"ObjectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-object_flow_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-object_flow_edges","body":"If isControlType=false, the ActivityEdges incoming to or outgoing from an ObjectNode must all be ObjectFlows."}],"specification":[{"$type":"OpaqueExpression","$id":"ObjectNode-object_flow_edges-_specification","$ns":"uml","language":"OCL","body":"(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))"}]}],"generalization":[{"$type":"Generalization","$id":"ObjectNode-_generalization.1","$ns":"uml","general":"TypedElement"},{"$type":"Generalization","$id":"ObjectNode-_generalization.0","$ns":"uml","general":"ActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"ObjectNode-inState","$ns":"uml","name":"inState","type":"State","association":"A_inState_objectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-inState-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-inState","body":"The States required to be associated with the values held by tokens on this ObjectNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ObjectNode-inState-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ObjectNode-inState-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectNode-isControlType","$ns":"uml","name":"isControlType","ownedComment":[{"$type":"Comment","$id":"ObjectNode-isControlType-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-isControlType","body":"Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ObjectNode-isControlType-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectNode-ordering","$ns":"uml","name":"ordering","type":"ObjectNodeOrderingKind","ownedComment":[{"$type":"Comment","$id":"ObjectNode-ordering-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-ordering","body":"Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode."}],"defaultValue":[{"$type":"InstanceValue","$id":"ObjectNode-ordering-_defaultValue","$ns":"uml","type":"ObjectNodeOrderingKind","instance":"ObjectNodeOrderingKind-FIFO"}]},{"$type":"Property","$id":"ObjectNode-selection","$ns":"uml","name":"selection","type":"Behavior","association":"A_selection_objectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-selection-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-selection","body":"A Behavior used to select tokens to be offered on outgoing ActivityEdges."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ObjectNode-selection-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ObjectNode-upperBound","$ns":"uml","name":"upperBound","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_upperBound_objectNode","ownedComment":[{"$type":"Comment","$id":"ObjectNode-upperBound-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNode-upperBound","body":"The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ObjectNode-upperBound-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Variable","$ns":"uml","name":"Variable","ownedComment":[{"$type":"Comment","$id":"Variable-_ownedComment.0","$ns":"uml","annotatedElement":"Variable","body":"A Variable is a ConnectableElement that may store values during the execution of an Activity. Reading and writing the values of a Variable provides an alternative means for passing data than the use of ObjectFlows. A Variable may be owned directly by an Activity, in which case it is accessible from anywhere within that activity, or it may be owned by a StructuredActivityNode, in which case it is only accessible within that node."}],"generalization":[{"$type":"Generalization","$id":"Variable-_generalization.0","$ns":"uml","general":"ConnectableElement"},{"$type":"Generalization","$id":"Variable-_generalization.1","$ns":"uml","general":"MultiplicityElement"}],"ownedAttribute":[{"$type":"Property","$id":"Variable-activityScope","$ns":"uml","name":"activityScope","type":"Activity","subsettedProperty":"NamedElement-namespace","association":"A_variable_activityScope","ownedComment":[{"$type":"Comment","$id":"Variable-activityScope-_ownedComment.0","$ns":"uml","annotatedElement":"Variable-activityScope","body":"An Activity that owns the Variable."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Variable-activityScope-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Variable-scope","$ns":"uml","name":"scope","type":"StructuredActivityNode","subsettedProperty":"NamedElement-namespace","association":"A_variable_scope","ownedComment":[{"$type":"Comment","$id":"Variable-scope-_ownedComment.0","$ns":"uml","annotatedElement":"Variable-scope","body":"A StructuredActivityNode that owns the Variable."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Variable-scope-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Variable-isAccessibleBy","$ns":"uml","name":"isAccessibleBy","isQuery":"true","bodyCondition":"Variable-isAccessibleBy-spec","ownedComment":[{"$type":"Comment","$id":"Variable-isAccessibleBy-_ownedComment.0","$ns":"uml","annotatedElement":"Variable-isAccessibleBy","body":"A Variable is accessible by Actions within its scope (the Activity or StructuredActivityNode that owns it)."}],"ownedRule":[{"$type":"Constraint","$id":"Variable-isAccessibleBy-spec","$ns":"uml","name":"spec","constrainedElement":"Variable-isAccessibleBy","specification":[{"$type":"OpaqueExpression","$id":"Variable-isAccessibleBy-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if scope<>null then scope.allOwnedNodes()->includes(a)\r\nelse a.containingActivity()=activityScope\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Variable-isAccessibleBy-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Variable-isAccessibleBy-a","$ns":"uml","name":"a","type":"Action"}]}]},{"$type":"Enumeration","$id":"ObjectNodeOrderingKind","$ns":"uml","name":"ObjectNodeOrderingKind","ownedComment":[{"$type":"Comment","$id":"ObjectNodeOrderingKind-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNodeOrderingKind","body":"ObjectNodeOrderingKind is an enumeration indicating queuing order for offering the tokens held by an ObjectNode."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"ObjectNodeOrderingKind-unordered","$ns":"uml","name":"unordered","ownedComment":[{"$type":"Comment","$id":"ObjectNodeOrderingKind-unordered-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNodeOrderingKind-unordered","body":"Indicates that tokens are unordered."}]},{"$type":"EnumerationLiteral","$id":"ObjectNodeOrderingKind-ordered","$ns":"uml","name":"ordered","ownedComment":[{"$type":"Comment","$id":"ObjectNodeOrderingKind-ordered-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNodeOrderingKind-ordered","body":"Indicates that tokens are ordered."}]},{"$type":"EnumerationLiteral","$id":"ObjectNodeOrderingKind-LIFO","$ns":"uml","name":"LIFO","ownedComment":[{"$type":"Comment","$id":"ObjectNodeOrderingKind-LIFO-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNodeOrderingKind-LIFO","body":"Indicates that tokens are queued in a last in, first out manner."}]},{"$type":"EnumerationLiteral","$id":"ObjectNodeOrderingKind-FIFO","$ns":"uml","name":"FIFO","ownedComment":[{"$type":"Comment","$id":"ObjectNodeOrderingKind-FIFO-_ownedComment.0","$ns":"uml","annotatedElement":"ObjectNodeOrderingKind-FIFO","body":"Indicates that tokens are queued in a first in, first out manner."}]}]},{"$type":"Association","$id":"A_selection_objectNode","$ns":"uml","name":"A_selection_objectNode","memberEnd":"ObjectNode-selection A_selection_objectNode-objectNode","ownedEnd":[{"$type":"Property","$id":"A_selection_objectNode-objectNode","$ns":"uml","name":"objectNode","type":"ObjectNode","association":"A_selection_objectNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_selection_objectNode-objectNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_selection_objectNode-objectNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inState_objectNode","$ns":"uml","name":"A_inState_objectNode","memberEnd":"ObjectNode-inState A_inState_objectNode-objectNode","ownedEnd":[{"$type":"Property","$id":"A_inState_objectNode-objectNode","$ns":"uml","name":"objectNode","type":"ObjectNode","association":"A_inState_objectNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_inState_objectNode-objectNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_inState_objectNode-objectNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_upperBound_objectNode","$ns":"uml","name":"A_upperBound_objectNode","memberEnd":"ObjectNode-upperBound A_upperBound_objectNode-objectNode","ownedEnd":[{"$type":"Property","$id":"A_upperBound_objectNode-objectNode","$ns":"uml","name":"objectNode","type":"ObjectNode","subsettedProperty":"Element-owner","association":"A_upperBound_objectNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_upperBound_objectNode-objectNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_transformation_objectFlow","$ns":"uml","name":"A_transformation_objectFlow","memberEnd":"ObjectFlow-transformation A_transformation_objectFlow-objectFlow","ownedEnd":[{"$type":"Property","$id":"A_transformation_objectFlow-objectFlow","$ns":"uml","name":"objectFlow","type":"ObjectFlow","association":"A_transformation_objectFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_transformation_objectFlow-objectFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_transformation_objectFlow-objectFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_selection_objectFlow","$ns":"uml","name":"A_selection_objectFlow","memberEnd":"ObjectFlow-selection A_selection_objectFlow-objectFlow","ownedEnd":[{"$type":"Property","$id":"A_selection_objectFlow-objectFlow","$ns":"uml","name":"objectFlow","type":"ObjectFlow","association":"A_selection_objectFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_selection_objectFlow-objectFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_selection_objectFlow-objectFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_joinSpec_joinNode","$ns":"uml","name":"A_joinSpec_joinNode","memberEnd":"JoinNode-joinSpec A_joinSpec_joinNode-joinNode","ownedEnd":[{"$type":"Property","$id":"A_joinSpec_joinNode-joinNode","$ns":"uml","name":"joinNode","type":"JoinNode","subsettedProperty":"Element-owner","association":"A_joinSpec_joinNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_joinSpec_joinNode-joinNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_interruptingEdge_interrupts","$ns":"uml","name":"A_interruptingEdge_interrupts","memberEnd":"InterruptibleActivityRegion-interruptingEdge ActivityEdge-interrupts"},{"$type":"Association","$id":"A_handler_protectedNode","$ns":"uml","name":"A_handler_protectedNode","memberEnd":"ExecutableNode-handler ExceptionHandler-protectedNode"},{"$type":"Association","$id":"A_handlerBody_exceptionHandler","$ns":"uml","name":"A_handlerBody_exceptionHandler","memberEnd":"ExceptionHandler-handlerBody A_handlerBody_exceptionHandler-exceptionHandler","ownedEnd":[{"$type":"Property","$id":"A_handlerBody_exceptionHandler-exceptionHandler","$ns":"uml","name":"exceptionHandler","type":"ExceptionHandler","association":"A_handlerBody_exceptionHandler","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_handlerBody_exceptionHandler-exceptionHandler-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_handlerBody_exceptionHandler-exceptionHandler-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_exceptionType_exceptionHandler","$ns":"uml","name":"A_exceptionType_exceptionHandler","memberEnd":"ExceptionHandler-exceptionType A_exceptionType_exceptionHandler-exceptionHandler","ownedEnd":[{"$type":"Property","$id":"A_exceptionType_exceptionHandler-exceptionHandler","$ns":"uml","name":"exceptionHandler","type":"ExceptionHandler","association":"A_exceptionType_exceptionHandler","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_exceptionType_exceptionHandler-exceptionHandler-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_exceptionType_exceptionHandler-exceptionHandler-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_exceptionInput_exceptionHandler","$ns":"uml","name":"A_exceptionInput_exceptionHandler","memberEnd":"ExceptionHandler-exceptionInput A_exceptionInput_exceptionHandler-exceptionHandler","ownedEnd":[{"$type":"Property","$id":"A_exceptionInput_exceptionHandler-exceptionHandler","$ns":"uml","name":"exceptionHandler","type":"ExceptionHandler","association":"A_exceptionInput_exceptionHandler","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_exceptionInput_exceptionHandler-exceptionHandler-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_exceptionInput_exceptionHandler-exceptionHandler-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_decisionInput_decisionNode","$ns":"uml","name":"A_decisionInput_decisionNode","memberEnd":"DecisionNode-decisionInput A_decisionInput_decisionNode-decisionNode","ownedEnd":[{"$type":"Property","$id":"A_decisionInput_decisionNode-decisionNode","$ns":"uml","name":"decisionNode","type":"DecisionNode","association":"A_decisionInput_decisionNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_decisionInput_decisionNode-decisionNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_decisionInput_decisionNode-decisionNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_decisionInputFlow_decisionNode","$ns":"uml","name":"A_decisionInputFlow_decisionNode","memberEnd":"DecisionNode-decisionInputFlow A_decisionInputFlow_decisionNode-decisionNode","ownedEnd":[{"$type":"Property","$id":"A_decisionInputFlow_decisionNode-decisionNode","$ns":"uml","name":"decisionNode","type":"DecisionNode","association":"A_decisionInputFlow_decisionNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_decisionInputFlow_decisionNode-decisionNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_represents_activityPartition","$ns":"uml","name":"A_represents_activityPartition","memberEnd":"ActivityPartition-represents A_represents_activityPartition-activityPartition","ownedEnd":[{"$type":"Property","$id":"A_represents_activityPartition-activityPartition","$ns":"uml","name":"activityPartition","type":"ActivityPartition","association":"A_represents_activityPartition","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_represents_activityPartition-activityPartition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_represents_activityPartition-activityPartition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_subpartition_superPartition","$ns":"uml","name":"A_subpartition_superPartition","memberEnd":"ActivityPartition-subpartition ActivityPartition-superPartition"},{"$type":"Association","$id":"A_edge_inPartition","$ns":"uml","name":"A_edge_inPartition","memberEnd":"ActivityPartition-edge ActivityEdge-inPartition"},{"$type":"Association","$id":"A_parameter_activityParameterNode","$ns":"uml","name":"A_parameter_activityParameterNode","memberEnd":"ActivityParameterNode-parameter A_parameter_activityParameterNode-activityParameterNode","ownedEnd":[{"$type":"Property","$id":"A_parameter_activityParameterNode-activityParameterNode","$ns":"uml","name":"activityParameterNode","type":"ActivityParameterNode","association":"A_parameter_activityParameterNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_parameter_activityParameterNode-activityParameterNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_parameter_activityParameterNode-activityParameterNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inInterruptibleRegion_node","$ns":"uml","name":"A_inInterruptibleRegion_node","memberEnd":"ActivityNode-inInterruptibleRegion InterruptibleActivityRegion-node"},{"$type":"Association","$id":"A_inPartition_node","$ns":"uml","name":"A_inPartition_node","memberEnd":"ActivityNode-inPartition ActivityPartition-node"},{"$type":"Association","$id":"A_incoming_target_node","$ns":"uml","name":"A_incoming_target_node","memberEnd":"ActivityNode-incoming ActivityEdge-target"},{"$type":"Association","$id":"A_outgoing_source_node","$ns":"uml","name":"A_outgoing_source_node","memberEnd":"ActivityNode-outgoing ActivityEdge-source"},{"$type":"Association","$id":"A_redefinedNode_activityNode","$ns":"uml","name":"A_redefinedNode_activityNode","memberEnd":"ActivityNode-redefinedNode A_redefinedNode_activityNode-activityNode","ownedEnd":[{"$type":"Property","$id":"A_redefinedNode_activityNode-activityNode","$ns":"uml","name":"activityNode","type":"ActivityNode","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedNode_activityNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedNode_activityNode-activityNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedNode_activityNode-activityNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_containedEdge_inGroup","$ns":"uml","name":"A_containedEdge_inGroup","memberEnd":"ActivityGroup-containedEdge ActivityEdge-inGroup","isDerived":"true"},{"$type":"Association","$id":"A_containedNode_inGroup","$ns":"uml","name":"A_containedNode_inGroup","memberEnd":"ActivityGroup-containedNode ActivityNode-inGroup","isDerived":"true"},{"$type":"Association","$id":"A_subgroup_superGroup","$ns":"uml","name":"A_subgroup_superGroup","memberEnd":"ActivityGroup-subgroup ActivityGroup-superGroup","isDerived":"true"},{"$type":"Association","$id":"A_redefinedEdge_activityEdge","$ns":"uml","name":"A_redefinedEdge_activityEdge","memberEnd":"ActivityEdge-redefinedEdge A_redefinedEdge_activityEdge-activityEdge","ownedEnd":[{"$type":"Property","$id":"A_redefinedEdge_activityEdge-activityEdge","$ns":"uml","name":"activityEdge","type":"ActivityEdge","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedEdge_activityEdge","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedEdge_activityEdge-activityEdge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedEdge_activityEdge-activityEdge-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_weight_activityEdge","$ns":"uml","name":"A_weight_activityEdge","memberEnd":"ActivityEdge-weight A_weight_activityEdge-activityEdge","ownedEnd":[{"$type":"Property","$id":"A_weight_activityEdge-activityEdge","$ns":"uml","name":"activityEdge","type":"ActivityEdge","subsettedProperty":"Element-owner","association":"A_weight_activityEdge","lowerValue":[{"$type":"LiteralInteger","$id":"A_weight_activityEdge-activityEdge-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_guard_activityEdge","$ns":"uml","name":"A_guard_activityEdge","memberEnd":"ActivityEdge-guard A_guard_activityEdge-activityEdge","ownedEnd":[{"$type":"Property","$id":"A_guard_activityEdge-activityEdge","$ns":"uml","name":"activityEdge","type":"ActivityEdge","subsettedProperty":"Element-owner","association":"A_guard_activityEdge","lowerValue":[{"$type":"LiteralInteger","$id":"A_guard_activityEdge-activityEdge-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_structuredNode_activity","$ns":"uml","name":"A_structuredNode_activity","memberEnd":"Activity-structuredNode StructuredActivityNode-activity"},{"$type":"Association","$id":"A_group_inActivity","$ns":"uml","name":"A_group_inActivity","memberEnd":"Activity-group ActivityGroup-inActivity"},{"$type":"Association","$id":"A_node_activity","$ns":"uml","name":"A_node_activity","memberEnd":"Activity-node ActivityNode-activity"},{"$type":"Association","$id":"A_variable_activityScope","$ns":"uml","name":"A_variable_activityScope","memberEnd":"Activity-variable Variable-activityScope"},{"$type":"Association","$id":"A_edge_activity","$ns":"uml","name":"A_edge_activity","memberEnd":"Activity-edge ActivityEdge-activity"},{"$type":"Association","$id":"A_partition_activity","$ns":"uml","name":"A_partition_activity","memberEnd":"Activity-partition A_partition_activity-activity","ownedEnd":[{"$type":"Property","$id":"A_partition_activity-activity","$ns":"uml","name":"activity","type":"Activity","subsettedProperty":"ActivityGroup-inActivity","association":"A_partition_activity","lowerValue":[{"$type":"LiteralInteger","$id":"A_partition_activity-activity-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"Values","$ns":"uml","name":"Values","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"}],"packagedElement":[{"$type":"Class","$id":"Duration","$ns":"uml","name":"Duration","ownedComment":[{"$type":"Comment","$id":"Duration-_ownedComment.0","$ns":"uml","annotatedElement":"Duration","body":"A Duration is a ValueSpecification that specifies the temporal distance between two time instants."}],"ownedRule":[{"$type":"Constraint","$id":"Duration-no_expr_requires_observation","$ns":"uml","name":"no_expr_requires_observation","constrainedElement":"Duration","ownedComment":[{"$type":"Comment","$id":"Duration-no_expr_requires_observation-_ownedComment.0","$ns":"uml","annotatedElement":"Duration-no_expr_requires_observation","body":"If a Duration has no expr, then it must have a single observation that is a DurationObservation."}],"specification":[{"$type":"OpaqueExpression","$id":"Duration-no_expr_requires_observation-_specification","$ns":"uml","language":"OCL","body":"expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))"}]}],"generalization":[{"$type":"Generalization","$id":"Duration-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"Duration-expr","$ns":"uml","name":"expr","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_expr_duration","ownedComment":[{"$type":"Comment","$id":"Duration-expr-_ownedComment.0","$ns":"uml","annotatedElement":"Duration-expr","body":"A ValueSpecification that evaluates to the value of the Duration."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Duration-expr-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Duration-observation","$ns":"uml","name":"observation","type":"Observation","association":"A_observation_duration","ownedComment":[{"$type":"Comment","$id":"Duration-observation-_ownedComment.0","$ns":"uml","annotatedElement":"Duration-observation","body":"Refers to the Observations that are involved in the computation of the Duration value"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Duration-observation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Duration-observation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"DurationConstraint","$ns":"uml","name":"DurationConstraint","ownedComment":[{"$type":"Comment","$id":"DurationConstraint-_ownedComment.0","$ns":"uml","annotatedElement":"DurationConstraint","body":"A DurationConstraint is a Constraint that refers to a DurationInterval."}],"ownedRule":[{"$type":"Constraint","$id":"DurationConstraint-first_event_multiplicity","$ns":"uml","name":"first_event_multiplicity","constrainedElement":"DurationConstraint","ownedComment":[{"$type":"Comment","$id":"DurationConstraint-first_event_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"DurationConstraint-first_event_multiplicity","body":"The multiplicity of firstEvent must be 2 if the multiplicity of constrainedElement is 2. Otherwise the multiplicity of firstEvent is 0."}],"specification":[{"$type":"OpaqueExpression","$id":"DurationConstraint-first_event_multiplicity-_specification","$ns":"uml","language":"OCL","body":"if (constrainedElement->size() = 2)\r\n  then (firstEvent->size() = 2) else (firstEvent->size() = 0) \r\nendif"}]},{"$type":"Constraint","$id":"DurationConstraint-has_one_or_two_constrainedElements","$ns":"uml","name":"has_one_or_two_constrainedElements","constrainedElement":"DurationConstraint","ownedComment":[{"$type":"Comment","$id":"DurationConstraint-has_one_or_two_constrainedElements-_ownedComment.0","$ns":"uml","annotatedElement":"DurationConstraint-has_one_or_two_constrainedElements","body":"A DurationConstraint has either one or two constrainedElements."}],"specification":[{"$type":"OpaqueExpression","$id":"DurationConstraint-has_one_or_two_constrainedElements-_specification","$ns":"uml","language":"OCL","body":"constrainedElement->size() = 1 or constrainedElement->size()=2"}]}],"generalization":[{"$type":"Generalization","$id":"DurationConstraint-_generalization.0","$ns":"uml","general":"IntervalConstraint"}],"ownedAttribute":[{"$type":"Property","$id":"DurationConstraint-firstEvent","$ns":"uml","name":"firstEvent","ownedComment":[{"$type":"Comment","$id":"DurationConstraint-firstEvent-_ownedComment.0","$ns":"uml","annotatedElement":"DurationConstraint-firstEvent","body":"The value of firstEvent[i] is related to constrainedElement[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters constrainedElement[i]. If firstEvent[i] is false, then the corresponding observation event is the last time instant the execution is within constrainedElement[i]."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DurationConstraint-firstEvent-_upperValue","$ns":"uml","value":"2"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DurationConstraint-firstEvent-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DurationConstraint-specification","$ns":"uml","name":"specification","type":"DurationInterval","aggregation":"composite","redefinedProperty":"IntervalConstraint-specification","association":"A_specification_durationConstraint","ownedComment":[{"$type":"Comment","$id":"DurationConstraint-specification-_ownedComment.0","$ns":"uml","annotatedElement":"DurationConstraint-specification","body":"The DurationInterval constraining the duration."}]}]},{"$type":"Class","$id":"DurationInterval","$ns":"uml","name":"DurationInterval","ownedComment":[{"$type":"Comment","$id":"DurationInterval-_ownedComment.0","$ns":"uml","annotatedElement":"DurationInterval","body":"A DurationInterval defines the range between two Durations."}],"generalization":[{"$type":"Generalization","$id":"DurationInterval-_generalization.0","$ns":"uml","general":"Interval"}],"ownedAttribute":[{"$type":"Property","$id":"DurationInterval-max","$ns":"uml","name":"max","type":"Duration","redefinedProperty":"Interval-max","association":"A_max_durationInterval","ownedComment":[{"$type":"Comment","$id":"DurationInterval-max-_ownedComment.0","$ns":"uml","annotatedElement":"DurationInterval-max","body":"Refers to the Duration denoting the maximum value of the range."}]},{"$type":"Property","$id":"DurationInterval-min","$ns":"uml","name":"min","type":"Duration","redefinedProperty":"Interval-min","association":"A_min_durationInterval","ownedComment":[{"$type":"Comment","$id":"DurationInterval-min-_ownedComment.0","$ns":"uml","annotatedElement":"DurationInterval-min","body":"Refers to the Duration denoting the minimum value of the range."}]}]},{"$type":"Class","$id":"DurationObservation","$ns":"uml","name":"DurationObservation","ownedComment":[{"$type":"Comment","$id":"DurationObservation-_ownedComment.0","$ns":"uml","annotatedElement":"DurationObservation","body":"A DurationObservation is a reference to a duration during an execution. It points out the NamedElement(s) in the model to observe and whether the observations are when this NamedElement is entered or when it is exited."}],"ownedRule":[{"$type":"Constraint","$id":"DurationObservation-first_event_multiplicity","$ns":"uml","name":"first_event_multiplicity","constrainedElement":"DurationObservation","ownedComment":[{"$type":"Comment","$id":"DurationObservation-first_event_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"DurationObservation-first_event_multiplicity","body":"The multiplicity of firstEvent must be 2 if the multiplicity of event is 2. Otherwise the multiplicity of firstEvent is 0."}],"specification":[{"$type":"OpaqueExpression","$id":"DurationObservation-first_event_multiplicity-_specification","$ns":"uml","language":"OCL","body":"if (event->size() = 2)\r\n  then (firstEvent->size() = 2) else (firstEvent->size() = 0)\r\nendif"}]}],"generalization":[{"$type":"Generalization","$id":"DurationObservation-_generalization.0","$ns":"uml","general":"Observation"}],"ownedAttribute":[{"$type":"Property","$id":"DurationObservation-event","$ns":"uml","name":"event","type":"NamedElement","isOrdered":"true","association":"A_event_durationObservation","ownedComment":[{"$type":"Comment","$id":"DurationObservation-event-_ownedComment.0","$ns":"uml","annotatedElement":"DurationObservation-event","body":"The DurationObservation is determined as the duration between the entering or exiting of a single event Element during execution, or the entering/exiting of one event Element and the entering/exiting of a second."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DurationObservation-event-_upperValue","$ns":"uml","value":"2"}]},{"$type":"Property","$id":"DurationObservation-firstEvent","$ns":"uml","name":"firstEvent","ownedComment":[{"$type":"Comment","$id":"DurationObservation-firstEvent-_ownedComment.0","$ns":"uml","annotatedElement":"DurationObservation-firstEvent","body":"The value of firstEvent[i] is related to event[i] (where i is 1 or 2). If firstEvent[i] is true, then the corresponding observation event is the first time instant the execution enters event[i]. If firstEvent[i] is false, then the corresponding observation event is the time instant the execution exits event[i]."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DurationObservation-firstEvent-_upperValue","$ns":"uml","value":"2"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DurationObservation-firstEvent-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Expression","$ns":"uml","name":"Expression","ownedComment":[{"$type":"Comment","$id":"Expression-_ownedComment.0","$ns":"uml","annotatedElement":"Expression","body":"An Expression represents a node in an expression tree, which may be non-terminal or terminal. It defines a symbol, and has a possibly empty sequence of operands that are ValueSpecifications. It denotes a (possibly empty) set of values when evaluated in a context."}],"generalization":[{"$type":"Generalization","$id":"Expression-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"Expression-operand","$ns":"uml","name":"operand","type":"ValueSpecification","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_operand_expression","ownedComment":[{"$type":"Comment","$id":"Expression-operand-_ownedComment.0","$ns":"uml","annotatedElement":"Expression-operand","body":"Specifies a sequence of operand ValueSpecifications."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Expression-operand-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Expression-operand-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Expression-symbol","$ns":"uml","name":"symbol","ownedComment":[{"$type":"Comment","$id":"Expression-symbol-_ownedComment.0","$ns":"uml","annotatedElement":"Expression-symbol","body":"The symbol associated with this node in the expression tree."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Expression-symbol-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Interval","$ns":"uml","name":"Interval","ownedComment":[{"$type":"Comment","$id":"Interval-_ownedComment.0","$ns":"uml","annotatedElement":"Interval","body":"An Interval defines the range between two ValueSpecifications."}],"generalization":[{"$type":"Generalization","$id":"Interval-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"Interval-max","$ns":"uml","name":"max","type":"ValueSpecification","association":"A_max_interval","ownedComment":[{"$type":"Comment","$id":"Interval-max-_ownedComment.0","$ns":"uml","annotatedElement":"Interval-max","body":"Refers to the ValueSpecification denoting the maximum value of the range."}]},{"$type":"Property","$id":"Interval-min","$ns":"uml","name":"min","type":"ValueSpecification","association":"A_min_interval","ownedComment":[{"$type":"Comment","$id":"Interval-min-_ownedComment.0","$ns":"uml","annotatedElement":"Interval-min","body":"Refers to the ValueSpecification denoting the minimum value of the range."}]}]},{"$type":"Class","$id":"IntervalConstraint","$ns":"uml","name":"IntervalConstraint","ownedComment":[{"$type":"Comment","$id":"IntervalConstraint-_ownedComment.0","$ns":"uml","annotatedElement":"IntervalConstraint","body":"An IntervalConstraint is a Constraint that is specified by an Interval."}],"generalization":[{"$type":"Generalization","$id":"IntervalConstraint-_generalization.0","$ns":"uml","general":"Constraint"}],"ownedAttribute":[{"$type":"Property","$id":"IntervalConstraint-specification","$ns":"uml","name":"specification","type":"Interval","aggregation":"composite","redefinedProperty":"Constraint-specification","association":"A_specification_intervalConstraint","ownedComment":[{"$type":"Comment","$id":"IntervalConstraint-specification-_ownedComment.0","$ns":"uml","annotatedElement":"IntervalConstraint-specification","body":"The Interval that specifies the condition of the IntervalConstraint."}]}]},{"$type":"Class","$id":"LiteralBoolean","$ns":"uml","name":"LiteralBoolean","ownedComment":[{"$type":"Comment","$id":"LiteralBoolean-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralBoolean","body":"A LiteralBoolean is a specification of a Boolean value."}],"generalization":[{"$type":"Generalization","$id":"LiteralBoolean-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"LiteralBoolean-value","$ns":"uml","name":"value","ownedComment":[{"$type":"Comment","$id":"LiteralBoolean-value-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralBoolean-value","body":"The specified Boolean value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"LiteralBoolean-value-_defaultValue","$ns":"uml","value":"false"}]}],"ownedOperation":[{"$type":"Operation","$id":"LiteralBoolean-booleanValue","$ns":"uml","name":"booleanValue","isQuery":"true","redefinedOperation":"ValueSpecification-booleanValue","bodyCondition":"LiteralBoolean-booleanValue-spec","ownedComment":[{"$type":"Comment","$id":"LiteralBoolean-booleanValue-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralBoolean-booleanValue","body":"The query booleanValue() gives the value."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralBoolean-booleanValue-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralBoolean-booleanValue","specification":[{"$type":"OpaqueExpression","$id":"LiteralBoolean-booleanValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralBoolean-booleanValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"LiteralBoolean-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralBoolean-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralBoolean-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralBoolean-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralBoolean-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralBoolean-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralBoolean-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralBoolean-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"LiteralInteger","$ns":"uml","name":"LiteralInteger","ownedComment":[{"$type":"Comment","$id":"LiteralInteger-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralInteger","body":"A LiteralInteger is a specification of an Integer value."}],"generalization":[{"$type":"Generalization","$id":"LiteralInteger-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"LiteralInteger-value","$ns":"uml","name":"value","ownedComment":[{"$type":"Comment","$id":"LiteralInteger-value-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralInteger-value","body":"The specified Integer value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"defaultValue":[{"$type":"LiteralInteger","$id":"LiteralInteger-value-_defaultValue","$ns":"uml","value":"0"}]}],"ownedOperation":[{"$type":"Operation","$id":"LiteralInteger-integerValue","$ns":"uml","name":"integerValue","isQuery":"true","redefinedOperation":"ValueSpecification-integerValue","bodyCondition":"LiteralInteger-integerValue-spec","ownedComment":[{"$type":"Comment","$id":"LiteralInteger-integerValue-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralInteger-integerValue","body":"The query integerValue() gives the value."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralInteger-integerValue-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralInteger-integerValue","specification":[{"$type":"OpaqueExpression","$id":"LiteralInteger-integerValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralInteger-integerValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]}]},{"$type":"Operation","$id":"LiteralInteger-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralInteger-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralInteger-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralInteger-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralInteger-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralInteger-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralInteger-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralInteger-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"LiteralNull","$ns":"uml","name":"LiteralNull","ownedComment":[{"$type":"Comment","$id":"LiteralNull-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralNull","body":"A LiteralNull specifies the lack of a value."}],"generalization":[{"$type":"Generalization","$id":"LiteralNull-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedOperation":[{"$type":"Operation","$id":"LiteralNull-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralNull-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralNull-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralNull-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralNull-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralNull-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralNull-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralNull-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"LiteralNull-isNull","$ns":"uml","name":"isNull","isQuery":"true","redefinedOperation":"ValueSpecification-isNull","bodyCondition":"LiteralNull-isNull-spec","ownedComment":[{"$type":"Comment","$id":"LiteralNull-isNull-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralNull-isNull","body":"The query isNull() returns true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralNull-isNull-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralNull-isNull","specification":[{"$type":"OpaqueExpression","$id":"LiteralNull-isNull-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralNull-isNull-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"LiteralReal","$ns":"uml","name":"LiteralReal","ownedComment":[{"$type":"Comment","$id":"LiteralReal-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralReal","body":"A LiteralReal is a specification of a Real value."}],"generalization":[{"$type":"Generalization","$id":"LiteralReal-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"LiteralReal-value","$ns":"uml","name":"value","ownedComment":[{"$type":"Comment","$id":"LiteralReal-value-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralReal-value","body":"The specified Real value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Real"}]}],"ownedOperation":[{"$type":"Operation","$id":"LiteralReal-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralReal-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralReal-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralReal-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralReal-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralReal-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralReal-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralReal-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"LiteralReal-realValue","$ns":"uml","name":"realValue","isQuery":"true","redefinedOperation":"ValueSpecification-realValue","bodyCondition":"LiteralReal-realValue-spec","ownedComment":[{"$type":"Comment","$id":"LiteralReal-realValue-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralReal-realValue","body":"The query realValue() gives the value."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralReal-realValue-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralReal-realValue","specification":[{"$type":"OpaqueExpression","$id":"LiteralReal-realValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralReal-realValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Real"}]}]}]},{"$type":"Class","$id":"LiteralSpecification","$ns":"uml","name":"LiteralSpecification","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"LiteralSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralSpecification","body":"A LiteralSpecification identifies a literal constant being modeled."}],"generalization":[{"$type":"Generalization","$id":"LiteralSpecification-_generalization.0","$ns":"uml","general":"ValueSpecification"}]},{"$type":"Class","$id":"LiteralString","$ns":"uml","name":"LiteralString","ownedComment":[{"$type":"Comment","$id":"LiteralString-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralString","body":"A LiteralString is a specification of a String value."}],"generalization":[{"$type":"Generalization","$id":"LiteralString-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"LiteralString-value","$ns":"uml","name":"value","ownedComment":[{"$type":"Comment","$id":"LiteralString-value-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralString-value","body":"The specified String value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LiteralString-value-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"LiteralString-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralString-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralString-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralString-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralString-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralString-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralString-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralString-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"LiteralString-stringValue","$ns":"uml","name":"stringValue","isQuery":"true","redefinedOperation":"ValueSpecification-stringValue","bodyCondition":"LiteralString-stringValue-spec","ownedComment":[{"$type":"Comment","$id":"LiteralString-stringValue-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralString-stringValue","body":"The query stringValue() gives the value."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralString-stringValue-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralString-stringValue","specification":[{"$type":"OpaqueExpression","$id":"LiteralString-stringValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralString-stringValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]}]},{"$type":"Class","$id":"LiteralUnlimitedNatural","$ns":"uml","name":"LiteralUnlimitedNatural","ownedComment":[{"$type":"Comment","$id":"LiteralUnlimitedNatural-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralUnlimitedNatural","body":"A LiteralUnlimitedNatural is a specification of an UnlimitedNatural number."}],"generalization":[{"$type":"Generalization","$id":"LiteralUnlimitedNatural-_generalization.0","$ns":"uml","general":"LiteralSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"LiteralUnlimitedNatural-value","$ns":"uml","name":"value","ownedComment":[{"$type":"Comment","$id":"LiteralUnlimitedNatural-value-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralUnlimitedNatural-value","body":"The specified UnlimitedNatural value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}],"defaultValue":[{"$type":"LiteralUnlimitedNatural","$id":"LiteralUnlimitedNatural-value-_defaultValue","$ns":"uml","value":"0"}]}],"ownedOperation":[{"$type":"Operation","$id":"LiteralUnlimitedNatural-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","redefinedOperation":"ValueSpecification-isComputable","bodyCondition":"LiteralUnlimitedNatural-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"LiteralUnlimitedNatural-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralUnlimitedNatural-isComputable","body":"The query isComputable() is redefined to be true."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralUnlimitedNatural-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralUnlimitedNatural-isComputable","specification":[{"$type":"OpaqueExpression","$id":"LiteralUnlimitedNatural-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralUnlimitedNatural-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"LiteralUnlimitedNatural-unlimitedValue","$ns":"uml","name":"unlimitedValue","isQuery":"true","redefinedOperation":"ValueSpecification-unlimitedValue","bodyCondition":"LiteralUnlimitedNatural-unlimitedValue-spec","ownedComment":[{"$type":"Comment","$id":"LiteralUnlimitedNatural-unlimitedValue-_ownedComment.0","$ns":"uml","annotatedElement":"LiteralUnlimitedNatural-unlimitedValue","body":"The query unlimitedValue() gives the value."}],"ownedRule":[{"$type":"Constraint","$id":"LiteralUnlimitedNatural-unlimitedValue-spec","$ns":"uml","name":"spec","constrainedElement":"LiteralUnlimitedNatural-unlimitedValue","specification":[{"$type":"OpaqueExpression","$id":"LiteralUnlimitedNatural-unlimitedValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LiteralUnlimitedNatural-unlimitedValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}]}]}]},{"$type":"Class","$id":"Observation","$ns":"uml","name":"Observation","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Observation-_ownedComment.0","$ns":"uml","annotatedElement":"Observation","body":"Observation specifies a value determined by observing an event or events that occur relative to other model Elements."}],"generalization":[{"$type":"Generalization","$id":"Observation-_generalization.0","$ns":"uml","general":"PackageableElement"}]},{"$type":"Class","$id":"OpaqueExpression","$ns":"uml","name":"OpaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression","body":"An OpaqueExpression is a ValueSpecification that specifies the computation of a collection of values either in terms of a UML Behavior or based on a textual statement in a language other than UML"}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-language_body_size","$ns":"uml","name":"language_body_size","constrainedElement":"OpaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-language_body_size-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-language_body_size","body":"If the language attribute is not empty, then the size of the body and language arrays must be the same."}],"specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-language_body_size-_specification","$ns":"uml","language":"OCL","body":"language->notEmpty() implies (_'body'->size() = language->size())"}]},{"$type":"Constraint","$id":"OpaqueExpression-one_return_result_parameter","$ns":"uml","name":"one_return_result_parameter","constrainedElement":"OpaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-one_return_result_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-one_return_result_parameter","body":"The behavior must have exactly one return result parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-one_return_result_parameter-_specification","$ns":"uml","language":"OCL","body":"behavior <> null implies\r\n   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1"}]},{"$type":"Constraint","$id":"OpaqueExpression-only_return_result_parameters","$ns":"uml","name":"only_return_result_parameters","constrainedElement":"OpaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-only_return_result_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-only_return_result_parameters","body":"The behavior may only have return result parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-only_return_result_parameters-_specification","$ns":"uml","language":"OCL","body":"behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"OpaqueExpression-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"OpaqueExpression-behavior","$ns":"uml","name":"behavior","type":"Behavior","association":"A_behavior_opaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-behavior-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-behavior","body":"Specifies the behavior of the OpaqueExpression as a UML Behavior."}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueExpression-behavior-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueExpression-body","$ns":"uml","name":"body","isOrdered":"true","isUnique":"false","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-body-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-body","body":"A textual definition of the behavior of the OpaqueExpression, possibly in multiple languages."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueExpression-body-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueExpression-body-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueExpression-language","$ns":"uml","name":"language","isOrdered":"true","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-language-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-language","body":"Specifies the languages used to express the textual bodies of the OpaqueExpression.  Languages are matched to body Strings by order. The interpretation of the body depends on the languages. If the languages are unspecified, they may be implicit from the expression body or the context."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueExpression-language-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueExpression-language-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueExpression-result","$ns":"uml","name":"result","type":"Parameter","isReadOnly":"true","isDerived":"true","association":"A_result_opaqueExpression","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-result-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-result","body":"If an OpaqueExpression is specified using a UML Behavior, then this refers to the single required return Parameter of that Behavior. When the Behavior completes execution, the values on this Parameter give the result of evaluating the OpaqueExpression."}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueExpression-result-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"OpaqueExpression-isIntegral","$ns":"uml","name":"isIntegral","isQuery":"true","bodyCondition":"OpaqueExpression-isIntegral-spec","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-isIntegral-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-isIntegral","body":"The query isIntegral() tells whether an expression is intended to produce an Integer."}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-isIntegral-spec","$ns":"uml","name":"spec","constrainedElement":"OpaqueExpression-isIntegral","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-isIntegral-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"OpaqueExpression-isIntegral-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"OpaqueExpression-isNonNegative","$ns":"uml","name":"isNonNegative","isQuery":"true","precondition":"OpaqueExpression-isNonNegative-pre","bodyCondition":"OpaqueExpression-isNonNegative-spec","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-isNonNegative-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-isNonNegative","body":"The query isNonNegative() tells whether an integer expression has a non-negative value."}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-isNonNegative-pre","$ns":"uml","name":"pre","constrainedElement":"OpaqueExpression-isNonNegative","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-isNonNegative-pre-_specification","$ns":"uml","language":"OCL","body":"self.isIntegral()"}]},{"$type":"Constraint","$id":"OpaqueExpression-isNonNegative-spec","$ns":"uml","name":"spec","constrainedElement":"OpaqueExpression-isNonNegative","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-isNonNegative-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"OpaqueExpression-isNonNegative-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"OpaqueExpression-isPositive","$ns":"uml","name":"isPositive","isQuery":"true","precondition":"OpaqueExpression-isPositive-pre","bodyCondition":"OpaqueExpression-isPositive-spec","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-isPositive-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-isPositive","body":"The query isPositive() tells whether an integer expression has a positive value."}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-isPositive-spec","$ns":"uml","name":"spec","constrainedElement":"OpaqueExpression-isPositive","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-isPositive-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]},{"$type":"Constraint","$id":"OpaqueExpression-isPositive-pre","$ns":"uml","name":"pre","constrainedElement":"OpaqueExpression-isPositive","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-isPositive-pre-_specification","$ns":"uml","language":"OCL","body":"self.isIntegral()"}]}],"ownedParameter":[{"$type":"Parameter","$id":"OpaqueExpression-isPositive-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"OpaqueExpression-result.1","$ns":"uml","name":"result","isQuery":"true","bodyCondition":"OpaqueExpression-result.1-spec","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-result.1-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-result.1","body":"Derivation for OpaqueExpression::/result "}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-result.1-spec","$ns":"uml","name":"spec","constrainedElement":"OpaqueExpression-result.1 OpaqueExpression-result","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-result.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if behavior = null then\r\n\tnull\r\nelse\r\n\tbehavior.ownedParameter->first()\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"OpaqueExpression-result.1-result","$ns":"uml","name":"result","type":"Parameter","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueExpression-result.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"OpaqueExpression-value","$ns":"uml","name":"value","isQuery":"true","precondition":"OpaqueExpression-value-pre","bodyCondition":"OpaqueExpression-value-spec","ownedComment":[{"$type":"Comment","$id":"OpaqueExpression-value-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueExpression-value","body":"The query value() gives an integer value for an expression intended to produce one."}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueExpression-value-pre","$ns":"uml","name":"pre","constrainedElement":"OpaqueExpression-value","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-value-pre-_specification","$ns":"uml","language":"OCL","body":"self.isIntegral()"}]},{"$type":"Constraint","$id":"OpaqueExpression-value-spec","$ns":"uml","name":"spec","constrainedElement":"OpaqueExpression-value","specification":[{"$type":"OpaqueExpression","$id":"OpaqueExpression-value-spec-_specification","$ns":"uml","language":"OCL","body":"result = (0)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"OpaqueExpression-value-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]}]}]},{"$type":"Class","$id":"StringExpression","$ns":"uml","name":"StringExpression","ownedComment":[{"$type":"Comment","$id":"StringExpression-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression","body":"A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters."}],"ownedRule":[{"$type":"Constraint","$id":"StringExpression-operands","$ns":"uml","name":"operands","constrainedElement":"StringExpression","ownedComment":[{"$type":"Comment","$id":"StringExpression-operands-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression-operands","body":"All the operands of a StringExpression must be LiteralStrings"}],"specification":[{"$type":"OpaqueExpression","$id":"StringExpression-operands-_specification","$ns":"uml","language":"OCL","body":"operand->forAll (oclIsKindOf (LiteralString))"}]},{"$type":"Constraint","$id":"StringExpression-subexpressions","$ns":"uml","name":"subexpressions","constrainedElement":"StringExpression","ownedComment":[{"$type":"Comment","$id":"StringExpression-subexpressions-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression-subexpressions","body":"If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions)."}],"specification":[{"$type":"OpaqueExpression","$id":"StringExpression-subexpressions-_specification","$ns":"uml","language":"OCL","body":"if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif"}]}],"generalization":[{"$type":"Generalization","$id":"StringExpression-_generalization.1","$ns":"uml","general":"TemplateableElement"},{"$type":"Generalization","$id":"StringExpression-_generalization.0","$ns":"uml","general":"Expression"}],"ownedAttribute":[{"$type":"Property","$id":"StringExpression-owningExpression","$ns":"uml","name":"owningExpression","type":"StringExpression","subsettedProperty":"Element-owner","association":"A_subExpression_owningExpression","ownedComment":[{"$type":"Comment","$id":"StringExpression-owningExpression-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression-owningExpression","body":"The StringExpression of which this StringExpression is a subExpression."}],"lowerValue":[{"$type":"LiteralInteger","$id":"StringExpression-owningExpression-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StringExpression-subExpression","$ns":"uml","name":"subExpression","type":"StringExpression","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_subExpression_owningExpression","ownedComment":[{"$type":"Comment","$id":"StringExpression-subExpression-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression-subExpression","body":"The StringExpressions that constitute this StringExpression."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StringExpression-subExpression-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StringExpression-subExpression-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"StringExpression-stringValue","$ns":"uml","name":"stringValue","isQuery":"true","redefinedOperation":"ValueSpecification-stringValue","bodyCondition":"StringExpression-stringValue-spec","ownedComment":[{"$type":"Comment","$id":"StringExpression-stringValue-_ownedComment.0","$ns":"uml","annotatedElement":"StringExpression-stringValue","body":"The query stringValue() returns the String resulting from concatenating, in order, all the component String values of all the operands or subExpressions that are part of the StringExpression."}],"ownedRule":[{"$type":"Constraint","$id":"StringExpression-stringValue-spec","$ns":"uml","name":"spec","constrainedElement":"StringExpression-stringValue","specification":[{"$type":"OpaqueExpression","$id":"StringExpression-stringValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if subExpression->notEmpty()\nthen subExpression->iterate(se; stringValue: String = '' | stringValue.concat(se.stringValue()))\nelse operand->iterate(op; stringValue: String = '' | stringValue.concat(op.stringValue()))\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StringExpression-stringValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]}]},{"$type":"Class","$id":"TimeConstraint","$ns":"uml","name":"TimeConstraint","ownedComment":[{"$type":"Comment","$id":"TimeConstraint-_ownedComment.0","$ns":"uml","annotatedElement":"TimeConstraint","body":"A TimeConstraint is a Constraint that refers to a TimeInterval."}],"ownedRule":[{"$type":"Constraint","$id":"TimeConstraint-has_one_constrainedElement","$ns":"uml","name":"has_one_constrainedElement","constrainedElement":"TimeConstraint","ownedComment":[{"$type":"Comment","$id":"TimeConstraint-has_one_constrainedElement-_ownedComment.0","$ns":"uml","annotatedElement":"TimeConstraint-has_one_constrainedElement","body":"A TimeConstraint has one constrainedElement."}],"specification":[{"$type":"OpaqueExpression","$id":"TimeConstraint-has_one_constrainedElement-_specification","$ns":"uml","language":"OCL","body":"constrainedElement->size() = 1"}]}],"generalization":[{"$type":"Generalization","$id":"TimeConstraint-_generalization.0","$ns":"uml","general":"IntervalConstraint"}],"ownedAttribute":[{"$type":"Property","$id":"TimeConstraint-firstEvent","$ns":"uml","name":"firstEvent","ownedComment":[{"$type":"Comment","$id":"TimeConstraint-firstEvent-_ownedComment.0","$ns":"uml","annotatedElement":"TimeConstraint-firstEvent","body":"The value of firstEvent is related to the constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within the constrainedElement."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TimeConstraint-firstEvent-_lowerValue","$ns":"uml"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"TimeConstraint-firstEvent-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"TimeConstraint-specification","$ns":"uml","name":"specification","type":"TimeInterval","aggregation":"composite","redefinedProperty":"IntervalConstraint-specification","association":"A_specification_timeConstraint","ownedComment":[{"$type":"Comment","$id":"TimeConstraint-specification-_ownedComment.0","$ns":"uml","annotatedElement":"TimeConstraint-specification","body":"TheTimeInterval constraining the duration."}]}]},{"$type":"Class","$id":"TimeExpression","$ns":"uml","name":"TimeExpression","ownedComment":[{"$type":"Comment","$id":"TimeExpression-_ownedComment.0","$ns":"uml","annotatedElement":"TimeExpression","body":"A TimeExpression is a ValueSpecification that represents a time value."}],"ownedRule":[{"$type":"Constraint","$id":"TimeExpression-no_expr_requires_observation","$ns":"uml","name":"no_expr_requires_observation","constrainedElement":"TimeExpression","ownedComment":[{"$type":"Comment","$id":"TimeExpression-no_expr_requires_observation-_ownedComment.0","$ns":"uml","annotatedElement":"TimeExpression-no_expr_requires_observation","body":"If a TimeExpression has no expr, then it must have a single observation that is a TimeObservation."}],"specification":[{"$type":"OpaqueExpression","$id":"TimeExpression-no_expr_requires_observation-_specification","$ns":"uml","language":"OCL","body":"expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))"}]}],"generalization":[{"$type":"Generalization","$id":"TimeExpression-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"TimeExpression-expr","$ns":"uml","name":"expr","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_expr_timeExpression","ownedComment":[{"$type":"Comment","$id":"TimeExpression-expr-_ownedComment.0","$ns":"uml","annotatedElement":"TimeExpression-expr","body":"A ValueSpecification that evaluates to the value of the TimeExpression."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TimeExpression-expr-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TimeExpression-observation","$ns":"uml","name":"observation","type":"Observation","association":"A_observation_timeExpression","ownedComment":[{"$type":"Comment","$id":"TimeExpression-observation-_ownedComment.0","$ns":"uml","annotatedElement":"TimeExpression-observation","body":"Refers to the Observations that are involved in the computation of the TimeExpression value."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TimeExpression-observation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TimeExpression-observation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"TimeInterval","$ns":"uml","name":"TimeInterval","ownedComment":[{"$type":"Comment","$id":"TimeInterval-_ownedComment.0","$ns":"uml","annotatedElement":"TimeInterval","body":"A TimeInterval defines the range between two TimeExpressions."}],"generalization":[{"$type":"Generalization","$id":"TimeInterval-_generalization.0","$ns":"uml","general":"Interval"}],"ownedAttribute":[{"$type":"Property","$id":"TimeInterval-max","$ns":"uml","name":"max","type":"TimeExpression","redefinedProperty":"Interval-max","association":"A_max_timeInterval","ownedComment":[{"$type":"Comment","$id":"TimeInterval-max-_ownedComment.0","$ns":"uml","annotatedElement":"TimeInterval-max","body":"Refers to the TimeExpression denoting the maximum value of the range."}]},{"$type":"Property","$id":"TimeInterval-min","$ns":"uml","name":"min","type":"TimeExpression","redefinedProperty":"Interval-min","association":"A_min_timeInterval","ownedComment":[{"$type":"Comment","$id":"TimeInterval-min-_ownedComment.0","$ns":"uml","annotatedElement":"TimeInterval-min","body":"Refers to the TimeExpression denoting the minimum value of the range."}]}]},{"$type":"Class","$id":"TimeObservation","$ns":"uml","name":"TimeObservation","ownedComment":[{"$type":"Comment","$id":"TimeObservation-_ownedComment.0","$ns":"uml","annotatedElement":"TimeObservation","body":"A TimeObservation is a reference to a time instant during an execution. It points out the NamedElement in the model to observe and whether the observation is when this NamedElement is entered or when it is exited."}],"generalization":[{"$type":"Generalization","$id":"TimeObservation-_generalization.0","$ns":"uml","general":"Observation"}],"ownedAttribute":[{"$type":"Property","$id":"TimeObservation-event","$ns":"uml","name":"event","type":"NamedElement","association":"A_event_timeObservation","ownedComment":[{"$type":"Comment","$id":"TimeObservation-event-_ownedComment.0","$ns":"uml","annotatedElement":"TimeObservation-event","body":"The TimeObservation is determined by the entering or exiting of the event Element during execution."}]},{"$type":"Property","$id":"TimeObservation-firstEvent","$ns":"uml","name":"firstEvent","ownedComment":[{"$type":"Comment","$id":"TimeObservation-firstEvent-_ownedComment.0","$ns":"uml","annotatedElement":"TimeObservation-firstEvent","body":"The value of firstEvent is related to the event. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the event Element. If firstEvent is false, then the corresponding observation event is the time instant the execution exits the event Element."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"TimeObservation-firstEvent-_defaultValue","$ns":"uml","value":"true"}]}]},{"$type":"Class","$id":"ValueSpecification","$ns":"uml","name":"ValueSpecification","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification","body":"A ValueSpecification is the specification of a (possibly empty) set of values. A ValueSpecification is a ParameterableElement that may be exposed as a formal TemplateParameter and provided as the actual parameter in the binding of a template."}],"generalization":[{"$type":"Generalization","$id":"ValueSpecification-_generalization.0","$ns":"uml","general":"TypedElement"},{"$type":"Generalization","$id":"ValueSpecification-_generalization.1","$ns":"uml","general":"PackageableElement"}],"ownedOperation":[{"$type":"Operation","$id":"ValueSpecification-booleanValue","$ns":"uml","name":"booleanValue","isQuery":"true","bodyCondition":"ValueSpecification-booleanValue-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-booleanValue-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-booleanValue","body":"The query booleanValue() gives a single Boolean value when one can be computed."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-booleanValue-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-booleanValue","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-booleanValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-booleanValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ValueSpecification-booleanValue-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"ValueSpecification-integerValue","$ns":"uml","name":"integerValue","isQuery":"true","bodyCondition":"ValueSpecification-integerValue-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-integerValue-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-integerValue","body":"The query integerValue() gives a single Integer value when one can be computed."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-integerValue-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-integerValue","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-integerValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-integerValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ValueSpecification-integerValue-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"ValueSpecification-isCompatibleWith","$ns":"uml","name":"isCompatibleWith","isQuery":"true","redefinedOperation":"ParameterableElement-isCompatibleWith","bodyCondition":"ValueSpecification-isCompatibleWith-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-isCompatibleWith-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-isCompatibleWith","body":"The query isCompatibleWith() determines if this ValueSpecification is compatible with the specified ParameterableElement. This ValueSpecification is compatible with ParameterableElement p if the kind of this ValueSpecification is the same as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this ValueSpecification must be conformant with the type of p."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-isCompatibleWith-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-isCompatibleWith","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-isCompatibleWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypedElement) implies \r\nself.type.conformsTo(p.oclAsType(TypedElement).type)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-isCompatibleWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"ValueSpecification-isCompatibleWith-p","$ns":"uml","name":"p","type":"ParameterableElement"}]},{"$type":"Operation","$id":"ValueSpecification-isComputable","$ns":"uml","name":"isComputable","isQuery":"true","bodyCondition":"ValueSpecification-isComputable-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-isComputable-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-isComputable","body":"The query isComputable() determines whether a value specification can be computed in a model. This operation cannot be fully defined in OCL. A conforming implementation is expected to deliver true for this operation for all ValueSpecifications that it can compute, and to compute all of those for which the operation is true. A conforming implementation is expected to be able to compute at least the value of all LiteralSpecifications."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-isComputable-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-isComputable","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-isComputable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-isComputable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"ValueSpecification-isNull","$ns":"uml","name":"isNull","isQuery":"true","bodyCondition":"ValueSpecification-isNull-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-isNull-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-isNull","body":"The query isNull() returns true when it can be computed that the value is null."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-isNull-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-isNull","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-isNull-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-isNull-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"ValueSpecification-realValue","$ns":"uml","name":"realValue","isQuery":"true","bodyCondition":"ValueSpecification-realValue-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-realValue-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-realValue","body":"The query realValue() gives a single Real value when one can be computed."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-realValue-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-realValue","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-realValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-realValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Real"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ValueSpecification-realValue-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"ValueSpecification-stringValue","$ns":"uml","name":"stringValue","isQuery":"true","bodyCondition":"ValueSpecification-stringValue-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-stringValue-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-stringValue","body":"The query stringValue() gives a single String value when one can be computed."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-stringValue-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-stringValue","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-stringValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-stringValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ValueSpecification-stringValue-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"ValueSpecification-unlimitedValue","$ns":"uml","name":"unlimitedValue","isQuery":"true","bodyCondition":"ValueSpecification-unlimitedValue-spec","ownedComment":[{"$type":"Comment","$id":"ValueSpecification-unlimitedValue-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecification-unlimitedValue","body":"The query unlimitedValue() gives a single UnlimitedNatural value when one can be computed."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecification-unlimitedValue-spec","$ns":"uml","name":"spec","constrainedElement":"ValueSpecification-unlimitedValue","specification":[{"$type":"OpaqueExpression","$id":"ValueSpecification-unlimitedValue-spec-_specification","$ns":"uml","language":"OCL","body":"result = (null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ValueSpecification-unlimitedValue-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ValueSpecification-unlimitedValue-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Association","$id":"A_event_timeObservation","$ns":"uml","name":"A_event_timeObservation","memberEnd":"TimeObservation-event A_event_timeObservation-timeObservation","ownedEnd":[{"$type":"Property","$id":"A_event_timeObservation-timeObservation","$ns":"uml","name":"timeObservation","type":"TimeObservation","association":"A_event_timeObservation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_event_timeObservation-timeObservation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_event_timeObservation-timeObservation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_max_timeInterval","$ns":"uml","name":"A_max_timeInterval","memberEnd":"TimeInterval-max A_max_timeInterval-timeInterval","generalization":[{"$type":"Generalization","$id":"A_max_timeInterval-_generalization.0","$ns":"uml","general":"A_max_interval"}],"ownedEnd":[{"$type":"Property","$id":"A_max_timeInterval-timeInterval","$ns":"uml","name":"timeInterval","type":"TimeInterval","redefinedProperty":"A_max_interval-interval","association":"A_max_timeInterval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_max_timeInterval-timeInterval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_max_timeInterval-timeInterval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_min_timeInterval","$ns":"uml","name":"A_min_timeInterval","memberEnd":"TimeInterval-min A_min_timeInterval-timeInterval","generalization":[{"$type":"Generalization","$id":"A_min_timeInterval-_generalization.0","$ns":"uml","general":"A_min_interval"}],"ownedEnd":[{"$type":"Property","$id":"A_min_timeInterval-timeInterval","$ns":"uml","name":"timeInterval","type":"TimeInterval","redefinedProperty":"A_min_interval-interval","association":"A_min_timeInterval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_min_timeInterval-timeInterval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_min_timeInterval-timeInterval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_expr_timeExpression","$ns":"uml","name":"A_expr_timeExpression","memberEnd":"TimeExpression-expr A_expr_timeExpression-timeExpression","ownedEnd":[{"$type":"Property","$id":"A_expr_timeExpression-timeExpression","$ns":"uml","name":"timeExpression","type":"TimeExpression","subsettedProperty":"Element-owner","association":"A_expr_timeExpression","lowerValue":[{"$type":"LiteralInteger","$id":"A_expr_timeExpression-timeExpression-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_observation_timeExpression","$ns":"uml","name":"A_observation_timeExpression","memberEnd":"TimeExpression-observation A_observation_timeExpression-timeExpression","ownedEnd":[{"$type":"Property","$id":"A_observation_timeExpression-timeExpression","$ns":"uml","name":"timeExpression","type":"TimeExpression","association":"A_observation_timeExpression","lowerValue":[{"$type":"LiteralInteger","$id":"A_observation_timeExpression-timeExpression-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_specification_timeConstraint","$ns":"uml","name":"A_specification_timeConstraint","memberEnd":"TimeConstraint-specification A_specification_timeConstraint-timeConstraint","generalization":[{"$type":"Generalization","$id":"A_specification_timeConstraint-_generalization.0","$ns":"uml","general":"A_specification_intervalConstraint"}],"ownedEnd":[{"$type":"Property","$id":"A_specification_timeConstraint-timeConstraint","$ns":"uml","name":"timeConstraint","type":"TimeConstraint","redefinedProperty":"A_specification_intervalConstraint-intervalConstraint","association":"A_specification_timeConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_specification_timeConstraint-timeConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_subExpression_owningExpression","$ns":"uml","name":"A_subExpression_owningExpression","memberEnd":"StringExpression-subExpression StringExpression-owningExpression"},{"$type":"Association","$id":"A_result_opaqueExpression","$ns":"uml","name":"A_result_opaqueExpression","memberEnd":"OpaqueExpression-result A_result_opaqueExpression-opaqueExpression","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_result_opaqueExpression-opaqueExpression","$ns":"uml","name":"opaqueExpression","type":"OpaqueExpression","association":"A_result_opaqueExpression","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_result_opaqueExpression-opaqueExpression-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_result_opaqueExpression-opaqueExpression-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_behavior_opaqueExpression","$ns":"uml","name":"A_behavior_opaqueExpression","memberEnd":"OpaqueExpression-behavior A_behavior_opaqueExpression-opaqueExpression","ownedEnd":[{"$type":"Property","$id":"A_behavior_opaqueExpression-opaqueExpression","$ns":"uml","name":"opaqueExpression","type":"OpaqueExpression","association":"A_behavior_opaqueExpression","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_behavior_opaqueExpression-opaqueExpression-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_behavior_opaqueExpression-opaqueExpression-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_specification_intervalConstraint","$ns":"uml","name":"A_specification_intervalConstraint","memberEnd":"IntervalConstraint-specification A_specification_intervalConstraint-intervalConstraint","generalization":[{"$type":"Generalization","$id":"A_specification_intervalConstraint-_generalization.0","$ns":"uml","general":"A_specification_owningConstraint"}],"ownedEnd":[{"$type":"Property","$id":"A_specification_intervalConstraint-intervalConstraint","$ns":"uml","name":"intervalConstraint","type":"IntervalConstraint","redefinedProperty":"A_specification_owningConstraint-owningConstraint","association":"A_specification_intervalConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_specification_intervalConstraint-intervalConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_max_interval","$ns":"uml","name":"A_max_interval","memberEnd":"Interval-max A_max_interval-interval","ownedEnd":[{"$type":"Property","$id":"A_max_interval-interval","$ns":"uml","name":"interval","type":"Interval","association":"A_max_interval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_max_interval-interval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_max_interval-interval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_min_interval","$ns":"uml","name":"A_min_interval","memberEnd":"Interval-min A_min_interval-interval","ownedEnd":[{"$type":"Property","$id":"A_min_interval-interval","$ns":"uml","name":"interval","type":"Interval","association":"A_min_interval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_min_interval-interval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_min_interval-interval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_operand_expression","$ns":"uml","name":"A_operand_expression","memberEnd":"Expression-operand A_operand_expression-expression","ownedEnd":[{"$type":"Property","$id":"A_operand_expression-expression","$ns":"uml","name":"expression","type":"Expression","subsettedProperty":"Element-owner","association":"A_operand_expression","lowerValue":[{"$type":"LiteralInteger","$id":"A_operand_expression-expression-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_event_durationObservation","$ns":"uml","name":"A_event_durationObservation","memberEnd":"DurationObservation-event A_event_durationObservation-durationObservation","ownedEnd":[{"$type":"Property","$id":"A_event_durationObservation-durationObservation","$ns":"uml","name":"durationObservation","type":"DurationObservation","association":"A_event_durationObservation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_event_durationObservation-durationObservation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_event_durationObservation-durationObservation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_max_durationInterval","$ns":"uml","name":"A_max_durationInterval","memberEnd":"DurationInterval-max A_max_durationInterval-durationInterval","generalization":[{"$type":"Generalization","$id":"A_max_durationInterval-_generalization.0","$ns":"uml","general":"A_max_interval"}],"ownedEnd":[{"$type":"Property","$id":"A_max_durationInterval-durationInterval","$ns":"uml","name":"durationInterval","type":"DurationInterval","redefinedProperty":"A_max_interval-interval","association":"A_max_durationInterval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_max_durationInterval-durationInterval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_max_durationInterval-durationInterval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_min_durationInterval","$ns":"uml","name":"A_min_durationInterval","memberEnd":"DurationInterval-min A_min_durationInterval-durationInterval","generalization":[{"$type":"Generalization","$id":"A_min_durationInterval-_generalization.0","$ns":"uml","general":"A_min_interval"}],"ownedEnd":[{"$type":"Property","$id":"A_min_durationInterval-durationInterval","$ns":"uml","name":"durationInterval","type":"DurationInterval","redefinedProperty":"A_min_interval-interval","association":"A_min_durationInterval","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_min_durationInterval-durationInterval-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_min_durationInterval-durationInterval-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_specification_durationConstraint","$ns":"uml","name":"A_specification_durationConstraint","memberEnd":"DurationConstraint-specification A_specification_durationConstraint-durationConstraint","generalization":[{"$type":"Generalization","$id":"A_specification_durationConstraint-_generalization.0","$ns":"uml","general":"A_specification_intervalConstraint"}],"ownedEnd":[{"$type":"Property","$id":"A_specification_durationConstraint-durationConstraint","$ns":"uml","name":"durationConstraint","type":"DurationConstraint","redefinedProperty":"A_specification_intervalConstraint-intervalConstraint","association":"A_specification_durationConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_specification_durationConstraint-durationConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_expr_duration","$ns":"uml","name":"A_expr_duration","memberEnd":"Duration-expr A_expr_duration-duration","ownedEnd":[{"$type":"Property","$id":"A_expr_duration-duration","$ns":"uml","name":"duration","type":"Duration","subsettedProperty":"Element-owner","association":"A_expr_duration","lowerValue":[{"$type":"LiteralInteger","$id":"A_expr_duration-duration-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_observation_duration","$ns":"uml","name":"A_observation_duration","memberEnd":"Duration-observation A_observation_duration-duration","ownedEnd":[{"$type":"Property","$id":"A_observation_duration-duration","$ns":"uml","name":"duration","type":"Duration","association":"A_observation_duration","lowerValue":[{"$type":"LiteralInteger","$id":"A_observation_duration-duration-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"UseCases","$ns":"uml","name":"UseCases","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"CommonBehavior"}],"packagedElement":[{"$type":"Class","$id":"Actor","$ns":"uml","name":"Actor","ownedComment":[{"$type":"Comment","$id":"Actor-_ownedComment.0","$ns":"uml","annotatedElement":"Actor","body":"An Actor specifies a role played by a user or any other system that interacts with the subject."}],"ownedRule":[{"$type":"Constraint","$id":"Actor-associations","$ns":"uml","name":"associations","constrainedElement":"Actor","ownedComment":[{"$type":"Comment","$id":"Actor-associations-_ownedComment.0","$ns":"uml","annotatedElement":"Actor-associations","body":"An Actor can only have Associations to UseCases, Components, and Classes. Furthermore these Associations must be binary."}],"specification":[{"$type":"OpaqueExpression","$id":"Actor-associations-_specification","$ns":"uml","language":"OCL","body":"Association.allInstances()->forAll( a |\n  a.memberEnd->collect(type)->includes(self) implies\n  (\n    a.memberEnd->size() = 2 and\n    let actorEnd : Property = a.memberEnd->any(type = self) in\n      actorEnd.opposite.class.oclIsKindOf(UseCase) or\n      ( actorEnd.opposite.class.oclIsKindOf(Class) and not\n         actorEnd.opposite.class.oclIsKindOf(Behavior))\n      )\n  )"}]},{"$type":"Constraint","$id":"Actor-must_have_name","$ns":"uml","name":"must_have_name","constrainedElement":"Actor","ownedComment":[{"$type":"Comment","$id":"Actor-must_have_name-_ownedComment.0","$ns":"uml","annotatedElement":"Actor-must_have_name","body":"An Actor must have a name."}],"specification":[{"$type":"OpaqueExpression","$id":"Actor-must_have_name-_specification","$ns":"uml","language":"OCL","body":"name->notEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Actor-_generalization.0","$ns":"uml","general":"BehavioredClassifier"}]},{"$type":"Class","$id":"Extend","$ns":"uml","name":"Extend","ownedComment":[{"$type":"Comment","$id":"Extend-_ownedComment.0","$ns":"uml","annotatedElement":"Extend","body":"A relationship from an extending UseCase to an extended UseCase that specifies how and when the behavior defined in the extending UseCase can be inserted into the behavior defined in the extended UseCase."}],"ownedRule":[{"$type":"Constraint","$id":"Extend-extension_points","$ns":"uml","name":"extension_points","constrainedElement":"Extend","ownedComment":[{"$type":"Comment","$id":"Extend-extension_points-_ownedComment.0","$ns":"uml","annotatedElement":"Extend-extension_points","body":"The ExtensionPoints referenced by the Extend relationship must belong to the UseCase that is being extended."}],"specification":[{"$type":"OpaqueExpression","$id":"Extend-extension_points-_specification","$ns":"uml","language":"OCL","body":"extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))"}]}],"generalization":[{"$type":"Generalization","$id":"Extend-_generalization.0","$ns":"uml","general":"NamedElement"},{"$type":"Generalization","$id":"Extend-_generalization.1","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"Extend-condition","$ns":"uml","name":"condition","type":"Constraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_condition_extend","ownedComment":[{"$type":"Comment","$id":"Extend-condition-_ownedComment.0","$ns":"uml","annotatedElement":"Extend-condition","body":"References the condition that must hold when the first ExtensionPoint is reached for the extension to take place. If no constraint is associated with the Extend relationship, the extension is unconditional."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Extend-condition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Extend-extendedCase","$ns":"uml","name":"extendedCase","type":"UseCase","subsettedProperty":"DirectedRelationship-target","association":"A_extendedCase_extend","ownedComment":[{"$type":"Comment","$id":"Extend-extendedCase-_ownedComment.0","$ns":"uml","annotatedElement":"Extend-extendedCase","body":"The UseCase that is being extended."}]},{"$type":"Property","$id":"Extend-extension","$ns":"uml","name":"extension","type":"UseCase","subsettedProperty":"DirectedRelationship-source NamedElement-namespace","association":"A_extend_extension","ownedComment":[{"$type":"Comment","$id":"Extend-extension-_ownedComment.0","$ns":"uml","annotatedElement":"Extend-extension","body":"The UseCase that represents the extension and owns the Extend relationship."}]},{"$type":"Property","$id":"Extend-extensionLocation","$ns":"uml","name":"extensionLocation","type":"ExtensionPoint","isOrdered":"true","association":"A_extensionLocation_extension","ownedComment":[{"$type":"Comment","$id":"Extend-extensionLocation-_ownedComment.0","$ns":"uml","annotatedElement":"Extend-extensionLocation","body":"An ordered list of ExtensionPoints belonging to the extended UseCase, specifying where the respective behavioral fragments of the extending UseCase are to be inserted. The first fragment in the extending UseCase is associated with the first extension point in the list, the second fragment with the second point, and so on. Note that, in most practical cases, the extending UseCase has just a single behavior fragment, so that the list of ExtensionPoints is trivial."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Extend-extensionLocation-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"ExtensionPoint","$ns":"uml","name":"ExtensionPoint","ownedComment":[{"$type":"Comment","$id":"ExtensionPoint-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionPoint","body":"An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship."}],"ownedRule":[{"$type":"Constraint","$id":"ExtensionPoint-must_have_name","$ns":"uml","name":"must_have_name","constrainedElement":"ExtensionPoint","ownedComment":[{"$type":"Comment","$id":"ExtensionPoint-must_have_name-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionPoint-must_have_name","body":"An ExtensionPoint must have a name."}],"specification":[{"$type":"OpaqueExpression","$id":"ExtensionPoint-must_have_name-_specification","$ns":"uml","language":"OCL","body":"name->notEmpty ()"}]}],"generalization":[{"$type":"Generalization","$id":"ExtensionPoint-_generalization.0","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"ExtensionPoint-useCase","$ns":"uml","name":"useCase","type":"UseCase","subsettedProperty":"NamedElement-namespace","association":"A_extensionPoint_useCase","ownedComment":[{"$type":"Comment","$id":"ExtensionPoint-useCase-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionPoint-useCase","body":"The UseCase that owns this ExtensionPoint."}]}]},{"$type":"Class","$id":"Include","$ns":"uml","name":"Include","ownedComment":[{"$type":"Comment","$id":"Include-_ownedComment.0","$ns":"uml","annotatedElement":"Include","body":"An Include relationship specifies that a UseCase contains the behavior defined in another UseCase."}],"generalization":[{"$type":"Generalization","$id":"Include-_generalization.0","$ns":"uml","general":"DirectedRelationship"},{"$type":"Generalization","$id":"Include-_generalization.1","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Include-addition","$ns":"uml","name":"addition","type":"UseCase","subsettedProperty":"DirectedRelationship-target","association":"A_addition_include","ownedComment":[{"$type":"Comment","$id":"Include-addition-_ownedComment.0","$ns":"uml","annotatedElement":"Include-addition","body":"The UseCase that is to be included."}]},{"$type":"Property","$id":"Include-includingCase","$ns":"uml","name":"includingCase","type":"UseCase","subsettedProperty":"DirectedRelationship-source NamedElement-namespace","association":"A_include_includingCase","ownedComment":[{"$type":"Comment","$id":"Include-includingCase-_ownedComment.0","$ns":"uml","annotatedElement":"Include-includingCase","body":"The UseCase which includes the addition and owns the Include relationship."}]}]},{"$type":"Class","$id":"UseCase","$ns":"uml","name":"UseCase","ownedComment":[{"$type":"Comment","$id":"UseCase-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase","body":"A UseCase specifies a set of actions performed by its subjects, which yields an observable result that is of value for one or more Actors or other stakeholders of each subject."}],"ownedRule":[{"$type":"Constraint","$id":"UseCase-binary_associations","$ns":"uml","name":"binary_associations","constrainedElement":"UseCase","ownedComment":[{"$type":"Comment","$id":"UseCase-binary_associations-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-binary_associations","body":"UseCases can only be involved in binary Associations."}],"specification":[{"$type":"OpaqueExpression","$id":"UseCase-binary_associations-_specification","$ns":"uml","language":"OCL","body":"Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)"}]},{"$type":"Constraint","$id":"UseCase-no_association_to_use_case","$ns":"uml","name":"no_association_to_use_case","constrainedElement":"UseCase","ownedComment":[{"$type":"Comment","$id":"UseCase-no_association_to_use_case-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-no_association_to_use_case","body":"UseCases cannot have Associations to UseCases specifying the same subject."}],"specification":[{"$type":"OpaqueExpression","$id":"UseCase-no_association_to_use_case-_specification","$ns":"uml","language":"OCL","body":"Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies \r\n   (\r\n   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in\r\n   usecases->size() > 1 implies usecases->collect(subject)->size() > 1\r\n   )\r\n)"}]},{"$type":"Constraint","$id":"UseCase-cannot_include_self","$ns":"uml","name":"cannot_include_self","constrainedElement":"UseCase","ownedComment":[{"$type":"Comment","$id":"UseCase-cannot_include_self-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-cannot_include_self","body":"A UseCase cannot include UseCases that directly or indirectly include it."}],"specification":[{"$type":"OpaqueExpression","$id":"UseCase-cannot_include_self-_specification","$ns":"uml","language":"OCL","body":"not allIncludedUseCases()->includes(self)"}]},{"$type":"Constraint","$id":"UseCase-must_have_name","$ns":"uml","name":"must_have_name","constrainedElement":"UseCase","ownedComment":[{"$type":"Comment","$id":"UseCase-must_have_name-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-must_have_name","body":"A UseCase must have a name."}],"specification":[{"$type":"OpaqueExpression","$id":"UseCase-must_have_name-_specification","$ns":"uml","language":"OCL","body":"name -> notEmpty ()"}]}],"generalization":[{"$type":"Generalization","$id":"UseCase-_generalization.0","$ns":"uml","general":"BehavioredClassifier"}],"ownedAttribute":[{"$type":"Property","$id":"UseCase-extend","$ns":"uml","name":"extend","type":"Extend","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Namespace-ownedMember","association":"A_extend_extension","ownedComment":[{"$type":"Comment","$id":"UseCase-extend-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-extend","body":"The Extend relationships owned by this UseCase."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UseCase-extend-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"UseCase-extend-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"UseCase-extensionPoint","$ns":"uml","name":"extensionPoint","type":"ExtensionPoint","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_extensionPoint_useCase","ownedComment":[{"$type":"Comment","$id":"UseCase-extensionPoint-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-extensionPoint","body":"The ExtensionPoints owned by this UseCase."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UseCase-extensionPoint-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"UseCase-extensionPoint-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"UseCase-include","$ns":"uml","name":"include","type":"Include","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Namespace-ownedMember","association":"A_include_includingCase","ownedComment":[{"$type":"Comment","$id":"UseCase-include-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-include","body":"The Include relationships owned by this UseCase."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UseCase-include-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"UseCase-include-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"UseCase-subject","$ns":"uml","name":"subject","type":"Classifier","association":"A_subject_useCase","ownedComment":[{"$type":"Comment","$id":"UseCase-subject-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-subject","body":"The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UseCase-subject-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"UseCase-subject-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"UseCase-allIncludedUseCases","$ns":"uml","name":"allIncludedUseCases","isQuery":"true","bodyCondition":"UseCase-allIncludedUseCases-spec","ownedComment":[{"$type":"Comment","$id":"UseCase-allIncludedUseCases-_ownedComment.0","$ns":"uml","annotatedElement":"UseCase-allIncludedUseCases","body":"The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase."}],"ownedRule":[{"$type":"Constraint","$id":"UseCase-allIncludedUseCases-spec","$ns":"uml","name":"spec","constrainedElement":"UseCase-allIncludedUseCases","specification":[{"$type":"OpaqueExpression","$id":"UseCase-allIncludedUseCases-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"UseCase-allIncludedUseCases-result","$ns":"uml","name":"result","type":"UseCase","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UseCase-allIncludedUseCases-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"UseCase-allIncludedUseCases-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Association","$id":"A_extensionPoint_useCase","$ns":"uml","name":"A_extensionPoint_useCase","memberEnd":"UseCase-extensionPoint ExtensionPoint-useCase"},{"$type":"Association","$id":"A_include_includingCase","$ns":"uml","name":"A_include_includingCase","memberEnd":"UseCase-include Include-includingCase"},{"$type":"Association","$id":"A_subject_useCase","$ns":"uml","name":"A_subject_useCase","memberEnd":"UseCase-subject Classifier-useCase"},{"$type":"Association","$id":"A_extend_extension","$ns":"uml","name":"A_extend_extension","memberEnd":"UseCase-extend Extend-extension"},{"$type":"Association","$id":"A_addition_include","$ns":"uml","name":"A_addition_include","memberEnd":"Include-addition A_addition_include-include","ownedEnd":[{"$type":"Property","$id":"A_addition_include-include","$ns":"uml","name":"include","type":"Include","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_addition_include","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_addition_include-include-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_addition_include-include-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_extensionLocation_extension","$ns":"uml","name":"A_extensionLocation_extension","memberEnd":"Extend-extensionLocation A_extensionLocation_extension-extension","ownedEnd":[{"$type":"Property","$id":"A_extensionLocation_extension-extension","$ns":"uml","name":"extension","type":"Extend","association":"A_extensionLocation_extension","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_extensionLocation_extension-extension-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_extensionLocation_extension-extension-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_condition_extend","$ns":"uml","name":"A_condition_extend","memberEnd":"Extend-condition A_condition_extend-extend","ownedEnd":[{"$type":"Property","$id":"A_condition_extend-extend","$ns":"uml","name":"extend","type":"Extend","subsettedProperty":"Element-owner","association":"A_condition_extend","lowerValue":[{"$type":"LiteralInteger","$id":"A_condition_extend-extend-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_extendedCase_extend","$ns":"uml","name":"A_extendedCase_extend","memberEnd":"Extend-extendedCase A_extendedCase_extend-extend","ownedEnd":[{"$type":"Property","$id":"A_extendedCase_extend-extend","$ns":"uml","name":"extend","type":"Extend","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_extendedCase_extend","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_extendedCase_extend-extend-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_extendedCase_extend-extend-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"StructuredClassifiers","$ns":"uml","name":"StructuredClassifiers","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Packages"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"SimpleClassifiers"},{"$type":"PackageImport","$id":"_packageImport.3","$ns":"uml","importedPackage":"CommonStructure"}],"packagedElement":[{"$type":"Class","$id":"Association","$ns":"uml","name":"Association","ownedComment":[{"$type":"Comment","$id":"Association-_ownedComment.0","$ns":"uml","annotatedElement":"Association","body":"A link is a tuple of values that refer to typed objects.  An Association classifies a set of links, each of which is an instance of the Association.  Each value in the link refers to an instance of the type of the corresponding end of the Association.\r\n"}],"ownedRule":[{"$type":"Constraint","$id":"Association-specialized_end_number","$ns":"uml","name":"specialized_end_number","constrainedElement":"Association","ownedComment":[{"$type":"Comment","$id":"Association-specialized_end_number-_ownedComment.0","$ns":"uml","annotatedElement":"Association-specialized_end_number","body":"An Association specializing another Association has the same number of ends as the other Association."}],"specification":[{"$type":"OpaqueExpression","$id":"Association-specialized_end_number-_specification","$ns":"uml","language":"OCL","body":"parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())"}]},{"$type":"Constraint","$id":"Association-specialized_end_types","$ns":"uml","name":"specialized_end_types","constrainedElement":"Association","ownedComment":[{"$type":"Comment","$id":"Association-specialized_end_types-_ownedComment.0","$ns":"uml","annotatedElement":"Association-specialized_end_types","body":"When an Association specializes another Association, every end of the specific Association corresponds to an end of the general Association, and the specific end reaches the same type or a subtype of the corresponding general end."}],"specification":[{"$type":"OpaqueExpression","$id":"Association-specialized_end_types-_specification","$ns":"uml","language":"OCL","body":"Sequence{1..memberEnd->size()}->\r\n\tforAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->\r\n\t\tforAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))"}]},{"$type":"Constraint","$id":"Association-binary_associations","$ns":"uml","name":"binary_associations","constrainedElement":"Association","ownedComment":[{"$type":"Comment","$id":"Association-binary_associations-_ownedComment.0","$ns":"uml","annotatedElement":"Association-binary_associations","body":"Only binary Associations can be aggregations."}],"specification":[{"$type":"OpaqueExpression","$id":"Association-binary_associations-_specification","$ns":"uml","language":"OCL","body":"memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))"}]},{"$type":"Constraint","$id":"Association-association_ends","$ns":"uml","name":"association_ends","constrainedElement":"Association","ownedComment":[{"$type":"Comment","$id":"Association-association_ends-_ownedComment.0","$ns":"uml","annotatedElement":"Association-association_ends","body":"Ends of Associations with more than two ends must be owned by the Association itself."}],"specification":[{"$type":"OpaqueExpression","$id":"Association-association_ends-_specification","$ns":"uml","language":"OCL","body":"memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)"}]},{"$type":"Constraint","$id":"Association-ends_must_be_typed","$ns":"uml","name":"ends_must_be_typed","constrainedElement":"Association","specification":[{"$type":"OpaqueExpression","$id":"Association-ends_must_be_typed-_specification","$ns":"uml","language":"OCL","body":"memberEnd->forAll(type->notEmpty())"}]}],"generalization":[{"$type":"Generalization","$id":"Association-_generalization.0","$ns":"uml","general":"Relationship"},{"$type":"Generalization","$id":"Association-_generalization.1","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"Association-endType","$ns":"uml","name":"endType","type":"Type","isReadOnly":"true","isDerived":"true","subsettedProperty":"Relationship-relatedElement","association":"A_endType_association","ownedComment":[{"$type":"Comment","$id":"Association-endType-_ownedComment.0","$ns":"uml","annotatedElement":"Association-endType","body":"The Classifiers that are used as types of the ends of the Association."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Association-endType-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"Association-isDerived","$ns":"uml","name":"isDerived","ownedComment":[{"$type":"Comment","$id":"Association-isDerived-_ownedComment.0","$ns":"uml","annotatedElement":"Association-isDerived","body":"Specifies whether the Association is derived from other model elements such as other Associations."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Association-isDerived-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Association-memberEnd","$ns":"uml","name":"memberEnd","type":"Property","isOrdered":"true","subsettedProperty":"Namespace-member","association":"A_memberEnd_association","ownedComment":[{"$type":"Comment","$id":"Association-memberEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Association-memberEnd","body":"Each end represents participation of instances of the Classifier connected to the end in links of the Association."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Association-memberEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Association-memberEnd-_lowerValue","$ns":"uml","value":"2"}]},{"$type":"Property","$id":"Association-navigableOwnedEnd","$ns":"uml","name":"navigableOwnedEnd","type":"Property","subsettedProperty":"Association-ownedEnd","association":"A_navigableOwnedEnd_association","ownedComment":[{"$type":"Comment","$id":"Association-navigableOwnedEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Association-navigableOwnedEnd","body":"The navigable ends that are owned by the Association itself."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Association-navigableOwnedEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Association-navigableOwnedEnd-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Association-ownedEnd","$ns":"uml","name":"ownedEnd","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Association-memberEnd Classifier-feature Namespace-ownedMember","association":"A_ownedEnd_owningAssociation","ownedComment":[{"$type":"Comment","$id":"Association-ownedEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Association-ownedEnd","body":"The ends that are owned by the Association itself."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Association-ownedEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Association-ownedEnd-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Association-endType.1","$ns":"uml","name":"endType","isQuery":"true","bodyCondition":"Association-endType.1-spec","ownedComment":[{"$type":"Comment","$id":"Association-endType.1-_ownedComment.0","$ns":"uml","annotatedElement":"Association-endType.1","body":"endType is derived from the types of the member ends."}],"ownedRule":[{"$type":"Constraint","$id":"Association-endType.1-spec","$ns":"uml","name":"spec","constrainedElement":"Association-endType.1 Association-endType","specification":[{"$type":"OpaqueExpression","$id":"Association-endType.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (memberEnd->collect(type)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Association-endType.1-result","$ns":"uml","name":"result","type":"Type","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Association-endType.1-result-_upperValue","$ns":"uml","value":"*"}]}]}]},{"$type":"Class","$id":"AssociationClass","$ns":"uml","name":"AssociationClass","ownedComment":[{"$type":"Comment","$id":"AssociationClass-_ownedComment.0","$ns":"uml","annotatedElement":"AssociationClass","body":"A model element that has both Association and Class properties. An AssociationClass can be seen as an Association that also has Class properties, or as a Class that also has Association properties. It not only connects a set of Classifiers but also defines a set of Features that belong to the Association itself and not to any of the associated Classifiers."}],"ownedRule":[{"$type":"Constraint","$id":"AssociationClass-cannot_be_defined","$ns":"uml","name":"cannot_be_defined","constrainedElement":"AssociationClass","ownedComment":[{"$type":"Comment","$id":"AssociationClass-cannot_be_defined-_ownedComment.0","$ns":"uml","annotatedElement":"AssociationClass-cannot_be_defined","body":"An AssociationClass cannot be defined between itself and something else."}],"specification":[{"$type":"OpaqueExpression","$id":"AssociationClass-cannot_be_defined-_specification","$ns":"uml","language":"OCL","body":"self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)"}]},{"$type":"Constraint","$id":"AssociationClass-disjoint_attributes_ends","$ns":"uml","name":"disjoint_attributes_ends","constrainedElement":"AssociationClass","ownedComment":[{"$type":"Comment","$id":"AssociationClass-disjoint_attributes_ends-_ownedComment.0","$ns":"uml","annotatedElement":"AssociationClass-disjoint_attributes_ends","body":"The owned attributes and owned ends of an AssociationClass are disjoint."}],"specification":[{"$type":"OpaqueExpression","$id":"AssociationClass-disjoint_attributes_ends-_specification","$ns":"uml","language":"OCL","body":"ownedAttribute->intersection(ownedEnd)->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"AssociationClass-_generalization.0","$ns":"uml","general":"Class"},{"$type":"Generalization","$id":"AssociationClass-_generalization.1","$ns":"uml","general":"Association"}]},{"$type":"Class","$id":"Class","$ns":"uml","name":"Class","ownedComment":[{"$type":"Comment","$id":"Class-_ownedComment.0","$ns":"uml","annotatedElement":"Class","body":"A Class classifies a set of objects and specifies the features that characterize the structure and behavior of those objects.  A Class may have an internal structure and Ports.\r\n"}],"ownedRule":[{"$type":"Constraint","$id":"Class-passive_class","$ns":"uml","name":"passive_class","constrainedElement":"Class","ownedComment":[{"$type":"Comment","$id":"Class-passive_class-_ownedComment.0","$ns":"uml","annotatedElement":"Class-passive_class","body":"Only an active Class may own Receptions and have a classifierBehavior."}],"specification":[{"$type":"OpaqueExpression","$id":"Class-passive_class-_specification","$ns":"uml","language":"OCL","body":"not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)"}]}],"generalization":[{"$type":"Generalization","$id":"Class-_generalization.0","$ns":"uml","general":"BehavioredClassifier"},{"$type":"Generalization","$id":"Class-_generalization.1","$ns":"uml","general":"EncapsulatedClassifier"}],"ownedAttribute":[{"$type":"Property","$id":"Class-extension","$ns":"uml","name":"extension","type":"Extension","isReadOnly":"true","isDerived":"true","association":"A_extension_metaclass","ownedComment":[{"$type":"Comment","$id":"Class-extension-_ownedComment.0","$ns":"uml","annotatedElement":"Class-extension","body":"This property is used when the Class is acting as a metaclass. It references the Extensions that specify additional properties of the metaclass. The property is derived from the Extensions whose memberEnds are typed by the Class."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-extension-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-extension-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-isAbstract","$ns":"uml","name":"isAbstract","redefinedProperty":"Classifier-isAbstract","ownedComment":[{"$type":"Comment","$id":"Class-isAbstract-_ownedComment.0","$ns":"uml","annotatedElement":"Class-isAbstract","body":"If true, the Class does not provide a complete declaration and cannot be instantiated. An abstract Class is typically used as a target of Associations or Generalizations."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Class-isAbstract-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-isActive","$ns":"uml","name":"isActive","ownedComment":[{"$type":"Comment","$id":"Class-isActive-_ownedComment.0","$ns":"uml","annotatedElement":"Class-isActive","body":"Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Class-isActive-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-nestedClassifier","$ns":"uml","name":"nestedClassifier","type":"Classifier","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Namespace-ownedMember","association":"A_nestedClassifier_nestingClass","ownedComment":[{"$type":"Comment","$id":"Class-nestedClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Class-nestedClassifier","body":"The Classifiers owned by the Class that are not ownedBehaviors."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-nestedClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-nestedClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","redefinedProperty":"StructuredClassifier-ownedAttribute","subsettedProperty":"Classifier-attribute Namespace-ownedMember","association":"A_ownedAttribute_class","ownedComment":[{"$type":"Comment","$id":"Class-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"Class-ownedAttribute","body":"The attributes (i.e., the Properties) owned by the Class."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-ownedAttribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-ownedOperation","$ns":"uml","name":"ownedOperation","type":"Operation","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature Namespace-ownedMember","association":"A_ownedOperation_class","ownedComment":[{"$type":"Comment","$id":"Class-ownedOperation-_ownedComment.0","$ns":"uml","annotatedElement":"Class-ownedOperation","body":"The Operations owned by the Class."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-ownedOperation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-ownedOperation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-ownedReception","$ns":"uml","name":"ownedReception","type":"Reception","aggregation":"composite","subsettedProperty":"Classifier-feature Namespace-ownedMember","association":"A_ownedReception_class","ownedComment":[{"$type":"Comment","$id":"Class-ownedReception-_ownedComment.0","$ns":"uml","annotatedElement":"Class-ownedReception","body":"The Receptions owned by the Class."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-ownedReception-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-ownedReception-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Class-superClass","$ns":"uml","name":"superClass","type":"Class","isDerived":"true","redefinedProperty":"Classifier-general","association":"A_superClass_class","ownedComment":[{"$type":"Comment","$id":"Class-superClass-_ownedComment.0","$ns":"uml","annotatedElement":"Class-superClass","body":"The superclasses of a Class, derived from its Generalizations."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-superClass-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-superClass-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Class-extension.1","$ns":"uml","name":"extension","isQuery":"true","bodyCondition":"Class-extension.1-spec","ownedComment":[{"$type":"Comment","$id":"Class-extension.1-_ownedComment.0","$ns":"uml","annotatedElement":"Class-extension.1","body":"Derivation for Class::/extension : Extension"}],"ownedRule":[{"$type":"Constraint","$id":"Class-extension.1-spec","$ns":"uml","name":"spec","constrainedElement":"Class-extension.1 Class-extension","specification":[{"$type":"OpaqueExpression","$id":"Class-extension.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (Extension.allInstances()->select(ext | \r\n  let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in\r\n  endTypes->includes(self) or endTypes.allParents()->includes(self) ))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Class-extension.1-result","$ns":"uml","name":"result","type":"Extension","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-extension.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-extension.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Class-superClass.1","$ns":"uml","name":"superClass","isQuery":"true","bodyCondition":"Class-superClass.1-spec","ownedComment":[{"$type":"Comment","$id":"Class-superClass.1-_ownedComment.0","$ns":"uml","annotatedElement":"Class-superClass.1","body":"Derivation for Class::/superClass : Class"}],"ownedRule":[{"$type":"Constraint","$id":"Class-superClass.1-spec","$ns":"uml","name":"spec","constrainedElement":"Class-superClass.1 Class-superClass","specification":[{"$type":"OpaqueExpression","$id":"Class-superClass.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Class-superClass.1-result","$ns":"uml","name":"result","type":"Class","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Class-superClass.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Class-superClass.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Collaboration","$ns":"uml","name":"Collaboration","ownedComment":[{"$type":"Comment","$id":"Collaboration-_ownedComment.0","$ns":"uml","annotatedElement":"Collaboration","body":"A Collaboration describes a structure of collaborating elements (roles), each performing a specialized function, which collectively accomplish some desired functionality. "}],"generalization":[{"$type":"Generalization","$id":"Collaboration-_generalization.1","$ns":"uml","general":"StructuredClassifier"},{"$type":"Generalization","$id":"Collaboration-_generalization.0","$ns":"uml","general":"BehavioredClassifier"}],"ownedAttribute":[{"$type":"Property","$id":"Collaboration-collaborationRole","$ns":"uml","name":"collaborationRole","type":"ConnectableElement","subsettedProperty":"StructuredClassifier-role","association":"A_collaborationRole_collaboration","ownedComment":[{"$type":"Comment","$id":"Collaboration-collaborationRole-_ownedComment.0","$ns":"uml","annotatedElement":"Collaboration-collaborationRole","body":"Represents the participants in the Collaboration."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Collaboration-collaborationRole-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Collaboration-collaborationRole-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"CollaborationUse","$ns":"uml","name":"CollaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse","body":"A CollaborationUse is used to specify the application of a pattern specified by a Collaboration to a specific situation."}],"ownedRule":[{"$type":"Constraint","$id":"CollaborationUse-client_elements","$ns":"uml","name":"client_elements","constrainedElement":"CollaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-client_elements-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse-client_elements","body":"All the client elements of a roleBinding are in one Classifier and all supplier elements of a roleBinding are in one Collaboration."}],"specification":[{"$type":"OpaqueExpression","$id":"CollaborationUse-client_elements-_specification","$ns":"uml","language":"OCL","body":"roleBinding->collect(client)->forAll(ne1, ne2 |\r\n  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and\r\n    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in\r\n      ce1.structuredClassifier = ce2.structuredClassifier)\r\nand\r\n  roleBinding->collect(supplier)->forAll(ne1, ne2 |\r\n  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and\r\n    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in\r\n      ce1.collaboration = ce2.collaboration)"}]},{"$type":"Constraint","$id":"CollaborationUse-every_role","$ns":"uml","name":"every_role","constrainedElement":"CollaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-every_role-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse-every_role","body":"Every collaborationRole in the Collaboration is bound within the CollaborationUse."}],"specification":[{"$type":"OpaqueExpression","$id":"CollaborationUse-every_role-_specification","$ns":"uml","language":"OCL","body":"type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))"}]},{"$type":"Constraint","$id":"CollaborationUse-connectors","$ns":"uml","name":"connectors","constrainedElement":"CollaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-connectors-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse-connectors","body":"Connectors in a Collaboration typing a CollaborationUse must have corresponding Connectors between elements bound in the context Classifier, and these corresponding Connectors must have the same or more general type than the Collaboration Connectors."}],"specification":[{"$type":"OpaqueExpression","$id":"CollaborationUse-connectors-_specification","$ns":"uml","language":"OCL","body":"type.ownedConnector->forAll(connector |\r\n  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),\r\n        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),\r\n        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),\r\n        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in\r\n          contextClassifier.ownedConnector->exists( correspondingConnector | \r\n              correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )\r\n              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) )\r\n)"}]}],"generalization":[{"$type":"Generalization","$id":"CollaborationUse-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"CollaborationUse-roleBinding","$ns":"uml","name":"roleBinding","type":"Dependency","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_roleBinding_collaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-roleBinding-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse-roleBinding","body":"A mapping between features of the Collaboration and features of the owning Classifier. This mapping indicates which ConnectableElement of the Classifier plays which role(s) in the Collaboration. A ConnectableElement may be bound to multiple roles in the same CollaborationUse (that is, it may play multiple roles)."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CollaborationUse-roleBinding-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CollaborationUse-roleBinding-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"CollaborationUse-type","$ns":"uml","name":"type","type":"Collaboration","association":"A_type_collaborationUse","ownedComment":[{"$type":"Comment","$id":"CollaborationUse-type-_ownedComment.0","$ns":"uml","annotatedElement":"CollaborationUse-type","body":"The Collaboration which is used in this CollaborationUse. The Collaboration defines the cooperation between its roles which are mapped to ConnectableElements relating to the Classifier owning the CollaborationUse."}]}]},{"$type":"Class","$id":"Component","$ns":"uml","name":"Component","ownedComment":[{"$type":"Comment","$id":"Component-_ownedComment.0","$ns":"uml","annotatedElement":"Component","body":"A Component represents a modular part of a system that encapsulates its contents and whose manifestation is replaceable within its environment.  "}],"ownedRule":[{"$type":"Constraint","$id":"Component-no_nested_classifiers","$ns":"uml","name":"no_nested_classifiers","constrainedElement":"Component","ownedComment":[{"$type":"Comment","$id":"Component-no_nested_classifiers-_ownedComment.0","$ns":"uml","annotatedElement":"Component-no_nested_classifiers","body":"A Component cannot nest Classifiers."}],"specification":[{"$type":"OpaqueExpression","$id":"Component-no_nested_classifiers-_specification","$ns":"uml","language":"OCL","body":"nestedClassifier->isEmpty()"}]},{"$type":"Constraint","$id":"Component-no_packaged_elements","$ns":"uml","name":"no_packaged_elements","constrainedElement":"Component","ownedComment":[{"$type":"Comment","$id":"Component-no_packaged_elements-_ownedComment.0","$ns":"uml","annotatedElement":"Component-no_packaged_elements","body":"A Component nested in a Class cannot have any packaged elements."}],"specification":[{"$type":"OpaqueExpression","$id":"Component-no_packaged_elements-_specification","$ns":"uml","language":"OCL","body":"nestingClass <> null implies packagedElement->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Component-_generalization.0","$ns":"uml","general":"Class"}],"ownedAttribute":[{"$type":"Property","$id":"Component-isIndirectlyInstantiated","$ns":"uml","name":"isIndirectlyInstantiated","ownedComment":[{"$type":"Comment","$id":"Component-isIndirectlyInstantiated-_ownedComment.0","$ns":"uml","annotatedElement":"Component-isIndirectlyInstantiated","body":"If true, the Component is defined at design-time, but at run-time (or execution-time) an object specified by the Component does not exist, that is, the Component is instantiated indirectly, through the instantiation of its realizing Classifiers or parts."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Component-isIndirectlyInstantiated-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"Component-packagedElement","$ns":"uml","name":"packagedElement","type":"PackageableElement","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_packagedElement_component","ownedComment":[{"$type":"Comment","$id":"Component-packagedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Component-packagedElement","body":"The set of PackageableElements that a Component owns. In the namespace of a Component, all model elements that are involved in or related to its definition may be owned or imported explicitly. These may include e.g., Classes, Interfaces, Components, Packages, UseCases, Dependencies (e.g., mappings), and Artifacts."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-packagedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-packagedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Component-provided","$ns":"uml","name":"provided","type":"Interface","isReadOnly":"true","isDerived":"true","association":"A_provided_component","ownedComment":[{"$type":"Comment","$id":"Component-provided-_ownedComment.0","$ns":"uml","annotatedElement":"Component-provided","body":"The Interfaces that the Component exposes to its environment. These Interfaces may be Realized by the Component or any of its realizingClassifiers, or they may be the Interfaces that are provided by its public Ports."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-provided-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-provided-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Component-realization","$ns":"uml","name":"realization","type":"ComponentRealization","aggregation":"composite","subsettedProperty":"A_supplier_supplierDependency-supplierDependency Element-ownedElement","association":"A_realization_abstraction_component","ownedComment":[{"$type":"Comment","$id":"Component-realization-_ownedComment.0","$ns":"uml","annotatedElement":"Component-realization","body":"The set of Realizations owned by the Component. Realizations reference the Classifiers of which the Component is an abstraction; i.e., that realize its behavior."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-realization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-realization-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Component-required","$ns":"uml","name":"required","type":"Interface","isReadOnly":"true","isDerived":"true","association":"A_required_component","ownedComment":[{"$type":"Comment","$id":"Component-required-_ownedComment.0","$ns":"uml","annotatedElement":"Component-required","body":"The Interfaces that the Component requires from other Components in its environment in order to be able to offer its full set of provided functionality. These Interfaces may be used by the Component or any of its realizingClassifiers, or they may be the Interfaces that are required by its public Ports."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-required-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-required-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Component-provided.1","$ns":"uml","name":"provided","isQuery":"true","bodyCondition":"Component-provided.1-spec","ownedComment":[{"$type":"Comment","$id":"Component-provided.1-_ownedComment.0","$ns":"uml","annotatedElement":"Component-provided.1","body":"Derivation for Component::/provided"}],"ownedRule":[{"$type":"Constraint","$id":"Component-provided.1-spec","$ns":"uml","name":"spec","constrainedElement":"Component-provided.1 Component-provided","specification":[{"$type":"OpaqueExpression","$id":"Component-provided.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let \tris : Set(Interface) = allRealizedInterfaces(),\r\n        realizingClassifiers : Set(Classifier) =  self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),\r\n        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),\r\n        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allRealizedInterfaces())),\r\n        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),\r\n        providedByPorts : Set(Interface) = ports.provided->asSet()\r\nin     ris->union(realizingClassifierInterfaces) ->union(providedByPorts)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Component-provided.1-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-provided.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-provided.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Component-required.1","$ns":"uml","name":"required","isQuery":"true","bodyCondition":"Component-required.1-spec","ownedComment":[{"$type":"Comment","$id":"Component-required.1-_ownedComment.0","$ns":"uml","annotatedElement":"Component-required.1","body":"Derivation for Component::/required"}],"ownedRule":[{"$type":"Constraint","$id":"Component-required.1-spec","$ns":"uml","name":"spec","constrainedElement":"Component-required.1 Component-required","specification":[{"$type":"OpaqueExpression","$id":"Component-required.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let \tuis : Set(Interface) = allUsedInterfaces(),\r\n        realizingClassifiers : Set(Classifier) = self.realization.realizingClassifier->union(self.allParents()->collect(realization.realizingClassifier))->asSet(),\r\n        allRealizingClassifiers : Set(Classifier) = realizingClassifiers->union(realizingClassifiers.allParents())->asSet(),\r\n        realizingClassifierInterfaces : Set(Interface) = allRealizingClassifiers->iterate(c; rci : Set(Interface) = Set{} | rci->union(c.allUsedInterfaces())),\r\n        ports : Set(Port) = self.ownedPort->union(allParents()->collect(ownedPort))->asSet(),\r\n        usedByPorts : Set(Interface) = ports.required->asSet()\r\nin\t    uis->union(realizingClassifierInterfaces)->union(usedByPorts)->asSet()\r\n)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Component-required.1-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Component-required.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Component-required.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ComponentRealization","$ns":"uml","name":"ComponentRealization","ownedComment":[{"$type":"Comment","$id":"ComponentRealization-_ownedComment.0","$ns":"uml","annotatedElement":"ComponentRealization","body":"Realization is specialized to (optionally) define the Classifiers that realize the contract offered by a Component in terms of its provided and required Interfaces. The Component forms an abstraction from these various Classifiers."}],"generalization":[{"$type":"Generalization","$id":"ComponentRealization-_generalization.0","$ns":"uml","general":"Realization"}],"ownedAttribute":[{"$type":"Property","$id":"ComponentRealization-abstraction","$ns":"uml","name":"abstraction","type":"Component","subsettedProperty":"Dependency-supplier Element-owner","association":"A_realization_abstraction_component","ownedComment":[{"$type":"Comment","$id":"ComponentRealization-abstraction-_ownedComment.0","$ns":"uml","annotatedElement":"ComponentRealization-abstraction","body":"The Component that owns this ComponentRealization and which is implemented by its realizing Classifiers."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ComponentRealization-abstraction-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ComponentRealization-realizingClassifier","$ns":"uml","name":"realizingClassifier","type":"Classifier","subsettedProperty":"Dependency-client","association":"A_realizingClassifier_componentRealization","ownedComment":[{"$type":"Comment","$id":"ComponentRealization-realizingClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"ComponentRealization-realizingClassifier","body":"The Classifiers that are involved in the implementation of the Component that owns this Realization."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ComponentRealization-realizingClassifier-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"ConnectableElement","$ns":"uml","name":"ConnectableElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ConnectableElement-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElement","body":"ConnectableElement is an abstract metaclass representing a set of instances that play roles of a StructuredClassifier. ConnectableElements may be joined by attached Connectors and specify configurations of linked instances to be created within an instance of the containing StructuredClassifier."}],"generalization":[{"$type":"Generalization","$id":"ConnectableElement-_generalization.1","$ns":"uml","general":"TypedElement"},{"$type":"Generalization","$id":"ConnectableElement-_generalization.0","$ns":"uml","general":"ParameterableElement"}],"ownedAttribute":[{"$type":"Property","$id":"ConnectableElement-end","$ns":"uml","name":"end","type":"ConnectorEnd","isReadOnly":"true","isDerived":"true","association":"A_end_role","ownedComment":[{"$type":"Comment","$id":"ConnectableElement-end-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElement-end","body":"A set of ConnectorEnds that attach to this ConnectableElement."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConnectableElement-end-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectableElement-end-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ConnectableElement-templateParameter","$ns":"uml","name":"templateParameter","type":"ConnectableElementTemplateParameter","redefinedProperty":"ParameterableElement-templateParameter","association":"A_connectableElement_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"ConnectableElement-templateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElement-templateParameter","body":"The ConnectableElementTemplateParameter for this ConnectableElement parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectableElement-templateParameter-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ConnectableElement-end.1","$ns":"uml","name":"end","isQuery":"true","bodyCondition":"ConnectableElement-end.1-spec","ownedComment":[{"$type":"Comment","$id":"ConnectableElement-end.1-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElement-end.1","body":"Derivation for ConnectableElement::/end : ConnectorEnd"}],"ownedRule":[{"$type":"Constraint","$id":"ConnectableElement-end.1-spec","$ns":"uml","name":"spec","constrainedElement":"ConnectableElement-end.1 ConnectableElement-end","specification":[{"$type":"OpaqueExpression","$id":"ConnectableElement-end.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ConnectorEnd.allInstances()->select(role = self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ConnectableElement-end.1-result","$ns":"uml","name":"result","type":"ConnectorEnd","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConnectableElement-end.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectableElement-end.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ConnectableElementTemplateParameter","$ns":"uml","name":"ConnectableElementTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ConnectableElementTemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElementTemplateParameter","body":"A ConnectableElementTemplateParameter exposes a ConnectableElement as a formal parameter for a template."}],"generalization":[{"$type":"Generalization","$id":"ConnectableElementTemplateParameter-_generalization.0","$ns":"uml","general":"TemplateParameter"}],"ownedAttribute":[{"$type":"Property","$id":"ConnectableElementTemplateParameter-parameteredElement","$ns":"uml","name":"parameteredElement","type":"ConnectableElement","redefinedProperty":"TemplateParameter-parameteredElement","association":"A_connectableElement_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"ConnectableElementTemplateParameter-parameteredElement-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectableElementTemplateParameter-parameteredElement","body":"The ConnectableElement for this ConnectableElementTemplateParameter."}]}]},{"$type":"Class","$id":"Connector","$ns":"uml","name":"Connector","ownedComment":[{"$type":"Comment","$id":"Connector-_ownedComment.0","$ns":"uml","annotatedElement":"Connector","body":"A Connector specifies links that enables communication between two or more instances. In contrast to Associations, which specify links between any instance of the associated Classifiers, Connectors specify links between instances playing the connected parts only."}],"ownedRule":[{"$type":"Constraint","$id":"Connector-types","$ns":"uml","name":"types","constrainedElement":"Connector","ownedComment":[{"$type":"Comment","$id":"Connector-types-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-types","body":"The types of the ConnectableElements that the ends of a Connector are attached to must conform to the types of the ends of the Association that types the Connector, if any."}],"specification":[{"$type":"OpaqueExpression","$id":"Connector-types-_specification","$ns":"uml","language":"OCL","body":"type<>null implies \r\n  let noOfEnds : Integer = end->size() in \r\n  (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))"}]},{"$type":"Constraint","$id":"Connector-roles","$ns":"uml","name":"roles","constrainedElement":"Connector","ownedComment":[{"$type":"Comment","$id":"Connector-roles-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-roles","body":"The ConnectableElements attached as roles to each ConnectorEnd owned by a Connector must be owned or inherited roles of the Classifier that owned the Connector, or they must be Ports of such roles."}],"specification":[{"$type":"OpaqueExpression","$id":"Connector-roles-_specification","$ns":"uml","language":"OCL","body":"structuredClassifier <> null\r\nand\r\n  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)\r\nor\r\n  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))"}]}],"generalization":[{"$type":"Generalization","$id":"Connector-_generalization.0","$ns":"uml","general":"Feature"}],"ownedAttribute":[{"$type":"Property","$id":"Connector-contract","$ns":"uml","name":"contract","type":"Behavior","association":"A_contract_connector","ownedComment":[{"$type":"Comment","$id":"Connector-contract-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-contract","body":"The set of Behaviors that specify the valid interaction patterns across the Connector."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Connector-contract-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Connector-contract-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Connector-end","$ns":"uml","name":"end","type":"ConnectorEnd","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_end_connector","ownedComment":[{"$type":"Comment","$id":"Connector-end-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-end","body":"A Connector has at least two ConnectorEnds, each representing the participation of instances of the Classifiers typing the ConnectableElements attached to the end. The set of ConnectorEnds is ordered."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Connector-end-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Connector-end-_lowerValue","$ns":"uml","value":"2"}]},{"$type":"Property","$id":"Connector-kind","$ns":"uml","name":"kind","type":"ConnectorKind","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Connector-kind-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-kind","body":"Indicates the kind of Connector. This is derived: a Connector with one or more ends connected to a Port which is not on a Part and which is not a behavior port is a delegation; otherwise it is an assembly."}]},{"$type":"Property","$id":"Connector-redefinedConnector","$ns":"uml","name":"redefinedConnector","type":"Connector","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedConnector_connector","ownedComment":[{"$type":"Comment","$id":"Connector-redefinedConnector-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-redefinedConnector","body":"A Connector may be redefined when its containing Classifier is specialized. The redefining Connector may have a type that specializes the type of the redefined Connector. The types of the ConnectorEnds of the redefining Connector may specialize the types of the ConnectorEnds of the redefined Connector. The properties of the ConnectorEnds of the redefining Connector may be replaced."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Connector-redefinedConnector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Connector-redefinedConnector-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Connector-type","$ns":"uml","name":"type","type":"Association","association":"A_type_connector","ownedComment":[{"$type":"Comment","$id":"Connector-type-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-type","body":"An optional Association that classifies links corresponding to this Connector."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Connector-type-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Connector-kind.1","$ns":"uml","name":"kind","isQuery":"true","bodyCondition":"Connector-kind.1-spec","ownedComment":[{"$type":"Comment","$id":"Connector-kind.1-_ownedComment.0","$ns":"uml","annotatedElement":"Connector-kind.1","body":"Derivation for Connector::/kind : ConnectorKind"}],"ownedRule":[{"$type":"Constraint","$id":"Connector-kind.1-spec","$ns":"uml","name":"spec","constrainedElement":"Connector-kind.1 Connector-kind","specification":[{"$type":"OpaqueExpression","$id":"Connector-kind.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if end->exists(\r\n\t\trole.oclIsKindOf(Port) \r\n\t\tand partWithPort->isEmpty()\r\n\t\tand not role.oclAsType(Port).isBehavior)\r\nthen ConnectorKind::delegation \r\nelse ConnectorKind::assembly \r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Connector-kind.1-result","$ns":"uml","name":"result","type":"ConnectorKind","direction":"return"}]}]},{"$type":"Class","$id":"ConnectorEnd","$ns":"uml","name":"ConnectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd","body":"A ConnectorEnd is an endpoint of a Connector, which attaches the Connector to a ConnectableElement."}],"ownedRule":[{"$type":"Constraint","$id":"ConnectorEnd-role_and_part_with_port","$ns":"uml","name":"role_and_part_with_port","constrainedElement":"ConnectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-role_and_part_with_port-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-role_and_part_with_port","body":"If a ConnectorEnd references a partWithPort, then the role must be a Port that is defined or inherited by the type of the partWithPort."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectorEnd-role_and_part_with_port-_specification","$ns":"uml","language":"OCL","body":"partWithPort->notEmpty() implies \r\n  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))"}]},{"$type":"Constraint","$id":"ConnectorEnd-part_with_port_empty","$ns":"uml","name":"part_with_port_empty","constrainedElement":"ConnectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-part_with_port_empty-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-part_with_port_empty","body":"If a ConnectorEnd is attached to a Port of the containing Classifier, partWithPort will be empty."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectorEnd-part_with_port_empty-_specification","$ns":"uml","language":"OCL","body":"(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()"}]},{"$type":"Constraint","$id":"ConnectorEnd-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ConnectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-multiplicity","body":"The multiplicity of the ConnectorEnd may not be more general than the multiplicity of the corresponding end of the Association typing the owning Connector, if any."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectorEnd-multiplicity-_specification","$ns":"uml","language":"OCL","body":"self.compatibleWith(definingEnd)"}]},{"$type":"Constraint","$id":"ConnectorEnd-self_part_with_port","$ns":"uml","name":"self_part_with_port","constrainedElement":"ConnectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-self_part_with_port-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-self_part_with_port","body":"The Property held in self.partWithPort must not be a Port."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectorEnd-self_part_with_port-_specification","$ns":"uml","language":"OCL","body":"partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)"}]}],"generalization":[{"$type":"Generalization","$id":"ConnectorEnd-_generalization.0","$ns":"uml","general":"MultiplicityElement"}],"ownedAttribute":[{"$type":"Property","$id":"ConnectorEnd-definingEnd","$ns":"uml","name":"definingEnd","type":"Property","isReadOnly":"true","isDerived":"true","association":"A_definingEnd_connectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-definingEnd-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-definingEnd","body":"A derived property referencing the corresponding end on the Association which types the Connector owing this ConnectorEnd, if any. It is derived by selecting the end at the same place in the ordering of Association ends as this ConnectorEnd."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectorEnd-definingEnd-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ConnectorEnd-partWithPort","$ns":"uml","name":"partWithPort","type":"Property","association":"A_partWithPort_connectorEnd","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-partWithPort-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-partWithPort","body":"Indicates the role of the internal structure of a Classifier with the Port to which the ConnectorEnd is attached."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectorEnd-partWithPort-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ConnectorEnd-role","$ns":"uml","name":"role","type":"ConnectableElement","association":"A_end_role","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-role-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-role","body":"The ConnectableElement attached at this ConnectorEnd. When an instance of the containing Classifier is created, a link may (depending on the multiplicities) be created to an instance of the Classifier that types this ConnectableElement."}]}],"ownedOperation":[{"$type":"Operation","$id":"ConnectorEnd-definingEnd.1","$ns":"uml","name":"definingEnd","isQuery":"true","bodyCondition":"ConnectorEnd-definingEnd.1-spec","ownedComment":[{"$type":"Comment","$id":"ConnectorEnd-definingEnd.1-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorEnd-definingEnd.1","body":"Derivation for ConnectorEnd::/definingEnd : Property"}],"ownedRule":[{"$type":"Constraint","$id":"ConnectorEnd-definingEnd.1-spec","$ns":"uml","name":"spec","constrainedElement":"ConnectorEnd-definingEnd.1 ConnectorEnd-definingEnd","specification":[{"$type":"OpaqueExpression","$id":"ConnectorEnd-definingEnd.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if connector.type = null \r\nthen\r\n  null \r\nelse\r\n  let index : Integer = connector.end->indexOf(self) in\r\n    connector.type.memberEnd->at(index)\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ConnectorEnd-definingEnd.1-result","$ns":"uml","name":"result","type":"Property","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"ConnectorEnd-definingEnd.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"EncapsulatedClassifier","$ns":"uml","name":"EncapsulatedClassifier","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"EncapsulatedClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"EncapsulatedClassifier","body":"An EncapsulatedClassifier may own Ports to specify typed interaction points."}],"generalization":[{"$type":"Generalization","$id":"EncapsulatedClassifier-_generalization.0","$ns":"uml","general":"StructuredClassifier"}],"ownedAttribute":[{"$type":"Property","$id":"EncapsulatedClassifier-ownedPort","$ns":"uml","name":"ownedPort","type":"Port","isReadOnly":"true","isDerived":"true","aggregation":"composite","subsettedProperty":"StructuredClassifier-ownedAttribute","association":"A_ownedPort_encapsulatedClassifier","ownedComment":[{"$type":"Comment","$id":"EncapsulatedClassifier-ownedPort-_ownedComment.0","$ns":"uml","annotatedElement":"EncapsulatedClassifier-ownedPort","body":"The Ports owned by the EncapsulatedClassifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"EncapsulatedClassifier-ownedPort-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"EncapsulatedClassifier-ownedPort-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"EncapsulatedClassifier-ownedPort.1","$ns":"uml","name":"ownedPort","isQuery":"true","bodyCondition":"EncapsulatedClassifier-ownedPort.1-spec","ownedComment":[{"$type":"Comment","$id":"EncapsulatedClassifier-ownedPort.1-_ownedComment.0","$ns":"uml","annotatedElement":"EncapsulatedClassifier-ownedPort.1","body":"Derivation for EncapsulatedClassifier::/ownedPort : Port"}],"ownedRule":[{"$type":"Constraint","$id":"EncapsulatedClassifier-ownedPort.1-spec","$ns":"uml","name":"spec","constrainedElement":"EncapsulatedClassifier-ownedPort.1 EncapsulatedClassifier-ownedPort","specification":[{"$type":"OpaqueExpression","$id":"EncapsulatedClassifier-ownedPort.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedAttribute->select(oclIsKindOf(Port))->collect(oclAsType(Port))->asOrderedSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"EncapsulatedClassifier-ownedPort.1-result","$ns":"uml","name":"result","type":"Port","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"EncapsulatedClassifier-ownedPort.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"EncapsulatedClassifier-ownedPort.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Port","$ns":"uml","name":"Port","ownedComment":[{"$type":"Comment","$id":"Port-_ownedComment.0","$ns":"uml","annotatedElement":"Port","body":"A Port is a property of an EncapsulatedClassifier that specifies a distinct interaction point between that EncapsulatedClassifier and its environment or between the (behavior of the) EncapsulatedClassifier and its internal parts. Ports are connected to Properties of the EncapsulatedClassifier by Connectors through which requests can be made to invoke BehavioralFeatures. A Port may specify the services an EncapsulatedClassifier provides (offers) to its environment as well as the services that an EncapsulatedClassifier expects (requires) of its environment.  A Port may have an associated ProtocolStateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"Port-port_aggregation","$ns":"uml","name":"port_aggregation","constrainedElement":"Port","ownedComment":[{"$type":"Comment","$id":"Port-port_aggregation-_ownedComment.0","$ns":"uml","annotatedElement":"Port-port_aggregation","body":"Port.aggregation must be composite."}],"specification":[{"$type":"OpaqueExpression","$id":"Port-port_aggregation-_specification","$ns":"uml","language":"OCL","body":"aggregation = AggregationKind::composite"}]},{"$type":"Constraint","$id":"Port-default_value","$ns":"uml","name":"default_value","constrainedElement":"Port","ownedComment":[{"$type":"Comment","$id":"Port-default_value-_ownedComment.0","$ns":"uml","annotatedElement":"Port-default_value","body":"A defaultValue for port cannot be specified when the type of the Port is an Interface."}],"specification":[{"$type":"OpaqueExpression","$id":"Port-default_value-_specification","$ns":"uml","language":"OCL","body":"type.oclIsKindOf(Interface) implies defaultValue->isEmpty()"}]},{"$type":"Constraint","$id":"Port-encapsulated_owner","$ns":"uml","name":"encapsulated_owner","constrainedElement":"Port","ownedComment":[{"$type":"Comment","$id":"Port-encapsulated_owner-_ownedComment.0","$ns":"uml","annotatedElement":"Port-encapsulated_owner","body":"All Ports are owned by an EncapsulatedClassifier."}],"specification":[{"$type":"OpaqueExpression","$id":"Port-encapsulated_owner-_specification","$ns":"uml","language":"OCL","body":"owner = encapsulatedClassifier"}]}],"generalization":[{"$type":"Generalization","$id":"Port-_generalization.0","$ns":"uml","general":"Property"}],"ownedAttribute":[{"$type":"Property","$id":"Port-isBehavior","$ns":"uml","name":"isBehavior","ownedComment":[{"$type":"Comment","$id":"Port-isBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"Port-isBehavior","body":"Specifies whether requests arriving at this Port are sent to the classifier behavior of this EncapsulatedClassifier. Such a Port is referred to as a behavior Port. Any invocation of a BehavioralFeature targeted at a behavior Port will be handled by the instance of the owning EncapsulatedClassifier itself, rather than by any instances that it may contain."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Port-isBehavior-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Port-isConjugated","$ns":"uml","name":"isConjugated","ownedComment":[{"$type":"Comment","$id":"Port-isConjugated-_ownedComment.0","$ns":"uml","annotatedElement":"Port-isConjugated","body":"Specifies the way that the provided and required Interfaces are derived from the Port’s Type."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Port-isConjugated-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Port-isService","$ns":"uml","name":"isService","ownedComment":[{"$type":"Comment","$id":"Port-isService-_ownedComment.0","$ns":"uml","annotatedElement":"Port-isService","body":"If true, indicates that this Port is used to provide the published functionality of an EncapsulatedClassifier.  If false, this Port is used to implement the EncapsulatedClassifier but is not part of the essential externally-visible functionality of the EncapsulatedClassifier and can, therefore, be altered or deleted along with the internal implementation of the EncapsulatedClassifier and other properties that are considered part of its implementation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Port-isService-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"Port-protocol","$ns":"uml","name":"protocol","type":"ProtocolStateMachine","association":"A_protocol_port","ownedComment":[{"$type":"Comment","$id":"Port-protocol-_ownedComment.0","$ns":"uml","annotatedElement":"Port-protocol","body":"An optional ProtocolStateMachine which describes valid interactions at this interaction point."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-protocol-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Port-provided","$ns":"uml","name":"provided","type":"Interface","isReadOnly":"true","isDerived":"true","association":"A_provided_port","ownedComment":[{"$type":"Comment","$id":"Port-provided-_ownedComment.0","$ns":"uml","annotatedElement":"Port-provided","body":"The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCclassifier offers to its environment via this Port, and which it will handle either directly or by forwarding it to a part of its internal structure. This association is derived according to the value of isConjugated. If isConjugated is false, provided is derived as the union of the sets of Interfaces realized by the type of the port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface. If isConjugated is true, it is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-provided-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-provided-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Port-redefinedPort","$ns":"uml","name":"redefinedPort","type":"Port","subsettedProperty":"Property-redefinedProperty","association":"A_redefinedPort_port","ownedComment":[{"$type":"Comment","$id":"Port-redefinedPort-_ownedComment.0","$ns":"uml","annotatedElement":"Port-redefinedPort","body":"A Port may be redefined when its containing EncapsulatedClassifier is specialized. The redefining Port may have additional Interfaces to those that are associated with the redefined Port or it may replace an Interface by one of its subtypes."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-redefinedPort-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-redefinedPort-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Port-required","$ns":"uml","name":"required","type":"Interface","isReadOnly":"true","isDerived":"true","association":"A_required_port","ownedComment":[{"$type":"Comment","$id":"Port-required-_ownedComment.0","$ns":"uml","annotatedElement":"Port-required","body":"The Interfaces specifying the set of Operations and Receptions that the EncapsulatedCassifier expects its environment to handle via this port. This association is derived according to the value of isConjugated. If isConjugated is false, required is derived as the union of the sets of Interfaces used by the type of the Port and its supertypes. If isConjugated is true, it is derived as the union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly from the type of the Port if the Port is typed by an Interface."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-required-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-required-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Port-provided.1","$ns":"uml","name":"provided","isQuery":"true","bodyCondition":"Port-provided.1-spec","ownedComment":[{"$type":"Comment","$id":"Port-provided.1-_ownedComment.0","$ns":"uml","annotatedElement":"Port-provided.1","body":"Derivation for Port::/provided"}],"ownedRule":[{"$type":"Constraint","$id":"Port-provided.1-spec","$ns":"uml","name":"spec","constrainedElement":"Port-provided.1 Port-provided","specification":[{"$type":"OpaqueExpression","$id":"Port-provided.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if isConjugated then basicRequired() else basicProvided() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Port-provided.1-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-provided.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-provided.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Port-required.1","$ns":"uml","name":"required","isQuery":"true","bodyCondition":"Port-required.1-spec","ownedComment":[{"$type":"Comment","$id":"Port-required.1-_ownedComment.0","$ns":"uml","annotatedElement":"Port-required.1","body":"Derivation for Port::/required"}],"ownedRule":[{"$type":"Constraint","$id":"Port-required.1-spec","$ns":"uml","name":"spec","constrainedElement":"Port-required.1 Port-required","specification":[{"$type":"OpaqueExpression","$id":"Port-required.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if isConjugated then basicProvided() else basicRequired() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Port-required.1-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-required.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-required.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Port-basicProvided","$ns":"uml","name":"basicProvided","isQuery":"true","bodyCondition":"Port-basicProvided-spec","ownedComment":[{"$type":"Comment","$id":"Port-basicProvided-_ownedComment.0","$ns":"uml","annotatedElement":"Port-basicProvided","body":"The union of the sets of Interfaces realized by the type of the Port and its supertypes, or directly the type of the Port if the Port is typed by an Interface."}],"ownedRule":[{"$type":"Constraint","$id":"Port-basicProvided-spec","$ns":"uml","name":"spec","constrainedElement":"Port-basicProvided","specification":[{"$type":"OpaqueExpression","$id":"Port-basicProvided-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if type.oclIsKindOf(Interface) \r\nthen type.oclAsType(Interface)->asSet() \r\nelse type.oclAsType(Classifier).allRealizedInterfaces() \r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Port-basicProvided-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-basicProvided-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-basicProvided-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Port-basicRequired","$ns":"uml","name":"basicRequired","isQuery":"true","bodyCondition":"Port-basicRequired-spec","ownedComment":[{"$type":"Comment","$id":"Port-basicRequired-_ownedComment.0","$ns":"uml","annotatedElement":"Port-basicRequired","body":"The union of the sets of Interfaces used by the type of the Port and its supertypes."}],"ownedRule":[{"$type":"Constraint","$id":"Port-basicRequired-spec","$ns":"uml","name":"spec","constrainedElement":"Port-basicRequired","specification":[{"$type":"OpaqueExpression","$id":"Port-basicRequired-spec-_specification","$ns":"uml","language":"OCL","body":"result = ( type.oclAsType(Classifier).allUsedInterfaces() )"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Port-basicRequired-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Port-basicRequired-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Port-basicRequired-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"StructuredClassifier","$ns":"uml","name":"StructuredClassifier","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier","body":"StructuredClassifiers may contain an internal structure of connected elements each of which plays a role in the overall Behavior modeled by the StructuredClassifier."}],"generalization":[{"$type":"Generalization","$id":"StructuredClassifier-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"StructuredClassifier-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Classifier-attribute Namespace-ownedMember StructuredClassifier-role","association":"A_ownedAttribute_structuredClassifier","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-ownedAttribute","body":"The Properties owned by the StructuredClassifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-ownedAttribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredClassifier-ownedConnector","$ns":"uml","name":"ownedConnector","type":"Connector","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature Namespace-ownedMember","association":"A_ownedConnector_structuredClassifier","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-ownedConnector-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-ownedConnector","body":"The connectors owned by the StructuredClassifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-ownedConnector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-ownedConnector-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredClassifier-part","$ns":"uml","name":"part","type":"Property","isReadOnly":"true","isDerived":"true","association":"A_part_structuredClassifier","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-part-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-part","body":"The Properties specifying instances that the StructuredClassifier owns by composition. This collection is derived, selecting those owned Properties where isComposite is true."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-part-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-part-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredClassifier-role","$ns":"uml","name":"role","type":"ConnectableElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Namespace-member","association":"A_role_structuredClassifier","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-role-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-role","body":"The roles that instances may play in this StructuredClassifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-role-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-role-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"StructuredClassifier-part.1","$ns":"uml","name":"part","isQuery":"true","bodyCondition":"StructuredClassifier-part.1-spec","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-part.1-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-part.1","body":"Derivation for StructuredClassifier::/part"}],"ownedRule":[{"$type":"Constraint","$id":"StructuredClassifier-part.1-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredClassifier-part.1 StructuredClassifier-part","specification":[{"$type":"OpaqueExpression","$id":"StructuredClassifier-part.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedAttribute->select(isComposite))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredClassifier-part.1-result","$ns":"uml","name":"result","type":"Property","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-part.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-part.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StructuredClassifier-allRoles","$ns":"uml","name":"allRoles","isQuery":"true","bodyCondition":"StructuredClassifier-allRoles-spec","ownedComment":[{"$type":"Comment","$id":"StructuredClassifier-allRoles-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredClassifier-allRoles","body":"All features of type ConnectableElement, equivalent to all direct and inherited roles."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredClassifier-allRoles-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredClassifier-allRoles","specification":[{"$type":"OpaqueExpression","$id":"StructuredClassifier-allRoles-spec-_specification","$ns":"uml","language":"OCL","body":"result = (allFeatures()->select(oclIsKindOf(ConnectableElement))->collect(oclAsType(ConnectableElement))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredClassifier-allRoles-result","$ns":"uml","name":"result","type":"ConnectableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredClassifier-allRoles-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredClassifier-allRoles-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Enumeration","$id":"ConnectorKind","$ns":"uml","name":"ConnectorKind","ownedComment":[{"$type":"Comment","$id":"ConnectorKind-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorKind","body":"ConnectorKind is an enumeration that defines whether a Connector is an assembly or a delegation."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"ConnectorKind-assembly","$ns":"uml","name":"assembly","ownedComment":[{"$type":"Comment","$id":"ConnectorKind-assembly-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorKind-assembly","body":"Indicates that the Connector is an assembly Connector."}]},{"$type":"EnumerationLiteral","$id":"ConnectorKind-delegation","$ns":"uml","name":"delegation","ownedComment":[{"$type":"Comment","$id":"ConnectorKind-delegation-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectorKind-delegation","body":"Indicates that the Connector is a delegation Connector."}]}]},{"$type":"Association","$id":"A_part_structuredClassifier","$ns":"uml","name":"A_part_structuredClassifier","memberEnd":"StructuredClassifier-part A_part_structuredClassifier-structuredClassifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_part_structuredClassifier-structuredClassifier","$ns":"uml","name":"structuredClassifier","type":"StructuredClassifier","association":"A_part_structuredClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_part_structuredClassifier-structuredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedConnector_structuredClassifier","$ns":"uml","name":"A_ownedConnector_structuredClassifier","memberEnd":"StructuredClassifier-ownedConnector A_ownedConnector_structuredClassifier-structuredClassifier","ownedEnd":[{"$type":"Property","$id":"A_ownedConnector_structuredClassifier-structuredClassifier","$ns":"uml","name":"structuredClassifier","type":"StructuredClassifier","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_ownedConnector_structuredClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedConnector_structuredClassifier-structuredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedAttribute_structuredClassifier","$ns":"uml","name":"A_ownedAttribute_structuredClassifier","memberEnd":"StructuredClassifier-ownedAttribute A_ownedAttribute_structuredClassifier-structuredClassifier","generalization":[{"$type":"Generalization","$id":"A_ownedAttribute_structuredClassifier-_generalization.0","$ns":"uml","general":"A_role_structuredClassifier"}],"ownedEnd":[{"$type":"Property","$id":"A_ownedAttribute_structuredClassifier-structuredClassifier","$ns":"uml","name":"structuredClassifier","type":"StructuredClassifier","redefinedProperty":"A_role_structuredClassifier-structuredClassifier","subsettedProperty":"A_attribute_classifier-classifier NamedElement-namespace","association":"A_ownedAttribute_structuredClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedAttribute_structuredClassifier-structuredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_role_structuredClassifier","$ns":"uml","name":"A_role_structuredClassifier","memberEnd":"StructuredClassifier-role A_role_structuredClassifier-structuredClassifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_role_structuredClassifier-structuredClassifier","$ns":"uml","name":"structuredClassifier","type":"StructuredClassifier","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_member_memberNamespace-memberNamespace","association":"A_role_structuredClassifier","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_role_structuredClassifier-structuredClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_role_structuredClassifier-structuredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_protocol_port","$ns":"uml","name":"A_protocol_port","memberEnd":"Port-protocol A_protocol_port-port","ownedEnd":[{"$type":"Property","$id":"A_protocol_port-port","$ns":"uml","name":"port","type":"Port","association":"A_protocol_port","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_protocol_port-port-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_protocol_port-port-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_required_port","$ns":"uml","name":"A_required_port","memberEnd":"Port-required A_required_port-port","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_required_port-port","$ns":"uml","name":"port","type":"Port","association":"A_required_port","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_required_port-port-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_required_port-port-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedPort_port","$ns":"uml","name":"A_redefinedPort_port","memberEnd":"Port-redefinedPort A_redefinedPort_port-port","ownedEnd":[{"$type":"Property","$id":"A_redefinedPort_port-port","$ns":"uml","name":"port","type":"Port","subsettedProperty":"A_redefinedProperty_property-property","association":"A_redefinedPort_port","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedPort_port-port-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedPort_port-port-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_provided_port","$ns":"uml","name":"A_provided_port","memberEnd":"Port-provided A_provided_port-port","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_provided_port-port","$ns":"uml","name":"port","type":"Port","association":"A_provided_port","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_provided_port-port-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_provided_port-port-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedPort_encapsulatedClassifier","$ns":"uml","name":"A_ownedPort_encapsulatedClassifier","memberEnd":"EncapsulatedClassifier-ownedPort A_ownedPort_encapsulatedClassifier-encapsulatedClassifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_ownedPort_encapsulatedClassifier-encapsulatedClassifier","$ns":"uml","name":"encapsulatedClassifier","type":"EncapsulatedClassifier","subsettedProperty":"A_ownedAttribute_structuredClassifier-structuredClassifier","association":"A_ownedPort_encapsulatedClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedPort_encapsulatedClassifier-encapsulatedClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_partWithPort_connectorEnd","$ns":"uml","name":"A_partWithPort_connectorEnd","memberEnd":"ConnectorEnd-partWithPort A_partWithPort_connectorEnd-connectorEnd","ownedEnd":[{"$type":"Property","$id":"A_partWithPort_connectorEnd-connectorEnd","$ns":"uml","name":"connectorEnd","type":"ConnectorEnd","association":"A_partWithPort_connectorEnd","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_partWithPort_connectorEnd-connectorEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_partWithPort_connectorEnd-connectorEnd-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_definingEnd_connectorEnd","$ns":"uml","name":"A_definingEnd_connectorEnd","memberEnd":"ConnectorEnd-definingEnd A_definingEnd_connectorEnd-connectorEnd","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_definingEnd_connectorEnd-connectorEnd","$ns":"uml","name":"connectorEnd","type":"ConnectorEnd","association":"A_definingEnd_connectorEnd","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_definingEnd_connectorEnd-connectorEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_definingEnd_connectorEnd-connectorEnd-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_end_connector","$ns":"uml","name":"A_end_connector","memberEnd":"Connector-end A_end_connector-connector","ownedEnd":[{"$type":"Property","$id":"A_end_connector-connector","$ns":"uml","name":"connector","type":"Connector","subsettedProperty":"Element-owner","association":"A_end_connector"}]},{"$type":"Association","$id":"A_redefinedConnector_connector","$ns":"uml","name":"A_redefinedConnector_connector","memberEnd":"Connector-redefinedConnector A_redefinedConnector_connector-connector","ownedEnd":[{"$type":"Property","$id":"A_redefinedConnector_connector-connector","$ns":"uml","name":"connector","type":"Connector","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedConnector_connector","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedConnector_connector-connector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedConnector_connector-connector-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_contract_connector","$ns":"uml","name":"A_contract_connector","memberEnd":"Connector-contract A_contract_connector-connector","ownedEnd":[{"$type":"Property","$id":"A_contract_connector-connector","$ns":"uml","name":"connector","type":"Connector","association":"A_contract_connector","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_contract_connector-connector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_contract_connector-connector-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_type_connector","$ns":"uml","name":"A_type_connector","memberEnd":"Connector-type A_type_connector-connector","ownedEnd":[{"$type":"Property","$id":"A_type_connector-connector","$ns":"uml","name":"connector","type":"Connector","association":"A_type_connector","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_type_connector-connector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_type_connector-connector-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_connectableElement_templateParameter_parameteredElement","$ns":"uml","name":"A_connectableElement_templateParameter_parameteredElement","memberEnd":"ConnectableElement-templateParameter ConnectableElementTemplateParameter-parameteredElement"},{"$type":"Association","$id":"A_end_role","$ns":"uml","name":"A_end_role","memberEnd":"ConnectableElement-end ConnectorEnd-role"},{"$type":"Association","$id":"A_realizingClassifier_componentRealization","$ns":"uml","name":"A_realizingClassifier_componentRealization","memberEnd":"ComponentRealization-realizingClassifier A_realizingClassifier_componentRealization-componentRealization","ownedEnd":[{"$type":"Property","$id":"A_realizingClassifier_componentRealization-componentRealization","$ns":"uml","name":"componentRealization","type":"ComponentRealization","subsettedProperty":"NamedElement-clientDependency","association":"A_realizingClassifier_componentRealization","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_realizingClassifier_componentRealization-componentRealization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_realizingClassifier_componentRealization-componentRealization-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_required_component","$ns":"uml","name":"A_required_component","memberEnd":"Component-required A_required_component-component","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_required_component-component","$ns":"uml","name":"component","type":"Component","association":"A_required_component","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_required_component-component-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_required_component-component-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_packagedElement_component","$ns":"uml","name":"A_packagedElement_component","memberEnd":"Component-packagedElement A_packagedElement_component-component","ownedEnd":[{"$type":"Property","$id":"A_packagedElement_component-component","$ns":"uml","name":"component","type":"Component","subsettedProperty":"NamedElement-namespace","association":"A_packagedElement_component","lowerValue":[{"$type":"LiteralInteger","$id":"A_packagedElement_component-component-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_realization_abstraction_component","$ns":"uml","name":"A_realization_abstraction_component","memberEnd":"Component-realization ComponentRealization-abstraction"},{"$type":"Association","$id":"A_provided_component","$ns":"uml","name":"A_provided_component","memberEnd":"Component-provided A_provided_component-component","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_provided_component-component","$ns":"uml","name":"component","type":"Component","association":"A_provided_component","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_provided_component-component-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_provided_component-component-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_type_collaborationUse","$ns":"uml","name":"A_type_collaborationUse","memberEnd":"CollaborationUse-type A_type_collaborationUse-collaborationUse","ownedEnd":[{"$type":"Property","$id":"A_type_collaborationUse-collaborationUse","$ns":"uml","name":"collaborationUse","type":"CollaborationUse","association":"A_type_collaborationUse","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_type_collaborationUse-collaborationUse-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_type_collaborationUse-collaborationUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_roleBinding_collaborationUse","$ns":"uml","name":"A_roleBinding_collaborationUse","memberEnd":"CollaborationUse-roleBinding A_roleBinding_collaborationUse-collaborationUse","ownedEnd":[{"$type":"Property","$id":"A_roleBinding_collaborationUse-collaborationUse","$ns":"uml","name":"collaborationUse","type":"CollaborationUse","subsettedProperty":"Element-owner","association":"A_roleBinding_collaborationUse","lowerValue":[{"$type":"LiteralInteger","$id":"A_roleBinding_collaborationUse-collaborationUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_collaborationRole_collaboration","$ns":"uml","name":"A_collaborationRole_collaboration","memberEnd":"Collaboration-collaborationRole A_collaborationRole_collaboration-collaboration","ownedEnd":[{"$type":"Property","$id":"A_collaborationRole_collaboration-collaboration","$ns":"uml","name":"collaboration","type":"Collaboration","subsettedProperty":"A_role_structuredClassifier-structuredClassifier","association":"A_collaborationRole_collaboration","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_collaborationRole_collaboration-collaboration-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_collaborationRole_collaboration-collaboration-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedOperation_class","$ns":"uml","name":"A_ownedOperation_class","memberEnd":"Class-ownedOperation Operation-class"},{"$type":"Association","$id":"A_superClass_class","$ns":"uml","name":"A_superClass_class","memberEnd":"Class-superClass A_superClass_class-class","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_superClass_class-class","$ns":"uml","name":"class","type":"Class","subsettedProperty":"A_general_classifier-classifier","association":"A_superClass_class","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_superClass_class-class-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_superClass_class-class-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_extension_metaclass","$ns":"uml","name":"A_extension_metaclass","memberEnd":"Class-extension Extension-metaclass","isDerived":"true"},{"$type":"Association","$id":"A_ownedAttribute_class","$ns":"uml","name":"A_ownedAttribute_class","memberEnd":"Class-ownedAttribute Property-class"},{"$type":"Association","$id":"A_nestedClassifier_nestingClass","$ns":"uml","name":"A_nestedClassifier_nestingClass","memberEnd":"Class-nestedClassifier A_nestedClassifier_nestingClass-nestingClass","ownedEnd":[{"$type":"Property","$id":"A_nestedClassifier_nestingClass-nestingClass","$ns":"uml","name":"nestingClass","type":"Class","subsettedProperty":"NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_nestedClassifier_nestingClass","lowerValue":[{"$type":"LiteralInteger","$id":"A_nestedClassifier_nestingClass-nestingClass-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedReception_class","$ns":"uml","name":"A_ownedReception_class","memberEnd":"Class-ownedReception A_ownedReception_class-class","ownedEnd":[{"$type":"Property","$id":"A_ownedReception_class-class","$ns":"uml","name":"class","type":"Class","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace","association":"A_ownedReception_class","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedReception_class-class-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_memberEnd_association","$ns":"uml","name":"A_memberEnd_association","memberEnd":"Association-memberEnd Property-association"},{"$type":"Association","$id":"A_endType_association","$ns":"uml","name":"A_endType_association","memberEnd":"Association-endType A_endType_association-association","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_endType_association-association","$ns":"uml","name":"association","type":"Association","subsettedProperty":"A_relatedElement_relationship-relationship","association":"A_endType_association","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_endType_association-association-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_endType_association-association-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedEnd_owningAssociation","$ns":"uml","name":"A_ownedEnd_owningAssociation","memberEnd":"Association-ownedEnd Property-owningAssociation"},{"$type":"Association","$id":"A_navigableOwnedEnd_association","$ns":"uml","name":"A_navigableOwnedEnd_association","memberEnd":"Association-navigableOwnedEnd A_navigableOwnedEnd_association-association","ownedEnd":[{"$type":"Property","$id":"A_navigableOwnedEnd_association-association","$ns":"uml","name":"association","type":"Association","subsettedProperty":"Property-owningAssociation","association":"A_navigableOwnedEnd_association","lowerValue":[{"$type":"LiteralInteger","$id":"A_navigableOwnedEnd_association-association-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"StateMachines","$ns":"uml","name":"StateMachines","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"SimpleClassifiers"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"CommonStructure"}],"packagedElement":[{"$type":"Class","$id":"ConnectionPointReference","$ns":"uml","name":"ConnectionPointReference","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference","body":"A ConnectionPointReference represents a usage (as part of a submachine State) of an entry/exit point Pseudostate defined in the StateMachine referenced by the submachine State."}],"ownedRule":[{"$type":"Constraint","$id":"ConnectionPointReference-exit_pseudostates","$ns":"uml","name":"exit_pseudostates","constrainedElement":"ConnectionPointReference","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-exit_pseudostates-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference-exit_pseudostates","body":"The exit Pseudostates must be Pseudostates with kind exitPoint."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectionPointReference-exit_pseudostates-_specification","$ns":"uml","language":"OCL","body":"exit->forAll(kind = PseudostateKind::exitPoint)"}]},{"$type":"Constraint","$id":"ConnectionPointReference-entry_pseudostates","$ns":"uml","name":"entry_pseudostates","constrainedElement":"ConnectionPointReference","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-entry_pseudostates-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference-entry_pseudostates","body":"The entry Pseudostates must be Pseudostates with kind entryPoint."}],"specification":[{"$type":"OpaqueExpression","$id":"ConnectionPointReference-entry_pseudostates-_specification","$ns":"uml","language":"OCL","body":"entry->forAll(kind = PseudostateKind::entryPoint)"}]}],"generalization":[{"$type":"Generalization","$id":"ConnectionPointReference-_generalization.0","$ns":"uml","general":"Vertex"}],"ownedAttribute":[{"$type":"Property","$id":"ConnectionPointReference-entry","$ns":"uml","name":"entry","type":"Pseudostate","association":"A_entry_connectionPointReference","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-entry-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference-entry","body":"The entryPoint Pseudostates corresponding to this connection point."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConnectionPointReference-entry-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectionPointReference-entry-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ConnectionPointReference-exit","$ns":"uml","name":"exit","type":"Pseudostate","association":"A_exit_connectionPointReference","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-exit-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference-exit","body":"The exitPoints kind Pseudostates corresponding to this connection point."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConnectionPointReference-exit-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectionPointReference-exit-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ConnectionPointReference-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"NamedElement-namespace","association":"A_connection_state","ownedComment":[{"$type":"Comment","$id":"ConnectionPointReference-state-_ownedComment.0","$ns":"uml","annotatedElement":"ConnectionPointReference-state","body":"The State in which the ConnectionPointReference is defined."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConnectionPointReference-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"FinalState","$ns":"uml","name":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState","body":"A special kind of State, which, when entered, signifies that the enclosing Region has completed. If the enclosing Region is directly contained in a StateMachine and all other Regions in that StateMachine also are completed, then it means that the entire StateMachine behavior is completed."}],"ownedRule":[{"$type":"Constraint","$id":"FinalState-no_exit_behavior","$ns":"uml","name":"no_exit_behavior","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-no_exit_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-no_exit_behavior","body":"A FinalState has no exit Behavior."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-no_exit_behavior-_specification","$ns":"uml","language":"OCL","body":"exit->isEmpty()"}]},{"$type":"Constraint","$id":"FinalState-no_outgoing_transitions","$ns":"uml","name":"no_outgoing_transitions","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-no_outgoing_transitions-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-no_outgoing_transitions","body":"A FinalState cannot have any outgoing Transitions."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-no_outgoing_transitions-_specification","$ns":"uml","language":"OCL","body":"outgoing->size() = 0"}]},{"$type":"Constraint","$id":"FinalState-no_regions","$ns":"uml","name":"no_regions","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-no_regions-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-no_regions","body":"A FinalState cannot have Regions."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-no_regions-_specification","$ns":"uml","language":"OCL","body":"region->size() = 0"}]},{"$type":"Constraint","$id":"FinalState-cannot_reference_submachine","$ns":"uml","name":"cannot_reference_submachine","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-cannot_reference_submachine-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-cannot_reference_submachine","body":"A FinalState cannot reference a submachine."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-cannot_reference_submachine-_specification","$ns":"uml","language":"OCL","body":"submachine->isEmpty()"}]},{"$type":"Constraint","$id":"FinalState-no_entry_behavior","$ns":"uml","name":"no_entry_behavior","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-no_entry_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-no_entry_behavior","body":"A FinalState has no entry Behavior."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-no_entry_behavior-_specification","$ns":"uml","language":"OCL","body":"entry->isEmpty()"}]},{"$type":"Constraint","$id":"FinalState-no_state_behavior","$ns":"uml","name":"no_state_behavior","constrainedElement":"FinalState","ownedComment":[{"$type":"Comment","$id":"FinalState-no_state_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"FinalState-no_state_behavior","body":"A FinalState has no state (doActivity) Behavior."}],"specification":[{"$type":"OpaqueExpression","$id":"FinalState-no_state_behavior-_specification","$ns":"uml","language":"OCL","body":"doActivity->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"FinalState-_generalization.0","$ns":"uml","general":"State"}]},{"$type":"Class","$id":"ProtocolConformance","$ns":"uml","name":"ProtocolConformance","ownedComment":[{"$type":"Comment","$id":"ProtocolConformance-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolConformance","body":"A ProtocolStateMachine can be redefined into a more specific ProtocolStateMachine or into behavioral StateMachine. ProtocolConformance declares that the specific ProtocolStateMachine specifies a protocol that conforms to the general ProtocolStateMachine or that the specific behavioral StateMachine abides by the protocol of the general ProtocolStateMachine."}],"generalization":[{"$type":"Generalization","$id":"ProtocolConformance-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"ProtocolConformance-generalMachine","$ns":"uml","name":"generalMachine","type":"ProtocolStateMachine","subsettedProperty":"DirectedRelationship-target","association":"A_generalMachine_protocolConformance","ownedComment":[{"$type":"Comment","$id":"ProtocolConformance-generalMachine-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolConformance-generalMachine","body":"Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms."}]},{"$type":"Property","$id":"ProtocolConformance-specificMachine","$ns":"uml","name":"specificMachine","type":"ProtocolStateMachine","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_conformance_specificMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolConformance-specificMachine-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolConformance-specificMachine","body":"Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine."}]}]},{"$type":"Class","$id":"ProtocolStateMachine","$ns":"uml","name":"ProtocolStateMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine","body":"A ProtocolStateMachine is always defined in the context of a Classifier. It specifies which BehavioralFeatures of the Classifier can be called in which State and under which conditions, thus specifying the allowed invocation sequences on the Classifier's BehavioralFeatures. A ProtocolStateMachine specifies the possible and permitted Transitions on the instances of its context Classifier, together with the BehavioralFeatures that carry the Transitions. In this manner, an instance lifecycle can be specified for a Classifier, by defining the order in which the BehavioralFeatures can be activated and the States through which an instance progresses during its existence."}],"ownedRule":[{"$type":"Constraint","$id":"ProtocolStateMachine-classifier_context","$ns":"uml","name":"classifier_context","constrainedElement":"ProtocolStateMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-classifier_context-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine-classifier_context","body":"A ProtocolStateMachine must only have a Classifier context, not a BehavioralFeature context."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolStateMachine-classifier_context-_specification","$ns":"uml","language":"OCL","body":"_'context' <> null and specification = null"}]},{"$type":"Constraint","$id":"ProtocolStateMachine-deep_or_shallow_history","$ns":"uml","name":"deep_or_shallow_history","constrainedElement":"ProtocolStateMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-deep_or_shallow_history-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine-deep_or_shallow_history","body":"ProtocolStateMachines cannot have deep or shallow history Pseudostates."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolStateMachine-deep_or_shallow_history-_specification","$ns":"uml","language":"OCL","body":"region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies\n((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))\n"}]},{"$type":"Constraint","$id":"ProtocolStateMachine-entry_exit_do","$ns":"uml","name":"entry_exit_do","constrainedElement":"ProtocolStateMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-entry_exit_do-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine-entry_exit_do","body":"The states of a ProtocolStateMachine cannot have entry, exit, or do activity Behaviors."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolStateMachine-entry_exit_do-_specification","$ns":"uml","language":"OCL","body":"region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies\n(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))\n"}]},{"$type":"Constraint","$id":"ProtocolStateMachine-protocol_transitions","$ns":"uml","name":"protocol_transitions","constrainedElement":"ProtocolStateMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-protocol_transitions-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine-protocol_transitions","body":"All Transitions of a ProtocolStateMachine must be ProtocolTransitions."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolStateMachine-protocol_transitions-_specification","$ns":"uml","language":"OCL","body":"region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))"}]}],"generalization":[{"$type":"Generalization","$id":"ProtocolStateMachine-_generalization.0","$ns":"uml","general":"StateMachine"}],"ownedAttribute":[{"$type":"Property","$id":"ProtocolStateMachine-conformance","$ns":"uml","name":"conformance","type":"ProtocolConformance","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_conformance_specificMachine","ownedComment":[{"$type":"Comment","$id":"ProtocolStateMachine-conformance-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolStateMachine-conformance","body":"Conformance between ProtocolStateMachine "}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ProtocolStateMachine-conformance-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ProtocolStateMachine-conformance-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ProtocolTransition","$ns":"uml","name":"ProtocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition","body":"A ProtocolTransition specifies a legal Transition for an Operation. Transitions of ProtocolStateMachines have the following information: a pre-condition (guard), a Trigger, and a post-condition. Every ProtocolTransition is associated with at most one BehavioralFeature belonging to the context Classifier of the ProtocolStateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"ProtocolTransition-refers_to_operation","$ns":"uml","name":"refers_to_operation","constrainedElement":"ProtocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-refers_to_operation-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-refers_to_operation","body":"If a ProtocolTransition refers to an Operation (i.e., has a CallEvent trigger corresponding to an Operation), then that Operation should apply to the context Classifier of the StateMachine of the ProtocolTransition."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolTransition-refers_to_operation-_specification","$ns":"uml","language":"OCL","body":"if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then \r\n    containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())\r\nelse true endif"}]},{"$type":"Constraint","$id":"ProtocolTransition-associated_actions","$ns":"uml","name":"associated_actions","constrainedElement":"ProtocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-associated_actions-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-associated_actions","body":"A ProtocolTransition never has associated Behaviors."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolTransition-associated_actions-_specification","$ns":"uml","language":"OCL","body":"effect = null"}]},{"$type":"Constraint","$id":"ProtocolTransition-belongs_to_psm","$ns":"uml","name":"belongs_to_psm","constrainedElement":"ProtocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-belongs_to_psm-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-belongs_to_psm","body":"A ProtocolTransition always belongs to a ProtocolStateMachine."}],"specification":[{"$type":"OpaqueExpression","$id":"ProtocolTransition-belongs_to_psm-_specification","$ns":"uml","language":"OCL","body":"container.belongsToPSM()"}]}],"generalization":[{"$type":"Generalization","$id":"ProtocolTransition-_generalization.0","$ns":"uml","general":"Transition"}],"ownedAttribute":[{"$type":"Property","$id":"ProtocolTransition-postCondition","$ns":"uml","name":"postCondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_postCondition_owningTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-postCondition-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-postCondition","body":"Specifies the post condition of the Transition which is the Condition that should be obtained once the Transition is triggered. This post condition is part of the post condition of the Operation connected to the Transition."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ProtocolTransition-postCondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ProtocolTransition-preCondition","$ns":"uml","name":"preCondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Transition-guard","association":"A_preCondition_protocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-preCondition-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-preCondition","body":"Specifies the precondition of the Transition. It specifies the Condition that should be verified before triggering the Transition. This guard condition added to the source State will be evaluated as part of the precondition of the Operation referred by the Transition if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ProtocolTransition-preCondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ProtocolTransition-referred","$ns":"uml","name":"referred","type":"Operation","isReadOnly":"true","isDerived":"true","association":"A_referred_protocolTransition","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-referred-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-referred","body":"This association refers to the associated Operation. It is derived from the Operation of the CallEvent Trigger when applicable."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ProtocolTransition-referred-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ProtocolTransition-referred-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ProtocolTransition-referred.1","$ns":"uml","name":"referred","isQuery":"true","bodyCondition":"ProtocolTransition-referred.1-spec","ownedComment":[{"$type":"Comment","$id":"ProtocolTransition-referred.1-_ownedComment.0","$ns":"uml","annotatedElement":"ProtocolTransition-referred.1","body":"Derivation for ProtocolTransition::/referred"}],"ownedRule":[{"$type":"Constraint","$id":"ProtocolTransition-referred.1-spec","$ns":"uml","name":"spec","constrainedElement":"ProtocolTransition-referred.1 ProtocolTransition-referred","specification":[{"$type":"OpaqueExpression","$id":"ProtocolTransition-referred.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ProtocolTransition-referred.1-result","$ns":"uml","name":"result","type":"Operation","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ProtocolTransition-referred.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ProtocolTransition-referred.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Pseudostate","$ns":"uml","name":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate","body":"A Pseudostate is an abstraction that encompasses different types of transient Vertices in the StateMachine graph. A StateMachine instance never comes to rest in a Pseudostate, instead, it will exit and enter the Pseudostate within a single run-to-completion step."}],"ownedRule":[{"$type":"Constraint","$id":"Pseudostate-transitions_outgoing","$ns":"uml","name":"transitions_outgoing","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-transitions_outgoing-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-transitions_outgoing","body":"All transitions outgoing a fork vertex must target states in different regions of an orthogonal state."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-transitions_outgoing-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::fork) implies\r\n\r\n-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions \r\n-- such that these targets belong to different regions of that orthogonal state \r\n\r\noutgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in\r\n\t((contState <> null) and (contState.region\r\n\t\t->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))\r\n\t"}]},{"$type":"Constraint","$id":"Pseudostate-choice_vertex","$ns":"uml","name":"choice_vertex","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-choice_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-choice_vertex","body":"In a complete statemachine, a choice Vertex must have at least one incoming and one outgoing Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-choice_vertex-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)\n"}]},{"$type":"Constraint","$id":"Pseudostate-outgoing_from_initial","$ns":"uml","name":"outgoing_from_initial","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-outgoing_from_initial-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-outgoing_from_initial","body":"The outgoing Transition from an initial vertex may have a behavior, but not a trigger or a guard."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-outgoing_from_initial-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())"}]},{"$type":"Constraint","$id":"Pseudostate-join_vertex","$ns":"uml","name":"join_vertex","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-join_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-join_vertex","body":"In a complete StateMachine, a join Vertex must have at least two incoming Transitions and exactly one outgoing Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-join_vertex-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)\n"}]},{"$type":"Constraint","$id":"Pseudostate-junction_vertex","$ns":"uml","name":"junction_vertex","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-junction_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-junction_vertex","body":"In a complete StateMachine, a junction Vertex must have at least one incoming and one outgoing Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-junction_vertex-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)\n"}]},{"$type":"Constraint","$id":"Pseudostate-history_vertices","$ns":"uml","name":"history_vertices","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-history_vertices-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-history_vertices","body":"History Vertices can have at most one outgoing Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-history_vertices-_specification","$ns":"uml","language":"OCL","body":"((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)\n"}]},{"$type":"Constraint","$id":"Pseudostate-initial_vertex","$ns":"uml","name":"initial_vertex","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-initial_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-initial_vertex","body":"An initial Vertex can have at most one outgoing Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-initial_vertex-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)"}]},{"$type":"Constraint","$id":"Pseudostate-fork_vertex","$ns":"uml","name":"fork_vertex","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-fork_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-fork_vertex","body":"In a complete StateMachine, a fork Vertex must have at least two outgoing Transitions and exactly one incoming Transition."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-fork_vertex-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)\n"}]},{"$type":"Constraint","$id":"Pseudostate-transitions_incoming","$ns":"uml","name":"transitions_incoming","constrainedElement":"Pseudostate","ownedComment":[{"$type":"Comment","$id":"Pseudostate-transitions_incoming-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-transitions_incoming","body":"All Transitions incoming a join Vertex must originate in different Regions of an orthogonal State."}],"specification":[{"$type":"OpaqueExpression","$id":"Pseudostate-transitions_incoming-_specification","$ns":"uml","language":"OCL","body":"(kind = PseudostateKind::join) implies\n\n-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions \n-- such that these source vertices belong to different regions of that orthogonal state \n\nincoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in\n\t((contState <> null) and (contState.region\n\t\t->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))"}]}],"generalization":[{"$type":"Generalization","$id":"Pseudostate-_generalization.0","$ns":"uml","general":"Vertex"}],"ownedAttribute":[{"$type":"Property","$id":"Pseudostate-kind","$ns":"uml","name":"kind","type":"PseudostateKind","ownedComment":[{"$type":"Comment","$id":"Pseudostate-kind-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-kind","body":"Determines the precise type of the Pseudostate and can be one of: entryPoint, exitPoint, initial, deepHistory, shallowHistory, join, fork, junction, terminate or choice."}],"defaultValue":[{"$type":"InstanceValue","$id":"Pseudostate-kind-_defaultValue","$ns":"uml","type":"PseudostateKind","instance":"PseudostateKind-initial"}]},{"$type":"Property","$id":"Pseudostate-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"NamedElement-namespace","association":"A_connectionPoint_state","ownedComment":[{"$type":"Comment","$id":"Pseudostate-state-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-state","body":"The State that owns this Pseudostate and in which it appears."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Pseudostate-state-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Pseudostate-stateMachine","$ns":"uml","name":"stateMachine","type":"StateMachine","subsettedProperty":"NamedElement-namespace","association":"A_connectionPoint_stateMachine","ownedComment":[{"$type":"Comment","$id":"Pseudostate-stateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"Pseudostate-stateMachine","body":"The StateMachine in which this Pseudostate is defined. This only applies to Pseudostates of the kind entryPoint or exitPoint."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Pseudostate-stateMachine-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Region","$ns":"uml","name":"Region","ownedComment":[{"$type":"Comment","$id":"Region-_ownedComment.0","$ns":"uml","annotatedElement":"Region","body":"A Region is a top-level part of a StateMachine or a composite State, that serves as a container for the Vertices and Transitions of the StateMachine. A StateMachine or composite State may contain multiple Regions representing behaviors that may occur in parallel."}],"ownedRule":[{"$type":"Constraint","$id":"Region-deep_history_vertex","$ns":"uml","name":"deep_history_vertex","constrainedElement":"Region","ownedComment":[{"$type":"Comment","$id":"Region-deep_history_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Region-deep_history_vertex","body":"A Region can have at most one deep history Vertex."}],"specification":[{"$type":"OpaqueExpression","$id":"Region-deep_history_vertex-_specification","$ns":"uml","language":"OCL","body":"self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->\n   select(kind = PseudostateKind::deepHistory)->size() <= 1\n"}]},{"$type":"Constraint","$id":"Region-shallow_history_vertex","$ns":"uml","name":"shallow_history_vertex","constrainedElement":"Region","ownedComment":[{"$type":"Comment","$id":"Region-shallow_history_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Region-shallow_history_vertex","body":"A Region can have at most one shallow history Vertex."}],"specification":[{"$type":"OpaqueExpression","$id":"Region-shallow_history_vertex-_specification","$ns":"uml","language":"OCL","body":"subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->\n  select(kind = PseudostateKind::shallowHistory)->size() <= 1\n"}]},{"$type":"Constraint","$id":"Region-owned","$ns":"uml","name":"owned","constrainedElement":"Region","ownedComment":[{"$type":"Comment","$id":"Region-owned-_ownedComment.0","$ns":"uml","annotatedElement":"Region-owned","body":"If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa."}],"specification":[{"$type":"OpaqueExpression","$id":"Region-owned-_specification","$ns":"uml","language":"OCL","body":"(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)"}]},{"$type":"Constraint","$id":"Region-initial_vertex","$ns":"uml","name":"initial_vertex","constrainedElement":"Region","ownedComment":[{"$type":"Comment","$id":"Region-initial_vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Region-initial_vertex","body":"A Region can have at most one initial Vertex."}],"specification":[{"$type":"OpaqueExpression","$id":"Region-initial_vertex-_specification","$ns":"uml","language":"OCL","body":"self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->\n  select(kind = PseudostateKind::initial)->size() <= 1\n"}]}],"generalization":[{"$type":"Generalization","$id":"Region-_generalization.0","$ns":"uml","general":"Namespace"},{"$type":"Generalization","$id":"Region-_generalization.1","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Region-extendedRegion","$ns":"uml","name":"extendedRegion","type":"Region","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_extendedRegion_region","ownedComment":[{"$type":"Comment","$id":"Region-extendedRegion-_ownedComment.0","$ns":"uml","annotatedElement":"Region-extendedRegion","body":"The region of which this region is an extension."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Region-extendedRegion-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Region-redefinitionContext","$ns":"uml","name":"redefinitionContext","type":"Classifier","isReadOnly":"true","isDerived":"true","redefinedProperty":"RedefinableElement-redefinitionContext","association":"A_redefinitionContext_region","ownedComment":[{"$type":"Comment","$id":"Region-redefinitionContext-_ownedComment.0","$ns":"uml","annotatedElement":"Region-redefinitionContext","body":"References the Classifier in which context this element may be redefined."}]},{"$type":"Property","$id":"Region-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"NamedElement-namespace","association":"A_region_state","ownedComment":[{"$type":"Comment","$id":"Region-state-_ownedComment.0","$ns":"uml","annotatedElement":"Region-state","body":"The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Region-state-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Region-stateMachine","$ns":"uml","name":"stateMachine","type":"StateMachine","subsettedProperty":"NamedElement-namespace","association":"A_region_stateMachine","ownedComment":[{"$type":"Comment","$id":"Region-stateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"Region-stateMachine","body":"The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Region-stateMachine-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Region-subvertex","$ns":"uml","name":"subvertex","type":"Vertex","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_subvertex_container","ownedComment":[{"$type":"Comment","$id":"Region-subvertex-_ownedComment.0","$ns":"uml","annotatedElement":"Region-subvertex","body":"The set of Vertices that are owned by this Region."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Region-subvertex-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Region-subvertex-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Region-transition","$ns":"uml","name":"transition","type":"Transition","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_transition_container","ownedComment":[{"$type":"Comment","$id":"Region-transition-_ownedComment.0","$ns":"uml","annotatedElement":"Region-transition","body":"The set of Transitions owned by the Region."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Region-transition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Region-transition-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Region-belongsToPSM","$ns":"uml","name":"belongsToPSM","isQuery":"true","bodyCondition":"Region-belongsToPSM-spec","ownedComment":[{"$type":"Comment","$id":"Region-belongsToPSM-_ownedComment.0","$ns":"uml","annotatedElement":"Region-belongsToPSM","body":"The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"Region-belongsToPSM-spec","$ns":"uml","name":"spec","constrainedElement":"Region-belongsToPSM","specification":[{"$type":"OpaqueExpression","$id":"Region-belongsToPSM-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if  stateMachine <> null \nthen\n  stateMachine.oclIsKindOf(ProtocolStateMachine)\nelse \n  state <> null  implies  state.container.belongsToPSM()\nendif )"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Region-belongsToPSM-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Region-containingStateMachine","$ns":"uml","name":"containingStateMachine","isQuery":"true","bodyCondition":"Region-containingStateMachine-spec","ownedComment":[{"$type":"Comment","$id":"Region-containingStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"Region-containingStateMachine","body":"The operation containingStateMachine() returns the StateMachine in which this Region is defined."}],"ownedRule":[{"$type":"Constraint","$id":"Region-containingStateMachine-spec","$ns":"uml","name":"spec","constrainedElement":"Region-containingStateMachine","specification":[{"$type":"OpaqueExpression","$id":"Region-containingStateMachine-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if stateMachine = null \nthen\n  state.containingStateMachine()\nelse\n  stateMachine\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Region-containingStateMachine-result","$ns":"uml","name":"result","type":"StateMachine","direction":"return"}]},{"$type":"Operation","$id":"Region-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"Region-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"Region-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"Region-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"Region-isConsistentWith","body":"The query isConsistentWith() specifies that a redefining Region is consistent with a redefined Region provided that the redefining Region is an extension of the Redefined region, i.e., its Vertices and Transitions conform to one of the following: (1) they are equal to corresponding elements of the redefined Region or, (2) they consistently redefine a State or Transition of the redefined region, or (3) they add new States or Transitions."}],"ownedRule":[{"$type":"Constraint","$id":"Region-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"Region-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Region-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\r\ntrue)"}]},{"$type":"Constraint","$id":"Region-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"Region-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Region-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Region-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Region-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"Region-isRedefinitionContextValid","$ns":"uml","name":"isRedefinitionContextValid","isQuery":"true","redefinedOperation":"RedefinableElement-isRedefinitionContextValid","bodyCondition":"Region-isRedefinitionContextValid-spec","ownedComment":[{"$type":"Comment","$id":"Region-isRedefinitionContextValid-_ownedComment.0","$ns":"uml","annotatedElement":"Region-isRedefinitionContextValid","body":"The query isRedefinitionContextValid() specifies whether the redefinition contexts of a Region are properly related to the redefinition contexts of the specified Region to allow this element to redefine the other. The containing StateMachine or State of a redefining Region must Redefine the containing StateMachine or State of the redefined Region."}],"ownedRule":[{"$type":"Constraint","$id":"Region-isRedefinitionContextValid-spec","$ns":"uml","name":"spec","constrainedElement":"Region-isRedefinitionContextValid","specification":[{"$type":"OpaqueExpression","$id":"Region-isRedefinitionContextValid-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if redefinedElement.oclIsKindOf(Region) then\r\n  let redefinedRegion : Region = redefinedElement.oclAsType(Region) in\r\n    if stateMachine->isEmpty() then\r\n    -- the Region is owned by a State\r\n      (state.redefinedState->notEmpty() and state.redefinedState.region->includes(redefinedRegion))\r\n    else -- the region is owned by a StateMachine\r\n      (stateMachine.extendedStateMachine->notEmpty() and\r\n        stateMachine.extendedStateMachine->exists(sm : StateMachine |\r\n          sm.region->includes(redefinedRegion)))\r\n    endif\r\nelse\r\n  false\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Region-isRedefinitionContextValid-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Region-isRedefinitionContextValid-redefinedElement","$ns":"uml","name":"redefinedElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"Region-redefinitionContext.1","$ns":"uml","name":"redefinitionContext","isQuery":"true","bodyCondition":"Region-redefinitionContext.1-spec","ownedComment":[{"$type":"Comment","$id":"Region-redefinitionContext.1-_ownedComment.0","$ns":"uml","annotatedElement":"Region-redefinitionContext.1","body":"The redefinition context of a Region is the nearest containing StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"Region-redefinitionContext.1-spec","$ns":"uml","name":"spec","constrainedElement":"Region-redefinitionContext.1 Region-redefinitionContext","specification":[{"$type":"OpaqueExpression","$id":"Region-redefinitionContext.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let sm : StateMachine = containingStateMachine() in\nif sm._'context' = null or sm.general->notEmpty() then\n  sm\nelse\n  sm._'context'\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Region-redefinitionContext.1-result","$ns":"uml","name":"result","type":"Classifier","direction":"return"}]}]},{"$type":"Class","$id":"State","$ns":"uml","name":"State","ownedComment":[{"$type":"Comment","$id":"State-_ownedComment.0","$ns":"uml","annotatedElement":"State","body":"A State models a situation during which some (usually implicit) invariant condition holds."}],"ownedRule":[{"$type":"Constraint","$id":"State-entry_or_exit","$ns":"uml","name":"entry_or_exit","constrainedElement":"State","ownedComment":[{"$type":"Comment","$id":"State-entry_or_exit-_ownedComment.0","$ns":"uml","annotatedElement":"State-entry_or_exit","body":"Only entry or exit Pseudostates can serve as connection points."}],"specification":[{"$type":"OpaqueExpression","$id":"State-entry_or_exit-_specification","$ns":"uml","language":"OCL","body":"connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)"}]},{"$type":"Constraint","$id":"State-submachine_states","$ns":"uml","name":"submachine_states","constrainedElement":"State","ownedComment":[{"$type":"Comment","$id":"State-submachine_states-_ownedComment.0","$ns":"uml","annotatedElement":"State-submachine_states","body":"Only submachine States can have connection point references."}],"specification":[{"$type":"OpaqueExpression","$id":"State-submachine_states-_specification","$ns":"uml","language":"OCL","body":"isSubmachineState implies connection->notEmpty( )"}]},{"$type":"Constraint","$id":"State-composite_states","$ns":"uml","name":"composite_states","constrainedElement":"State","ownedComment":[{"$type":"Comment","$id":"State-composite_states-_ownedComment.0","$ns":"uml","annotatedElement":"State-composite_states","body":"Only composite States can have entry or exit Pseudostates defined."}],"specification":[{"$type":"OpaqueExpression","$id":"State-composite_states-_specification","$ns":"uml","language":"OCL","body":"connectionPoint->notEmpty() implies isComposite"}]},{"$type":"Constraint","$id":"State-destinations_or_sources_of_transitions","$ns":"uml","name":"destinations_or_sources_of_transitions","constrainedElement":"State","ownedComment":[{"$type":"Comment","$id":"State-destinations_or_sources_of_transitions-_ownedComment.0","$ns":"uml","annotatedElement":"State-destinations_or_sources_of_transitions","body":"The connection point references used as destinations/sources of Transitions associated with a submachine State must be defined as entry/exit points in the submachine StateMachine."}],"specification":[{"$type":"OpaqueExpression","$id":"State-destinations_or_sources_of_transitions-_specification","$ns":"uml","language":"OCL","body":"self.isSubmachineState implies (self.connection->forAll (cp |\r\n  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and\r\n  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))"}]},{"$type":"Constraint","$id":"State-submachine_or_regions","$ns":"uml","name":"submachine_or_regions","constrainedElement":"State","ownedComment":[{"$type":"Comment","$id":"State-submachine_or_regions-_ownedComment.0","$ns":"uml","annotatedElement":"State-submachine_or_regions","body":"A State is not allowed to have both a submachine and Regions."}],"specification":[{"$type":"OpaqueExpression","$id":"State-submachine_or_regions-_specification","$ns":"uml","language":"OCL","body":"isComposite implies not isSubmachineState"}]}],"generalization":[{"$type":"Generalization","$id":"State-_generalization.1","$ns":"uml","general":"RedefinableElement"},{"$type":"Generalization","$id":"State-_generalization.0","$ns":"uml","general":"Namespace"},{"$type":"Generalization","$id":"State-_generalization.2","$ns":"uml","general":"Vertex"}],"ownedAttribute":[{"$type":"Property","$id":"State-connection","$ns":"uml","name":"connection","type":"ConnectionPointReference","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_connection_state","ownedComment":[{"$type":"Comment","$id":"State-connection-_ownedComment.0","$ns":"uml","annotatedElement":"State-connection","body":"The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"State-connection-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-connection-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-connectionPoint","$ns":"uml","name":"connectionPoint","type":"Pseudostate","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_connectionPoint_state","ownedComment":[{"$type":"Comment","$id":"State-connectionPoint-_ownedComment.0","$ns":"uml","annotatedElement":"State-connectionPoint","body":"The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"State-connectionPoint-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-connectionPoint-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-deferrableTrigger","$ns":"uml","name":"deferrableTrigger","type":"Trigger","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_deferrableTrigger_state","ownedComment":[{"$type":"Comment","$id":"State-deferrableTrigger-_ownedComment.0","$ns":"uml","annotatedElement":"State-deferrableTrigger","body":"A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"State-deferrableTrigger-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-deferrableTrigger-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-doActivity","$ns":"uml","name":"doActivity","type":"Behavior","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_doActivity_state","ownedComment":[{"$type":"Comment","$id":"State-doActivity-_ownedComment.0","$ns":"uml","annotatedElement":"State-doActivity","body":"An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-doActivity-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-entry","$ns":"uml","name":"entry","type":"Behavior","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_entry_state","ownedComment":[{"$type":"Comment","$id":"State-entry-_ownedComment.0","$ns":"uml","annotatedElement":"State-entry","body":"An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-entry-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-exit","$ns":"uml","name":"exit","type":"Behavior","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_exit_state","ownedComment":[{"$type":"Comment","$id":"State-exit-_ownedComment.0","$ns":"uml","annotatedElement":"State-exit","body":"An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-exit-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-isComposite","$ns":"uml","name":"isComposite","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"State-isComposite-_ownedComment.0","$ns":"uml","annotatedElement":"State-isComposite","body":"A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"State-isOrthogonal","$ns":"uml","name":"isOrthogonal","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"State-isOrthogonal-_ownedComment.0","$ns":"uml","annotatedElement":"State-isOrthogonal","body":"A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"State-isSimple","$ns":"uml","name":"isSimple","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"State-isSimple-_ownedComment.0","$ns":"uml","annotatedElement":"State-isSimple","body":"A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"State-isSubmachineState","$ns":"uml","name":"isSubmachineState","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"State-isSubmachineState-_ownedComment.0","$ns":"uml","annotatedElement":"State-isSubmachineState","body":"A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine)."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"State-redefinedState","$ns":"uml","name":"redefinedState","type":"State","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedState_state","ownedComment":[{"$type":"Comment","$id":"State-redefinedState-_ownedComment.0","$ns":"uml","annotatedElement":"State-redefinedState","body":"The State of which this State is a redefinition."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-redefinedState-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-redefinitionContext","$ns":"uml","name":"redefinitionContext","type":"Classifier","isReadOnly":"true","isDerived":"true","redefinedProperty":"RedefinableElement-redefinitionContext","association":"A_redefinitionContext_state","ownedComment":[{"$type":"Comment","$id":"State-redefinitionContext-_ownedComment.0","$ns":"uml","annotatedElement":"State-redefinitionContext","body":"References the Classifier in which context this element may be redefined."}]},{"$type":"Property","$id":"State-region","$ns":"uml","name":"region","type":"Region","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_region_state","ownedComment":[{"$type":"Comment","$id":"State-region-_ownedComment.0","$ns":"uml","annotatedElement":"State-region","body":"The Regions owned directly by the State."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"State-region-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-region-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-stateInvariant","$ns":"uml","name":"stateInvariant","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_stateInvariant_owningState","ownedComment":[{"$type":"Comment","$id":"State-stateInvariant-_ownedComment.0","$ns":"uml","annotatedElement":"State-stateInvariant","body":"Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-stateInvariant-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"State-submachine","$ns":"uml","name":"submachine","type":"StateMachine","association":"A_submachineState_submachine","ownedComment":[{"$type":"Comment","$id":"State-submachine-_ownedComment.0","$ns":"uml","annotatedElement":"State-submachine","body":"The StateMachine that is to be inserted in place of the (submachine) State."}],"lowerValue":[{"$type":"LiteralInteger","$id":"State-submachine-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"State-containingStateMachine","$ns":"uml","name":"containingStateMachine","isQuery":"true","redefinedOperation":"Vertex-containingStateMachine","bodyCondition":"State-containingStateMachine-spec","ownedComment":[{"$type":"Comment","$id":"State-containingStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"State-containingStateMachine","body":"The query containingStateMachine() returns the StateMachine that contains the State either directly or transitively."}],"ownedRule":[{"$type":"Constraint","$id":"State-containingStateMachine-spec","$ns":"uml","name":"spec","constrainedElement":"State-containingStateMachine","specification":[{"$type":"OpaqueExpression","$id":"State-containingStateMachine-spec-_specification","$ns":"uml","language":"OCL","body":"result = (container.containingStateMachine())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-containingStateMachine-result","$ns":"uml","name":"result","type":"StateMachine","direction":"return"}]},{"$type":"Operation","$id":"State-isComposite.1","$ns":"uml","name":"isComposite","isQuery":"true","bodyCondition":"State-isComposite.1-spec","ownedComment":[{"$type":"Comment","$id":"State-isComposite.1-_ownedComment.0","$ns":"uml","annotatedElement":"State-isComposite.1","body":"A composite State is a State with at least one Region."}],"ownedRule":[{"$type":"Constraint","$id":"State-isComposite.1-spec","$ns":"uml","name":"spec","constrainedElement":"State-isComposite.1 State-isComposite","specification":[{"$type":"OpaqueExpression","$id":"State-isComposite.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (region->notEmpty())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isComposite.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"State-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"State-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"State-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"State-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"State-isConsistentWith","body":"The query isConsistentWith() specifies that a redefining State is consistent with a redefined State provided that the redefining State is an extension of the redefined State A simple State can be redefined (extended) to become a composite State (by adding one or more Regions) and a composite State can be redefined (extended) by adding Regions and by adding Vertices, States, and Transitions to inherited Regions. All States may add or replace entry, exit, and 'doActivity' Behaviors."}],"ownedRule":[{"$type":"Constraint","$id":"State-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"State-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"State-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\r\ntrue)"}]},{"$type":"Constraint","$id":"State-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"State-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"State-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"State-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"State-isOrthogonal.1","$ns":"uml","name":"isOrthogonal","isQuery":"true","bodyCondition":"State-isOrthogonal.1-spec","ownedComment":[{"$type":"Comment","$id":"State-isOrthogonal.1-_ownedComment.0","$ns":"uml","annotatedElement":"State-isOrthogonal.1","body":"An orthogonal State is a composite state with at least 2 regions."}],"ownedRule":[{"$type":"Constraint","$id":"State-isOrthogonal.1-spec","$ns":"uml","name":"spec","constrainedElement":"State-isOrthogonal.1 State-isOrthogonal","specification":[{"$type":"OpaqueExpression","$id":"State-isOrthogonal.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (region->size () > 1)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isOrthogonal.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"State-isRedefinitionContextValid","$ns":"uml","name":"isRedefinitionContextValid","isQuery":"true","redefinedOperation":"RedefinableElement-isRedefinitionContextValid","bodyCondition":"State-isRedefinitionContextValid-spec","ownedComment":[{"$type":"Comment","$id":"State-isRedefinitionContextValid-_ownedComment.0","$ns":"uml","annotatedElement":"State-isRedefinitionContextValid","body":"The query isRedefinitionContextValid() specifies whether the redefinition contexts of a State are properly related to the redefinition contexts of the specified State to allow this element to redefine the other. This means that the containing Region of a redefining State must redefine the containing Region of the redefined State."}],"ownedRule":[{"$type":"Constraint","$id":"State-isRedefinitionContextValid-spec","$ns":"uml","name":"spec","constrainedElement":"State-isRedefinitionContextValid","specification":[{"$type":"OpaqueExpression","$id":"State-isRedefinitionContextValid-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if redefinedElement.oclIsKindOf(State) then\r\n  let redefinedState : State = redefinedElement.oclAsType(State) in\r\n    container.redefinedElement.oclAsType(Region)->exists(r:Region |\r\n      r.subvertex->includes(redefinedState))\r\nelse\r\n  false\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isRedefinitionContextValid-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"State-isRedefinitionContextValid-redefinedElement","$ns":"uml","name":"redefinedElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"State-isSimple.1","$ns":"uml","name":"isSimple","isQuery":"true","bodyCondition":"State-isSimple.1-spec","ownedComment":[{"$type":"Comment","$id":"State-isSimple.1-_ownedComment.0","$ns":"uml","annotatedElement":"State-isSimple.1","body":"A simple State is a State without any regions."}],"ownedRule":[{"$type":"Constraint","$id":"State-isSimple.1-spec","$ns":"uml","name":"spec","constrainedElement":"State-isSimple.1 State-isSimple","specification":[{"$type":"OpaqueExpression","$id":"State-isSimple.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((region->isEmpty()) and not isSubmachineState())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isSimple.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"State-isSubmachineState.1","$ns":"uml","name":"isSubmachineState","isQuery":"true","bodyCondition":"State-isSubmachineState.1-spec","ownedComment":[{"$type":"Comment","$id":"State-isSubmachineState.1-_ownedComment.0","$ns":"uml","annotatedElement":"State-isSubmachineState.1","body":"Only submachine State references another StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"State-isSubmachineState.1-spec","$ns":"uml","name":"spec","constrainedElement":"State-isSubmachineState.1 State-isSubmachineState","specification":[{"$type":"OpaqueExpression","$id":"State-isSubmachineState.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (submachine <> null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-isSubmachineState.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"State-redefinitionContext.1","$ns":"uml","name":"redefinitionContext","isQuery":"true","bodyCondition":"State-redefinitionContext.1-spec","ownedComment":[{"$type":"Comment","$id":"State-redefinitionContext.1-_ownedComment.0","$ns":"uml","annotatedElement":"State-redefinitionContext.1","body":"The redefinition context of a State is the nearest containing StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"State-redefinitionContext.1-spec","$ns":"uml","name":"spec","constrainedElement":"State-redefinitionContext.1 State-redefinitionContext","specification":[{"$type":"OpaqueExpression","$id":"State-redefinitionContext.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let sm : StateMachine = containingStateMachine() in\nif sm._'context' = null or sm.general->notEmpty() then\n  sm\nelse\n  sm._'context'\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"State-redefinitionContext.1-result","$ns":"uml","name":"result","type":"Classifier","direction":"return"}]}]},{"$type":"Class","$id":"StateMachine","$ns":"uml","name":"StateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine","body":"StateMachines can be used to express event-driven behaviors of parts of a system. Behavior is modeled as a traversal of a graph of Vertices interconnected by one or more joined Transition arcs that are triggered by the dispatching of successive Event occurrences. During this traversal, the StateMachine may execute a sequence of Behaviors associated with various elements of the StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-connection_points","$ns":"uml","name":"connection_points","constrainedElement":"StateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-connection_points-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-connection_points","body":"The connection points of a StateMachine are Pseudostates of kind entry point or exit point."}],"specification":[{"$type":"OpaqueExpression","$id":"StateMachine-connection_points-_specification","$ns":"uml","language":"OCL","body":"connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)"}]},{"$type":"Constraint","$id":"StateMachine-classifier_context","$ns":"uml","name":"classifier_context","constrainedElement":"StateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-classifier_context-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-classifier_context","body":"The Classifier context of a StateMachine cannot be an Interface."}],"specification":[{"$type":"OpaqueExpression","$id":"StateMachine-classifier_context-_specification","$ns":"uml","language":"OCL","body":"_'context' <> null implies not _'context'.oclIsKindOf(Interface)"}]},{"$type":"Constraint","$id":"StateMachine-method","$ns":"uml","name":"method","constrainedElement":"StateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-method-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-method","body":"A StateMachine as the method for a BehavioralFeature cannot have entry/exit connection points."}],"specification":[{"$type":"OpaqueExpression","$id":"StateMachine-method-_specification","$ns":"uml","language":"OCL","body":"specification <> null implies connectionPoint->isEmpty()"}]},{"$type":"Constraint","$id":"StateMachine-context_classifier","$ns":"uml","name":"context_classifier","constrainedElement":"StateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-context_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-context_classifier","body":"The context Classifier of the method StateMachine of a BehavioralFeature must be the Classifier that owns the BehavioralFeature."}],"specification":[{"$type":"OpaqueExpression","$id":"StateMachine-context_classifier-_specification","$ns":"uml","language":"OCL","body":"specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))"}]}],"generalization":[{"$type":"Generalization","$id":"StateMachine-_generalization.0","$ns":"uml","general":"Behavior"}],"ownedAttribute":[{"$type":"Property","$id":"StateMachine-connectionPoint","$ns":"uml","name":"connectionPoint","type":"Pseudostate","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_connectionPoint_stateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-connectionPoint-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-connectionPoint","body":"The connection points defined for this StateMachine. They represent the interface of the StateMachine when used as part of submachine State"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StateMachine-connectionPoint-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StateMachine-connectionPoint-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StateMachine-extendedStateMachine","$ns":"uml","name":"extendedStateMachine","type":"StateMachine","redefinedProperty":"Behavior-redefinedBehavior","association":"A_extendedStateMachine_stateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-extendedStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-extendedStateMachine","body":"The StateMachines of which this is an extension."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StateMachine-extendedStateMachine-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StateMachine-extendedStateMachine-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StateMachine-region","$ns":"uml","name":"region","type":"Region","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_region_stateMachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-region-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-region","body":"The Regions owned directly by the StateMachine."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StateMachine-region-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"StateMachine-submachineState","$ns":"uml","name":"submachineState","type":"State","association":"A_submachineState_submachine","ownedComment":[{"$type":"Comment","$id":"StateMachine-submachineState-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-submachineState","body":"References the submachine(s) in case of a submachine State. Multiple machines are referenced in case of a concurrent State."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StateMachine-submachineState-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StateMachine-submachineState-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"StateMachine-LCA","$ns":"uml","name":"LCA","isQuery":"true","bodyCondition":"StateMachine-LCA-spec","ownedComment":[{"$type":"Comment","$id":"StateMachine-LCA-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-LCA","body":"The operation LCA(s1,s2) returns the Region that is the least common ancestor of Vertices s1 and s2, based on the StateMachine containment hierarchy."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-LCA-spec","$ns":"uml","name":"spec","constrainedElement":"StateMachine-LCA","specification":[{"$type":"OpaqueExpression","$id":"StateMachine-LCA-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if ancestor(s1, s2) then \r\n    s2.container\r\nelse\r\n\tif ancestor(s2, s1) then\r\n\t    s1.container \r\n\telse \r\n\t    LCA(s1.container.state, s2.container.state)\r\n\tendif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StateMachine-LCA-result","$ns":"uml","name":"result","type":"Region","direction":"return"},{"$type":"Parameter","$id":"StateMachine-LCA-s1","$ns":"uml","name":"s1","type":"Vertex"},{"$type":"Parameter","$id":"StateMachine-LCA-s2","$ns":"uml","name":"s2","type":"Vertex"}]},{"$type":"Operation","$id":"StateMachine-ancestor","$ns":"uml","name":"ancestor","isQuery":"true","bodyCondition":"StateMachine-ancestor-spec","ownedComment":[{"$type":"Comment","$id":"StateMachine-ancestor-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-ancestor","body":"The query ancestor(s1, s2) checks whether Vertex s2 is an ancestor of Vertex s1."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-ancestor-spec","$ns":"uml","name":"spec","constrainedElement":"StateMachine-ancestor","specification":[{"$type":"OpaqueExpression","$id":"StateMachine-ancestor-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if (s2 = s1) then \r\n\ttrue \r\nelse \r\n\tif s1.container.stateMachine->notEmpty() then \r\n\t    true\r\n\telse \r\n\t    if s2.container.stateMachine->notEmpty() then \r\n\t        false\r\n\t    else\r\n\t        ancestor(s1, s2.container.state)\r\n\t     endif\r\n\t endif\r\nendif  )"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StateMachine-ancestor-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"StateMachine-ancestor-s1","$ns":"uml","name":"s1","type":"Vertex"},{"$type":"Parameter","$id":"StateMachine-ancestor-s2","$ns":"uml","name":"s2","type":"Vertex"}]},{"$type":"Operation","$id":"StateMachine-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"StateMachine-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"StateMachine-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-isConsistentWith","body":"The query isConsistentWith() specifies that a redefining StateMachine is consistent with a redefined StateMachine provided that the redefining StateMachine is an extension of the redefined StateMachine : Regions are inherited and Regions can be added, inherited Regions can be redefined. In case of multiple redefining StateMachine, extension implies that the redefining StateMachine gets orthogonal Regions for each of the redefined StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"StateMachine-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"StateMachine-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\r\ntrue)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StateMachine-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"StateMachine-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"StateMachine-isRedefinitionContextValid","$ns":"uml","name":"isRedefinitionContextValid","isQuery":"true","redefinedOperation":"RedefinableElement-isRedefinitionContextValid","bodyCondition":"StateMachine-isRedefinitionContextValid-spec","ownedComment":[{"$type":"Comment","$id":"StateMachine-isRedefinitionContextValid-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-isRedefinitionContextValid","body":"The query isRedefinitionContextValid() specifies whether the redefinition context of a StateMachine is properly related to the redefinition contexts of the specified StateMachine to allow this element to redefine the other. The context Classifier of a redefining StateMachine must redefine the context Classifier of the redefined StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-isRedefinitionContextValid-spec","$ns":"uml","name":"spec","constrainedElement":"StateMachine-isRedefinitionContextValid","specification":[{"$type":"OpaqueExpression","$id":"StateMachine-isRedefinitionContextValid-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if redefinedElement.oclIsKindOf(StateMachine) then\r\n  let redefinedStateMachine : StateMachine = redefinedElement.oclAsType(StateMachine) in\r\n    self._'context'().oclAsType(BehavioredClassifier).redefinedClassifier->\r\n      includes(redefinedStateMachine._'context'())\r\nelse\r\n  false\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StateMachine-isRedefinitionContextValid-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"StateMachine-isRedefinitionContextValid-redefinedElement","$ns":"uml","name":"redefinedElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"StateMachine-LCAState","$ns":"uml","name":"LCAState","isQuery":"true","bodyCondition":"StateMachine-LCAState-spec","ownedComment":[{"$type":"Comment","$id":"StateMachine-LCAState-_ownedComment.0","$ns":"uml","annotatedElement":"StateMachine-LCAState","body":"This utility funciton is like the LCA, except that it returns the nearest composite State that contains both input Vertices."}],"ownedRule":[{"$type":"Constraint","$id":"StateMachine-LCAState-spec","$ns":"uml","name":"spec","constrainedElement":"StateMachine-LCAState","specification":[{"$type":"OpaqueExpression","$id":"StateMachine-LCAState-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if v2.oclIsTypeOf(State) and ancestor(v1, v2) then\r\n\tv2.oclAsType(State)\r\nelse if v1.oclIsTypeOf(State) and ancestor(v2, v1) then\r\n\tv1.oclAsType(State)\r\nelse if (v1.container.state->isEmpty() or v2.container.state->isEmpty()) then \r\n\tnull.oclAsType(State)\r\nelse LCAState(v1.container.state, v2.container.state)\r\nendif endif endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StateMachine-LCAState-result","$ns":"uml","name":"result","type":"State","direction":"return"},{"$type":"Parameter","$id":"StateMachine-LCAState-v1","$ns":"uml","name":"v1","type":"Vertex"},{"$type":"Parameter","$id":"StateMachine-LCAState-v2","$ns":"uml","name":"v2","type":"Vertex"}]}]},{"$type":"Class","$id":"Transition","$ns":"uml","name":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-_ownedComment.0","$ns":"uml","annotatedElement":"Transition","body":"A Transition represents an arc between exactly one source Vertex and exactly one Target vertex (the source and targets may be the same Vertex). It may form part of a compound transition, which takes the StateMachine from one steady State configuration to another, representing the full response of the StateMachine to an occurrence of an Event that triggered it."}],"ownedRule":[{"$type":"Constraint","$id":"Transition-state_is_external","$ns":"uml","name":"state_is_external","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-state_is_external-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-state_is_external","body":"A Transition with kind external can source any Vertex except entry points."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-state_is_external-_specification","$ns":"uml","language":"OCL","body":"(kind = TransitionKind::external) implies\r\n\tnot (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)"}]},{"$type":"Constraint","$id":"Transition-join_segment_guards","$ns":"uml","name":"join_segment_guards","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-join_segment_guards-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-join_segment_guards","body":"A join segment must not have Guards or Triggers."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-join_segment_guards-_specification","$ns":"uml","language":"OCL","body":"(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())"}]},{"$type":"Constraint","$id":"Transition-state_is_internal","$ns":"uml","name":"state_is_internal","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-state_is_internal-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-state_is_internal","body":"A Transition with kind internal must have a State as its source, and its source and target must be equal."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-state_is_internal-_specification","$ns":"uml","language":"OCL","body":"(kind = TransitionKind::internal) implies\r\n\t\t(source.oclIsKindOf (State) and source = target)"}]},{"$type":"Constraint","$id":"Transition-outgoing_pseudostates","$ns":"uml","name":"outgoing_pseudostates","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-outgoing_pseudostates-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-outgoing_pseudostates","body":"Transitions outgoing Pseudostates may not have a Trigger."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-outgoing_pseudostates-_specification","$ns":"uml","language":"OCL","body":"source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()"}]},{"$type":"Constraint","$id":"Transition-join_segment_state","$ns":"uml","name":"join_segment_state","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-join_segment_state-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-join_segment_state","body":"A join segment must always originate from a State."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-join_segment_state-_specification","$ns":"uml","language":"OCL","body":"(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))"}]},{"$type":"Constraint","$id":"Transition-fork_segment_state","$ns":"uml","name":"fork_segment_state","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-fork_segment_state-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-fork_segment_state","body":"A fork segment must always target a State."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-fork_segment_state-_specification","$ns":"uml","language":"OCL","body":"(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))"}]},{"$type":"Constraint","$id":"Transition-state_is_local","$ns":"uml","name":"state_is_local","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-state_is_local-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-state_is_local","body":"A Transition with kind local must have a composite State or an entry point as its source."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-state_is_local-_specification","$ns":"uml","language":"OCL","body":"(kind = TransitionKind::local) implies\r\n\t\t((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or\r\n\t\t(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))"}]},{"$type":"Constraint","$id":"Transition-initial_transition","$ns":"uml","name":"initial_transition","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-initial_transition-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-initial_transition","body":"An initial Transition at the topmost level Region of a StateMachine that has no Trigger."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-initial_transition-_specification","$ns":"uml","language":"OCL","body":"(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) implies\n\ttrigger->isEmpty()\n"}]},{"$type":"Constraint","$id":"Transition-fork_segment_guards","$ns":"uml","name":"fork_segment_guards","constrainedElement":"Transition","ownedComment":[{"$type":"Comment","$id":"Transition-fork_segment_guards-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-fork_segment_guards","body":"A fork segment must not have Guards or Triggers."}],"specification":[{"$type":"OpaqueExpression","$id":"Transition-fork_segment_guards-_specification","$ns":"uml","language":"OCL","body":"(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())"}]}],"generalization":[{"$type":"Generalization","$id":"Transition-_generalization.0","$ns":"uml","general":"Namespace"},{"$type":"Generalization","$id":"Transition-_generalization.1","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Transition-container","$ns":"uml","name":"container","type":"Region","subsettedProperty":"NamedElement-namespace","association":"A_transition_container","ownedComment":[{"$type":"Comment","$id":"Transition-container-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-container","body":"Designates the Region that owns this Transition."}]},{"$type":"Property","$id":"Transition-effect","$ns":"uml","name":"effect","type":"Behavior","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_effect_transition","ownedComment":[{"$type":"Comment","$id":"Transition-effect-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-effect","body":"Specifies an optional behavior to be performed when the Transition fires."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Transition-effect-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Transition-guard","$ns":"uml","name":"guard","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_guard_transition","ownedComment":[{"$type":"Comment","$id":"Transition-guard-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-guard","body":"A guard is a Constraint that provides a fine-grained control over the firing of the Transition. The guard is evaluated when an Event occurrence is dispatched by the StateMachine. If the guard is true at that time, the Transition may be enabled, otherwise, it is disabled. Guards should be pure expressions without side effects. Guard expressions with side effects are ill formed."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Transition-guard-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Transition-kind","$ns":"uml","name":"kind","type":"TransitionKind","ownedComment":[{"$type":"Comment","$id":"Transition-kind-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-kind","body":"Indicates the precise type of the Transition."}],"defaultValue":[{"$type":"InstanceValue","$id":"Transition-kind-_defaultValue","$ns":"uml","type":"TransitionKind","instance":"TransitionKind-external"}]},{"$type":"Property","$id":"Transition-redefinedTransition","$ns":"uml","name":"redefinedTransition","type":"Transition","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedTransition_transition","ownedComment":[{"$type":"Comment","$id":"Transition-redefinedTransition-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-redefinedTransition","body":"The Transition that is redefined by this Transition."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Transition-redefinedTransition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Transition-redefinitionContext","$ns":"uml","name":"redefinitionContext","type":"Classifier","isReadOnly":"true","isDerived":"true","redefinedProperty":"RedefinableElement-redefinitionContext","association":"A_redefinitionContext_transition","ownedComment":[{"$type":"Comment","$id":"Transition-redefinitionContext-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-redefinitionContext","body":"References the Classifier in which context this element may be redefined."}]},{"$type":"Property","$id":"Transition-source","$ns":"uml","name":"source","type":"Vertex","association":"A_outgoing_source_vertex","ownedComment":[{"$type":"Comment","$id":"Transition-source-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-source","body":"Designates the originating Vertex (State or Pseudostate) of the Transition."}]},{"$type":"Property","$id":"Transition-target","$ns":"uml","name":"target","type":"Vertex","association":"A_incoming_target_vertex","ownedComment":[{"$type":"Comment","$id":"Transition-target-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-target","body":"Designates the target Vertex that is reached when the Transition is taken."}]},{"$type":"Property","$id":"Transition-trigger","$ns":"uml","name":"trigger","type":"Trigger","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_trigger_transition","ownedComment":[{"$type":"Comment","$id":"Transition-trigger-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-trigger","body":"Specifies the Triggers that may fire the transition."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Transition-trigger-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Transition-trigger-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Transition-containingStateMachine","$ns":"uml","name":"containingStateMachine","isQuery":"true","bodyCondition":"Transition-containingStateMachine-spec","ownedComment":[{"$type":"Comment","$id":"Transition-containingStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-containingStateMachine","body":"The query containingStateMachine() returns the StateMachine that contains the Transition either directly or transitively."}],"ownedRule":[{"$type":"Constraint","$id":"Transition-containingStateMachine-spec","$ns":"uml","name":"spec","constrainedElement":"Transition-containingStateMachine","specification":[{"$type":"OpaqueExpression","$id":"Transition-containingStateMachine-spec-_specification","$ns":"uml","language":"OCL","body":"result = (container.containingStateMachine())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Transition-containingStateMachine-result","$ns":"uml","name":"result","type":"StateMachine","direction":"return"}]},{"$type":"Operation","$id":"Transition-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"Transition-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"Transition-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"Transition-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-isConsistentWith","body":"The query isConsistentWith() specifies that a redefining Transition is consistent with a redefined Transition provided that the redefining Transition has the following relation to the redefined Transition: A redefining Transition redefines all properties of the corresponding redefined Transition except the source State and the Trigger."}],"ownedRule":[{"$type":"Constraint","$id":"Transition-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"Transition-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Transition-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (-- the following is merely a default body; it is expected that the specific form of this constraint will be specified by profiles\r\ntrue)"}]},{"$type":"Constraint","$id":"Transition-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"Transition-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Transition-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Transition-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Transition-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"Transition-redefinitionContext.1","$ns":"uml","name":"redefinitionContext","isQuery":"true","bodyCondition":"Transition-redefinitionContext.1-spec","ownedComment":[{"$type":"Comment","$id":"Transition-redefinitionContext.1-_ownedComment.0","$ns":"uml","annotatedElement":"Transition-redefinitionContext.1","body":"The redefinition context of a Transition is the nearest containing StateMachine."}],"ownedRule":[{"$type":"Constraint","$id":"Transition-redefinitionContext.1-spec","$ns":"uml","name":"spec","constrainedElement":"Transition-redefinitionContext.1 Transition-redefinitionContext","specification":[{"$type":"OpaqueExpression","$id":"Transition-redefinitionContext.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let sm : StateMachine = containingStateMachine() in\nif sm._'context' = null or sm.general->notEmpty() then\n  sm\nelse\n  sm._'context'\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Transition-redefinitionContext.1-result","$ns":"uml","name":"result","type":"Classifier","direction":"return"}]}]},{"$type":"Class","$id":"Vertex","$ns":"uml","name":"Vertex","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Vertex-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex","body":"A Vertex is an abstraction of a node in a StateMachine graph. It can be the source or destination of any number of Transitions."}],"generalization":[{"$type":"Generalization","$id":"Vertex-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Vertex-container","$ns":"uml","name":"container","type":"Region","subsettedProperty":"NamedElement-namespace","association":"A_subvertex_container","ownedComment":[{"$type":"Comment","$id":"Vertex-container-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-container","body":"The Region that contains this Vertex."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Vertex-container-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Vertex-incoming","$ns":"uml","name":"incoming","type":"Transition","isReadOnly":"true","isDerived":"true","association":"A_incoming_target_vertex","ownedComment":[{"$type":"Comment","$id":"Vertex-incoming-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-incoming","body":"Specifies the Transitions entering this Vertex."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Vertex-incoming-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Vertex-incoming-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Vertex-outgoing","$ns":"uml","name":"outgoing","type":"Transition","isReadOnly":"true","isDerived":"true","association":"A_outgoing_source_vertex","ownedComment":[{"$type":"Comment","$id":"Vertex-outgoing-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-outgoing","body":"Specifies the Transitions departing from this Vertex."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Vertex-outgoing-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Vertex-outgoing-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Vertex-containingStateMachine","$ns":"uml","name":"containingStateMachine","isQuery":"true","bodyCondition":"Vertex-containingStateMachine-spec","ownedComment":[{"$type":"Comment","$id":"Vertex-containingStateMachine-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-containingStateMachine","body":"The operation containingStateMachine() returns the StateMachine in which this Vertex is defined."}],"ownedRule":[{"$type":"Constraint","$id":"Vertex-containingStateMachine-spec","$ns":"uml","name":"spec","constrainedElement":"Vertex-containingStateMachine","specification":[{"$type":"OpaqueExpression","$id":"Vertex-containingStateMachine-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if container <> null\nthen\n-- the container is a region\n   container.containingStateMachine()\nelse \n   if (self.oclIsKindOf(Pseudostate)) and ((self.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint) or (self.oclAsType(Pseudostate).kind = PseudostateKind::exitPoint)) then\n      self.oclAsType(Pseudostate).stateMachine\n   else \n      if (self.oclIsKindOf(ConnectionPointReference)) then\n          self.oclAsType(ConnectionPointReference).state.containingStateMachine() -- no other valid cases possible\n      else \n          null\n      endif\n   endif\nendif\n\n)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Vertex-containingStateMachine-result","$ns":"uml","name":"result","type":"StateMachine","direction":"return"}]},{"$type":"Operation","$id":"Vertex-incoming.1","$ns":"uml","name":"incoming","isQuery":"true","bodyCondition":"Vertex-incoming.1-spec","ownedComment":[{"$type":"Comment","$id":"Vertex-incoming.1-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-incoming.1","body":"Derivation for Vertex::/incoming."}],"ownedRule":[{"$type":"Constraint","$id":"Vertex-incoming.1-spec","$ns":"uml","name":"spec","constrainedElement":"Vertex-incoming.1 Vertex-incoming","specification":[{"$type":"OpaqueExpression","$id":"Vertex-incoming.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (Transition.allInstances()->select(target=self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Vertex-incoming.1-result","$ns":"uml","name":"result","type":"Transition","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Vertex-incoming.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Vertex-incoming.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Vertex-outgoing.1","$ns":"uml","name":"outgoing","isQuery":"true","bodyCondition":"Vertex-outgoing.1-spec","ownedComment":[{"$type":"Comment","$id":"Vertex-outgoing.1-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-outgoing.1","body":"Derivation for Vertex::/outgoing"}],"ownedRule":[{"$type":"Constraint","$id":"Vertex-outgoing.1-spec","$ns":"uml","name":"spec","constrainedElement":"Vertex-outgoing.1 Vertex-outgoing","specification":[{"$type":"OpaqueExpression","$id":"Vertex-outgoing.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (Transition.allInstances()->select(source=self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Vertex-outgoing.1-result","$ns":"uml","name":"result","type":"Transition","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Vertex-outgoing.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Vertex-outgoing.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Vertex-isContainedInState","$ns":"uml","name":"isContainedInState","isQuery":"true","bodyCondition":"Vertex-isContainedInState-spec","ownedComment":[{"$type":"Comment","$id":"Vertex-isContainedInState-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-isContainedInState","body":"This utility operation returns true if the Vertex is contained in the State s (input argument)."}],"ownedRule":[{"$type":"Constraint","$id":"Vertex-isContainedInState-spec","$ns":"uml","name":"spec","constrainedElement":"Vertex-isContainedInState","specification":[{"$type":"OpaqueExpression","$id":"Vertex-isContainedInState-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if not s.isComposite() or container->isEmpty() then\r\n\tfalse\r\nelse\r\n\tif container.state = s then \r\n\t\ttrue\r\n\telse\r\n\t\tcontainer.state.isContainedInState(s)\r\n\tendif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Vertex-isContainedInState-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Vertex-isContainedInState-s","$ns":"uml","name":"s","type":"State"}]},{"$type":"Operation","$id":"Vertex-isContainedInRegion","$ns":"uml","name":"isContainedInRegion","isQuery":"true","bodyCondition":"Vertex-isContainedInRegion-spec","ownedComment":[{"$type":"Comment","$id":"Vertex-isContainedInRegion-_ownedComment.0","$ns":"uml","annotatedElement":"Vertex-isContainedInRegion","body":"This utility query returns true if the Vertex is contained in the Region r (input argument)."}],"ownedRule":[{"$type":"Constraint","$id":"Vertex-isContainedInRegion-spec","$ns":"uml","name":"spec","constrainedElement":"Vertex-isContainedInRegion","specification":[{"$type":"OpaqueExpression","$id":"Vertex-isContainedInRegion-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if (container = r) then\r\n\ttrue\r\nelse\r\n\tif (r.state->isEmpty()) then\r\n\t\tfalse\r\n\telse\r\n\t\tcontainer.state.isContainedInRegion(r)\r\n\tendif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Vertex-isContainedInRegion-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Vertex-isContainedInRegion-r","$ns":"uml","name":"r","type":"Region"}]}]},{"$type":"Enumeration","$id":"PseudostateKind","$ns":"uml","name":"PseudostateKind","ownedComment":[{"$type":"Comment","$id":"PseudostateKind-_ownedComment.0","$ns":"uml","annotatedElement":"PseudostateKind","body":"PseudostateKind is an Enumeration type that is used to differentiate various kinds of Pseudostates."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"PseudostateKind-initial","$ns":"uml","name":"initial"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-deepHistory","$ns":"uml","name":"deepHistory"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-shallowHistory","$ns":"uml","name":"shallowHistory"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-join","$ns":"uml","name":"join"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-fork","$ns":"uml","name":"fork"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-junction","$ns":"uml","name":"junction"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-choice","$ns":"uml","name":"choice"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-entryPoint","$ns":"uml","name":"entryPoint"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-exitPoint","$ns":"uml","name":"exitPoint"},{"$type":"EnumerationLiteral","$id":"PseudostateKind-terminate","$ns":"uml","name":"terminate"}]},{"$type":"Enumeration","$id":"TransitionKind","$ns":"uml","name":"TransitionKind","ownedComment":[{"$type":"Comment","$id":"TransitionKind-_ownedComment.0","$ns":"uml","annotatedElement":"TransitionKind","body":"TransitionKind is an Enumeration type used to differentiate the various kinds of Transitions."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"TransitionKind-internal","$ns":"uml","name":"internal","ownedComment":[{"$type":"Comment","$id":"TransitionKind-internal-_ownedComment.0","$ns":"uml","annotatedElement":"TransitionKind-internal","body":"Implies that the Transition, if triggered, occurs without exiting or entering the source State (i.e., it does not cause a state change). This means that the entry or exit condition of the source State will not be invoked. An internal Transition can be taken even if the SateMachine is in one or more Regions nested within the associated State."}]},{"$type":"EnumerationLiteral","$id":"TransitionKind-local","$ns":"uml","name":"local","ownedComment":[{"$type":"Comment","$id":"TransitionKind-local-_ownedComment.0","$ns":"uml","annotatedElement":"TransitionKind-local","body":"Implies that the Transition, if triggered, will not exit the composite (source) State, but it will exit and re-enter any state within the composite State that is in the current state configuration."}]},{"$type":"EnumerationLiteral","$id":"TransitionKind-external","$ns":"uml","name":"external","ownedComment":[{"$type":"Comment","$id":"TransitionKind-external-_ownedComment.0","$ns":"uml","annotatedElement":"TransitionKind-external","body":"Implies that the Transition, if triggered, will exit the composite (source) State."}]}]},{"$type":"Association","$id":"A_incoming_target_vertex","$ns":"uml","name":"A_incoming_target_vertex","memberEnd":"Vertex-incoming Transition-target"},{"$type":"Association","$id":"A_outgoing_source_vertex","$ns":"uml","name":"A_outgoing_source_vertex","memberEnd":"Vertex-outgoing Transition-source"},{"$type":"Association","$id":"A_trigger_transition","$ns":"uml","name":"A_trigger_transition","memberEnd":"Transition-trigger A_trigger_transition-transition","ownedEnd":[{"$type":"Property","$id":"A_trigger_transition-transition","$ns":"uml","name":"transition","type":"Transition","subsettedProperty":"Element-owner","association":"A_trigger_transition","lowerValue":[{"$type":"LiteralInteger","$id":"A_trigger_transition-transition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_guard_transition","$ns":"uml","name":"A_guard_transition","memberEnd":"Transition-guard A_guard_transition-transition","ownedEnd":[{"$type":"Property","$id":"A_guard_transition-transition","$ns":"uml","name":"transition","type":"Transition","subsettedProperty":"Constraint-context","association":"A_guard_transition","lowerValue":[{"$type":"LiteralInteger","$id":"A_guard_transition-transition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedTransition_transition","$ns":"uml","name":"A_redefinedTransition_transition","memberEnd":"Transition-redefinedTransition A_redefinedTransition_transition-transition","ownedEnd":[{"$type":"Property","$id":"A_redefinedTransition_transition-transition","$ns":"uml","name":"transition","type":"Transition","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedTransition_transition","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedTransition_transition-transition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedTransition_transition-transition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinitionContext_transition","$ns":"uml","name":"A_redefinitionContext_transition","memberEnd":"Transition-redefinitionContext A_redefinitionContext_transition-transition","isDerived":"true","generalization":[{"$type":"Generalization","$id":"A_redefinitionContext_transition-_generalization.0","$ns":"uml","general":"A_redefinitionContext_redefinableElement"}],"ownedEnd":[{"$type":"Property","$id":"A_redefinitionContext_transition-transition","$ns":"uml","name":"transition","type":"Transition","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement","association":"A_redefinitionContext_transition","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinitionContext_transition-transition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinitionContext_transition-transition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_effect_transition","$ns":"uml","name":"A_effect_transition","memberEnd":"Transition-effect A_effect_transition-transition","ownedEnd":[{"$type":"Property","$id":"A_effect_transition-transition","$ns":"uml","name":"transition","type":"Transition","subsettedProperty":"Element-owner","association":"A_effect_transition","lowerValue":[{"$type":"LiteralInteger","$id":"A_effect_transition-transition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_submachineState_submachine","$ns":"uml","name":"A_submachineState_submachine","memberEnd":"StateMachine-submachineState State-submachine"},{"$type":"Association","$id":"A_connectionPoint_stateMachine","$ns":"uml","name":"A_connectionPoint_stateMachine","memberEnd":"StateMachine-connectionPoint Pseudostate-stateMachine"},{"$type":"Association","$id":"A_region_stateMachine","$ns":"uml","name":"A_region_stateMachine","memberEnd":"StateMachine-region Region-stateMachine"},{"$type":"Association","$id":"A_extendedStateMachine_stateMachine","$ns":"uml","name":"A_extendedStateMachine_stateMachine","memberEnd":"StateMachine-extendedStateMachine A_extendedStateMachine_stateMachine-stateMachine","ownedEnd":[{"$type":"Property","$id":"A_extendedStateMachine_stateMachine-stateMachine","$ns":"uml","name":"stateMachine","type":"StateMachine","subsettedProperty":"A_redefinedBehavior_behavior-behavior","association":"A_extendedStateMachine_stateMachine","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_extendedStateMachine_stateMachine-stateMachine-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_extendedStateMachine_stateMachine-stateMachine-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinitionContext_state","$ns":"uml","name":"A_redefinitionContext_state","memberEnd":"State-redefinitionContext A_redefinitionContext_state-state","isDerived":"true","generalization":[{"$type":"Generalization","$id":"A_redefinitionContext_state-_generalization.0","$ns":"uml","general":"A_redefinitionContext_redefinableElement"}],"ownedEnd":[{"$type":"Property","$id":"A_redefinitionContext_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement","association":"A_redefinitionContext_state","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinitionContext_state-state-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinitionContext_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_region_state","$ns":"uml","name":"A_region_state","memberEnd":"State-region Region-state"},{"$type":"Association","$id":"A_stateInvariant_owningState","$ns":"uml","name":"A_stateInvariant_owningState","memberEnd":"State-stateInvariant A_stateInvariant_owningState-owningState","ownedEnd":[{"$type":"Property","$id":"A_stateInvariant_owningState-owningState","$ns":"uml","name":"owningState","type":"State","subsettedProperty":"Constraint-context","association":"A_stateInvariant_owningState","lowerValue":[{"$type":"LiteralInteger","$id":"A_stateInvariant_owningState-owningState-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedState_state","$ns":"uml","name":"A_redefinedState_state","memberEnd":"State-redefinedState A_redefinedState_state-state","ownedEnd":[{"$type":"Property","$id":"A_redefinedState_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedState_state","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedState_state-state-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedState_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_deferrableTrigger_state","$ns":"uml","name":"A_deferrableTrigger_state","memberEnd":"State-deferrableTrigger A_deferrableTrigger_state-state","ownedEnd":[{"$type":"Property","$id":"A_deferrableTrigger_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"Element-owner","association":"A_deferrableTrigger_state","lowerValue":[{"$type":"LiteralInteger","$id":"A_deferrableTrigger_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_connection_state","$ns":"uml","name":"A_connection_state","memberEnd":"State-connection ConnectionPointReference-state"},{"$type":"Association","$id":"A_entry_state","$ns":"uml","name":"A_entry_state","memberEnd":"State-entry A_entry_state-state","ownedEnd":[{"$type":"Property","$id":"A_entry_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"Element-owner","association":"A_entry_state","lowerValue":[{"$type":"LiteralInteger","$id":"A_entry_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_connectionPoint_state","$ns":"uml","name":"A_connectionPoint_state","memberEnd":"State-connectionPoint Pseudostate-state"},{"$type":"Association","$id":"A_doActivity_state","$ns":"uml","name":"A_doActivity_state","memberEnd":"State-doActivity A_doActivity_state-state","ownedEnd":[{"$type":"Property","$id":"A_doActivity_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"Element-owner","association":"A_doActivity_state","lowerValue":[{"$type":"LiteralInteger","$id":"A_doActivity_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_exit_state","$ns":"uml","name":"A_exit_state","memberEnd":"State-exit A_exit_state-state","ownedEnd":[{"$type":"Property","$id":"A_exit_state-state","$ns":"uml","name":"state","type":"State","subsettedProperty":"Element-owner","association":"A_exit_state","lowerValue":[{"$type":"LiteralInteger","$id":"A_exit_state-state-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_extendedRegion_region","$ns":"uml","name":"A_extendedRegion_region","memberEnd":"Region-extendedRegion A_extendedRegion_region-region","ownedEnd":[{"$type":"Property","$id":"A_extendedRegion_region-region","$ns":"uml","name":"region","type":"Region","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_extendedRegion_region","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_extendedRegion_region-region-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_extendedRegion_region-region-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_subvertex_container","$ns":"uml","name":"A_subvertex_container","memberEnd":"Region-subvertex Vertex-container"},{"$type":"Association","$id":"A_redefinitionContext_region","$ns":"uml","name":"A_redefinitionContext_region","memberEnd":"Region-redefinitionContext A_redefinitionContext_region-region","isDerived":"true","generalization":[{"$type":"Generalization","$id":"A_redefinitionContext_region-_generalization.0","$ns":"uml","general":"A_redefinitionContext_redefinableElement"}],"ownedEnd":[{"$type":"Property","$id":"A_redefinitionContext_region-region","$ns":"uml","name":"region","type":"Region","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement","association":"A_redefinitionContext_region","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinitionContext_region-region-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinitionContext_region-region-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_transition_container","$ns":"uml","name":"A_transition_container","memberEnd":"Region-transition Transition-container"},{"$type":"Association","$id":"A_referred_protocolTransition","$ns":"uml","name":"A_referred_protocolTransition","memberEnd":"ProtocolTransition-referred A_referred_protocolTransition-protocolTransition","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_referred_protocolTransition-protocolTransition","$ns":"uml","name":"protocolTransition","type":"ProtocolTransition","association":"A_referred_protocolTransition","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_referred_protocolTransition-protocolTransition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_referred_protocolTransition-protocolTransition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_preCondition_protocolTransition","$ns":"uml","name":"A_preCondition_protocolTransition","memberEnd":"ProtocolTransition-preCondition A_preCondition_protocolTransition-protocolTransition","generalization":[{"$type":"Generalization","$id":"A_preCondition_protocolTransition-_generalization.0","$ns":"uml","general":"A_guard_transition"}],"ownedEnd":[{"$type":"Property","$id":"A_preCondition_protocolTransition-protocolTransition","$ns":"uml","name":"protocolTransition","type":"ProtocolTransition","redefinedProperty":"A_guard_transition-transition","association":"A_preCondition_protocolTransition","lowerValue":[{"$type":"LiteralInteger","$id":"A_preCondition_protocolTransition-protocolTransition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_postCondition_owningTransition","$ns":"uml","name":"A_postCondition_owningTransition","memberEnd":"ProtocolTransition-postCondition A_postCondition_owningTransition-owningTransition","ownedEnd":[{"$type":"Property","$id":"A_postCondition_owningTransition-owningTransition","$ns":"uml","name":"owningTransition","type":"ProtocolTransition","subsettedProperty":"Constraint-context","association":"A_postCondition_owningTransition","lowerValue":[{"$type":"LiteralInteger","$id":"A_postCondition_owningTransition-owningTransition-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_conformance_specificMachine","$ns":"uml","name":"A_conformance_specificMachine","memberEnd":"ProtocolStateMachine-conformance ProtocolConformance-specificMachine"},{"$type":"Association","$id":"A_generalMachine_protocolConformance","$ns":"uml","name":"A_generalMachine_protocolConformance","memberEnd":"ProtocolConformance-generalMachine A_generalMachine_protocolConformance-protocolConformance","ownedEnd":[{"$type":"Property","$id":"A_generalMachine_protocolConformance-protocolConformance","$ns":"uml","name":"protocolConformance","type":"ProtocolConformance","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_generalMachine_protocolConformance","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_generalMachine_protocolConformance-protocolConformance-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_generalMachine_protocolConformance-protocolConformance-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_entry_connectionPointReference","$ns":"uml","name":"A_entry_connectionPointReference","memberEnd":"ConnectionPointReference-entry A_entry_connectionPointReference-connectionPointReference","ownedEnd":[{"$type":"Property","$id":"A_entry_connectionPointReference-connectionPointReference","$ns":"uml","name":"connectionPointReference","type":"ConnectionPointReference","association":"A_entry_connectionPointReference","lowerValue":[{"$type":"LiteralInteger","$id":"A_entry_connectionPointReference-connectionPointReference-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_exit_connectionPointReference","$ns":"uml","name":"A_exit_connectionPointReference","memberEnd":"ConnectionPointReference-exit A_exit_connectionPointReference-connectionPointReference","ownedEnd":[{"$type":"Property","$id":"A_exit_connectionPointReference-connectionPointReference","$ns":"uml","name":"connectionPointReference","type":"ConnectionPointReference","association":"A_exit_connectionPointReference","lowerValue":[{"$type":"LiteralInteger","$id":"A_exit_connectionPointReference-connectionPointReference-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"SimpleClassifiers","$ns":"uml","name":"SimpleClassifiers","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"}],"packagedElement":[{"$type":"Class","$id":"BehavioredClassifier","$ns":"uml","name":"BehavioredClassifier","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"BehavioredClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioredClassifier","body":"A BehavioredClassifier may have InterfaceRealizations, and owns a set of Behaviors one of which may specify the behavior of the BehavioredClassifier itself."}],"ownedRule":[{"$type":"Constraint","$id":"BehavioredClassifier-class_behavior","$ns":"uml","name":"class_behavior","constrainedElement":"BehavioredClassifier","ownedComment":[{"$type":"Comment","$id":"BehavioredClassifier-class_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioredClassifier-class_behavior","body":"If a behavior is classifier behavior, it does not have a specification."}],"specification":[{"$type":"OpaqueExpression","$id":"BehavioredClassifier-class_behavior-_specification","$ns":"uml","language":"OCL","body":"classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"BehavioredClassifier-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"BehavioredClassifier-classifierBehavior","$ns":"uml","name":"classifierBehavior","type":"Behavior","subsettedProperty":"BehavioredClassifier-ownedBehavior","association":"A_classifierBehavior_behavioredClassifier","ownedComment":[{"$type":"Comment","$id":"BehavioredClassifier-classifierBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioredClassifier-classifierBehavior","body":"A Behavior that specifies the behavior of the BehavioredClassifier itself."}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioredClassifier-classifierBehavior-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioredClassifier-interfaceRealization","$ns":"uml","name":"interfaceRealization","type":"InterfaceRealization","aggregation":"composite","subsettedProperty":"Element-ownedElement NamedElement-clientDependency","association":"A_interfaceRealization_implementingClassifier","ownedComment":[{"$type":"Comment","$id":"BehavioredClassifier-interfaceRealization-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioredClassifier-interfaceRealization","body":"The set of InterfaceRealizations owned by the BehavioredClassifier. Interface realizations reference the Interfaces of which the BehavioredClassifier is an implementation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioredClassifier-interfaceRealization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioredClassifier-interfaceRealization-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioredClassifier-ownedBehavior","$ns":"uml","name":"ownedBehavior","type":"Behavior","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedBehavior_behavioredClassifier","ownedComment":[{"$type":"Comment","$id":"BehavioredClassifier-ownedBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioredClassifier-ownedBehavior","body":"Behaviors owned by a BehavioredClassifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioredClassifier-ownedBehavior-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioredClassifier-ownedBehavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"DataType","$ns":"uml","name":"DataType","ownedComment":[{"$type":"Comment","$id":"DataType-_ownedComment.0","$ns":"uml","annotatedElement":"DataType","body":"A DataType is a type whose instances are identified only by their value."}],"generalization":[{"$type":"Generalization","$id":"DataType-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"DataType-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Classifier-attribute Namespace-ownedMember","association":"A_ownedAttribute_datatype","ownedComment":[{"$type":"Comment","$id":"DataType-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"DataType-ownedAttribute","body":"The attributes owned by the DataType."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DataType-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DataType-ownedAttribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DataType-ownedOperation","$ns":"uml","name":"ownedOperation","type":"Operation","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature Namespace-ownedMember","association":"A_ownedOperation_datatype","ownedComment":[{"$type":"Comment","$id":"DataType-ownedOperation-_ownedComment.0","$ns":"uml","annotatedElement":"DataType-ownedOperation","body":"The Operations owned by the DataType."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DataType-ownedOperation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DataType-ownedOperation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Enumeration","$ns":"uml","name":"Enumeration","ownedComment":[{"$type":"Comment","$id":"Enumeration-_ownedComment.0","$ns":"uml","annotatedElement":"Enumeration","body":"An Enumeration is a DataType whose values are enumerated in the model as EnumerationLiterals."}],"ownedRule":[{"$type":"Constraint","$id":"Enumeration-immutable","$ns":"uml","name":"immutable","constrainedElement":"Enumeration","specification":[{"$type":"OpaqueExpression","$id":"Enumeration-immutable-_specification","$ns":"uml","language":"OCL","body":"ownedAttribute->forAll(isReadOnly)"}]}],"generalization":[{"$type":"Generalization","$id":"Enumeration-_generalization.0","$ns":"uml","general":"DataType"}],"ownedAttribute":[{"$type":"Property","$id":"Enumeration-ownedLiteral","$ns":"uml","name":"ownedLiteral","type":"EnumerationLiteral","isOrdered":"true","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedLiteral_enumeration","ownedComment":[{"$type":"Comment","$id":"Enumeration-ownedLiteral-_ownedComment.0","$ns":"uml","annotatedElement":"Enumeration-ownedLiteral","body":"The ordered set of literals owned by this Enumeration."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Enumeration-ownedLiteral-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Enumeration-ownedLiteral-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"EnumerationLiteral","$ns":"uml","name":"EnumerationLiteral","ownedComment":[{"$type":"Comment","$id":"EnumerationLiteral-_ownedComment.0","$ns":"uml","annotatedElement":"EnumerationLiteral","body":"An EnumerationLiteral is a user-defined data value for an Enumeration."}],"generalization":[{"$type":"Generalization","$id":"EnumerationLiteral-_generalization.0","$ns":"uml","general":"InstanceSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"EnumerationLiteral-classifier","$ns":"uml","name":"classifier","type":"Enumeration","isReadOnly":"true","isDerived":"true","redefinedProperty":"InstanceSpecification-classifier","association":"A_classifier_enumerationLiteral","ownedComment":[{"$type":"Comment","$id":"EnumerationLiteral-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"EnumerationLiteral-classifier","body":"The classifier of this EnumerationLiteral derived to be equal to its Enumeration."}]},{"$type":"Property","$id":"EnumerationLiteral-enumeration","$ns":"uml","name":"enumeration","type":"Enumeration","subsettedProperty":"NamedElement-namespace","association":"A_ownedLiteral_enumeration","ownedComment":[{"$type":"Comment","$id":"EnumerationLiteral-enumeration-_ownedComment.0","$ns":"uml","annotatedElement":"EnumerationLiteral-enumeration","body":"The Enumeration that this EnumerationLiteral is a member of."}]}],"ownedOperation":[{"$type":"Operation","$id":"EnumerationLiteral-classifier.1","$ns":"uml","name":"classifier","isQuery":"true","bodyCondition":"EnumerationLiteral-classifier.1-spec","ownedComment":[{"$type":"Comment","$id":"EnumerationLiteral-classifier.1-_ownedComment.0","$ns":"uml","annotatedElement":"EnumerationLiteral-classifier.1","body":"Derivation of Enumeration::/classifier"}],"ownedRule":[{"$type":"Constraint","$id":"EnumerationLiteral-classifier.1-spec","$ns":"uml","name":"spec","constrainedElement":"EnumerationLiteral-classifier.1 EnumerationLiteral-classifier","specification":[{"$type":"OpaqueExpression","$id":"EnumerationLiteral-classifier.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (enumeration)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"EnumerationLiteral-classifier.1-result","$ns":"uml","name":"result","type":"Enumeration","direction":"return"}]}]},{"$type":"Class","$id":"Interface","$ns":"uml","name":"Interface","ownedComment":[{"$type":"Comment","$id":"Interface-_ownedComment.0","$ns":"uml","annotatedElement":"Interface","body":"Interfaces declare coherent services that are implemented by BehavioredClassifiers that implement the Interfaces via InterfaceRealizations."}],"ownedRule":[{"$type":"Constraint","$id":"Interface-visibility","$ns":"uml","name":"visibility","constrainedElement":"Interface","ownedComment":[{"$type":"Comment","$id":"Interface-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-visibility","body":"The visibility of all Features owned by an Interface must be public."}],"specification":[{"$type":"OpaqueExpression","$id":"Interface-visibility-_specification","$ns":"uml","language":"OCL","body":"feature->forAll(visibility = VisibilityKind::public)"}]}],"generalization":[{"$type":"Generalization","$id":"Interface-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"Interface-nestedClassifier","$ns":"uml","name":"nestedClassifier","type":"Classifier","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Namespace-ownedMember","association":"A_nestedClassifier_interface","ownedComment":[{"$type":"Comment","$id":"Interface-nestedClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-nestedClassifier","body":"References all the Classifiers that are defined (nested) within the Interface."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interface-nestedClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-nestedClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interface-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Classifier-attribute Namespace-ownedMember","association":"A_ownedAttribute_interface","ownedComment":[{"$type":"Comment","$id":"Interface-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-ownedAttribute","body":"The attributes (i.e., the Properties) owned by the Interface."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interface-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-ownedAttribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interface-ownedOperation","$ns":"uml","name":"ownedOperation","type":"Operation","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature Namespace-ownedMember","association":"A_ownedOperation_interface","ownedComment":[{"$type":"Comment","$id":"Interface-ownedOperation-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-ownedOperation","body":"The Operations owned by the Interface."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interface-ownedOperation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-ownedOperation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interface-ownedReception","$ns":"uml","name":"ownedReception","type":"Reception","aggregation":"composite","subsettedProperty":"Classifier-feature Namespace-ownedMember","association":"A_ownedReception_interface","ownedComment":[{"$type":"Comment","$id":"Interface-ownedReception-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-ownedReception","body":"Receptions that objects providing this Interface are willing to accept."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interface-ownedReception-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-ownedReception-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interface-protocol","$ns":"uml","name":"protocol","type":"ProtocolStateMachine","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_protocol_interface","ownedComment":[{"$type":"Comment","$id":"Interface-protocol-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-protocol","body":"References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-protocol-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interface-redefinedInterface","$ns":"uml","name":"redefinedInterface","type":"Interface","subsettedProperty":"Classifier-redefinedClassifier","association":"A_redefinedInterface_interface","ownedComment":[{"$type":"Comment","$id":"Interface-redefinedInterface-_ownedComment.0","$ns":"uml","annotatedElement":"Interface-redefinedInterface","body":"References all the Interfaces redefined by this Interface."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interface-redefinedInterface-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interface-redefinedInterface-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InterfaceRealization","$ns":"uml","name":"InterfaceRealization","ownedComment":[{"$type":"Comment","$id":"InterfaceRealization-_ownedComment.0","$ns":"uml","annotatedElement":"InterfaceRealization","body":"An InterfaceRealization is a specialized realization relationship between a BehavioredClassifier and an Interface. This relationship signifies that the realizing BehavioredClassifier conforms to the contract specified by the Interface."}],"generalization":[{"$type":"Generalization","$id":"InterfaceRealization-_generalization.0","$ns":"uml","general":"Realization"}],"ownedAttribute":[{"$type":"Property","$id":"InterfaceRealization-contract","$ns":"uml","name":"contract","type":"Interface","subsettedProperty":"Dependency-supplier","association":"A_contract_interfaceRealization","ownedComment":[{"$type":"Comment","$id":"InterfaceRealization-contract-_ownedComment.0","$ns":"uml","annotatedElement":"InterfaceRealization-contract","body":"References the Interface specifying the conformance contract."}]},{"$type":"Property","$id":"InterfaceRealization-implementingClassifier","$ns":"uml","name":"implementingClassifier","type":"BehavioredClassifier","subsettedProperty":"Dependency-client Element-owner","association":"A_interfaceRealization_implementingClassifier","ownedComment":[{"$type":"Comment","$id":"InterfaceRealization-implementingClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"InterfaceRealization-implementingClassifier","body":"References the BehavioredClassifier that owns this InterfaceRealization, i.e., the BehavioredClassifier that realizes the Interface to which it refers."}]}]},{"$type":"Class","$id":"PrimitiveType","$ns":"uml","name":"PrimitiveType","ownedComment":[{"$type":"Comment","$id":"PrimitiveType-_ownedComment.0","$ns":"uml","annotatedElement":"PrimitiveType","body":"A PrimitiveType defines a predefined DataType, without any substructure. A PrimitiveType may have an algebra and operations defined outside of UML, for example, mathematically."}],"generalization":[{"$type":"Generalization","$id":"PrimitiveType-_generalization.0","$ns":"uml","general":"DataType"}]},{"$type":"Class","$id":"Reception","$ns":"uml","name":"Reception","ownedComment":[{"$type":"Comment","$id":"Reception-_ownedComment.0","$ns":"uml","annotatedElement":"Reception","body":"A Reception is a declaration stating that a Classifier is prepared to react to the receipt of a Signal."}],"ownedRule":[{"$type":"Constraint","$id":"Reception-same_name_as_signal","$ns":"uml","name":"same_name_as_signal","constrainedElement":"Reception","ownedComment":[{"$type":"Comment","$id":"Reception-same_name_as_signal-_ownedComment.0","$ns":"uml","annotatedElement":"Reception-same_name_as_signal","body":"A Reception has the same name as its signal"}],"specification":[{"$type":"OpaqueExpression","$id":"Reception-same_name_as_signal-_specification","$ns":"uml","language":"OCL","body":"name = signal.name"}]},{"$type":"Constraint","$id":"Reception-same_structure_as_signal","$ns":"uml","name":"same_structure_as_signal","constrainedElement":"Reception","ownedComment":[{"$type":"Comment","$id":"Reception-same_structure_as_signal-_ownedComment.0","$ns":"uml","annotatedElement":"Reception-same_structure_as_signal","body":"A Reception's parameters match the ownedAttributes of its signal by name, type, and multiplicity"}],"specification":[{"$type":"OpaqueExpression","$id":"Reception-same_structure_as_signal-_specification","$ns":"uml","language":"OCL","body":"signal.ownedAttribute->size() = ownedParameter->size() and\r\nSequence{1..signal.ownedAttribute->size()}->forAll( i | \r\n    ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and \r\n    ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and\r\n    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and\r\n    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and\r\n    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound()\r\n)"}]}],"generalization":[{"$type":"Generalization","$id":"Reception-_generalization.0","$ns":"uml","general":"BehavioralFeature"}],"ownedAttribute":[{"$type":"Property","$id":"Reception-signal","$ns":"uml","name":"signal","type":"Signal","association":"A_signal_reception","ownedComment":[{"$type":"Comment","$id":"Reception-signal-_ownedComment.0","$ns":"uml","annotatedElement":"Reception-signal","body":"The Signal that this Reception handles."}]}]},{"$type":"Class","$id":"Signal","$ns":"uml","name":"Signal","ownedComment":[{"$type":"Comment","$id":"Signal-_ownedComment.0","$ns":"uml","annotatedElement":"Signal","body":"A Signal is a specification of a kind of communication between objects in which a reaction is asynchronously triggered in the receiver without a reply."}],"generalization":[{"$type":"Generalization","$id":"Signal-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"Signal-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Classifier-attribute Namespace-ownedMember","association":"A_ownedAttribute_owningSignal","ownedComment":[{"$type":"Comment","$id":"Signal-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"Signal-ownedAttribute","body":"The attributes owned by the Signal."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Signal-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Signal-ownedAttribute-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedAttribute_owningSignal","$ns":"uml","name":"A_ownedAttribute_owningSignal","memberEnd":"Signal-ownedAttribute A_ownedAttribute_owningSignal-owningSignal","ownedEnd":[{"$type":"Property","$id":"A_ownedAttribute_owningSignal-owningSignal","$ns":"uml","name":"owningSignal","type":"Signal","subsettedProperty":"A_attribute_classifier-classifier NamedElement-namespace","association":"A_ownedAttribute_owningSignal","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedAttribute_owningSignal-owningSignal-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_signal_reception","$ns":"uml","name":"A_signal_reception","memberEnd":"Reception-signal A_signal_reception-reception","ownedEnd":[{"$type":"Property","$id":"A_signal_reception-reception","$ns":"uml","name":"reception","type":"Reception","association":"A_signal_reception","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signal_reception-reception-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signal_reception-reception-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_contract_interfaceRealization","$ns":"uml","name":"A_contract_interfaceRealization","memberEnd":"InterfaceRealization-contract A_contract_interfaceRealization-interfaceRealization","ownedEnd":[{"$type":"Property","$id":"A_contract_interfaceRealization-interfaceRealization","$ns":"uml","name":"interfaceRealization","type":"InterfaceRealization","subsettedProperty":"A_supplier_supplierDependency-supplierDependency","association":"A_contract_interfaceRealization","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_contract_interfaceRealization-interfaceRealization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_contract_interfaceRealization-interfaceRealization-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_protocol_interface","$ns":"uml","name":"A_protocol_interface","memberEnd":"Interface-protocol A_protocol_interface-interface","ownedEnd":[{"$type":"Property","$id":"A_protocol_interface-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"NamedElement-namespace","association":"A_protocol_interface","ownedComment":[{"$type":"Comment","$id":"A_protocol_interface-interface-_ownedComment.0","$ns":"uml","annotatedElement":"A_protocol_interface-interface","body":"Specifies the namespace in which the protocol state machine is defined."}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_protocol_interface-interface-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedReception_interface","$ns":"uml","name":"A_ownedReception_interface","memberEnd":"Interface-ownedReception A_ownedReception_interface-interface","ownedEnd":[{"$type":"Property","$id":"A_ownedReception_interface-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace","association":"A_ownedReception_interface","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedReception_interface-interface-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedInterface_interface","$ns":"uml","name":"A_redefinedInterface_interface","memberEnd":"Interface-redefinedInterface A_redefinedInterface_interface-interface","ownedEnd":[{"$type":"Property","$id":"A_redefinedInterface_interface-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"A_redefinedClassifier_classifier-classifier","association":"A_redefinedInterface_interface","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedInterface_interface-interface-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedInterface_interface-interface-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_nestedClassifier_interface","$ns":"uml","name":"A_nestedClassifier_interface","memberEnd":"Interface-nestedClassifier A_nestedClassifier_interface-interface","ownedEnd":[{"$type":"Property","$id":"A_nestedClassifier_interface-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_nestedClassifier_interface","lowerValue":[{"$type":"LiteralInteger","$id":"A_nestedClassifier_interface-interface-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedOperation_interface","$ns":"uml","name":"A_ownedOperation_interface","memberEnd":"Interface-ownedOperation Operation-interface"},{"$type":"Association","$id":"A_ownedAttribute_interface","$ns":"uml","name":"A_ownedAttribute_interface","memberEnd":"Interface-ownedAttribute Property-interface"},{"$type":"Association","$id":"A_classifier_enumerationLiteral","$ns":"uml","name":"A_classifier_enumerationLiteral","memberEnd":"EnumerationLiteral-classifier A_classifier_enumerationLiteral-enumerationLiteral","isDerived":"true","generalization":[{"$type":"Generalization","$id":"A_classifier_enumerationLiteral-_generalization.0","$ns":"uml","general":"A_classifier_instanceSpecification"}],"ownedEnd":[{"$type":"Property","$id":"A_classifier_enumerationLiteral-enumerationLiteral","$ns":"uml","name":"enumerationLiteral","type":"EnumerationLiteral","redefinedProperty":"A_classifier_instanceSpecification-instanceSpecification","association":"A_classifier_enumerationLiteral","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_classifier_enumerationLiteral-enumerationLiteral-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_classifier_enumerationLiteral-enumerationLiteral-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedLiteral_enumeration","$ns":"uml","name":"A_ownedLiteral_enumeration","memberEnd":"Enumeration-ownedLiteral EnumerationLiteral-enumeration"},{"$type":"Association","$id":"A_ownedAttribute_datatype","$ns":"uml","name":"A_ownedAttribute_datatype","memberEnd":"DataType-ownedAttribute Property-datatype"},{"$type":"Association","$id":"A_ownedOperation_datatype","$ns":"uml","name":"A_ownedOperation_datatype","memberEnd":"DataType-ownedOperation Operation-datatype"},{"$type":"Association","$id":"A_ownedBehavior_behavioredClassifier","$ns":"uml","name":"A_ownedBehavior_behavioredClassifier","memberEnd":"BehavioredClassifier-ownedBehavior A_ownedBehavior_behavioredClassifier-behavioredClassifier","ownedEnd":[{"$type":"Property","$id":"A_ownedBehavior_behavioredClassifier-behavioredClassifier","$ns":"uml","name":"behavioredClassifier","type":"BehavioredClassifier","subsettedProperty":"NamedElement-namespace","association":"A_ownedBehavior_behavioredClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedBehavior_behavioredClassifier-behavioredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_classifierBehavior_behavioredClassifier","$ns":"uml","name":"A_classifierBehavior_behavioredClassifier","memberEnd":"BehavioredClassifier-classifierBehavior A_classifierBehavior_behavioredClassifier-behavioredClassifier","generalization":[{"$type":"Generalization","$id":"A_classifierBehavior_behavioredClassifier-_generalization.0","$ns":"uml","general":"A_ownedBehavior_behavioredClassifier"}],"ownedEnd":[{"$type":"Property","$id":"A_classifierBehavior_behavioredClassifier-behavioredClassifier","$ns":"uml","name":"behavioredClassifier","type":"BehavioredClassifier","redefinedProperty":"A_ownedBehavior_behavioredClassifier-behavioredClassifier","association":"A_classifierBehavior_behavioredClassifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_classifierBehavior_behavioredClassifier-behavioredClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_interfaceRealization_implementingClassifier","$ns":"uml","name":"A_interfaceRealization_implementingClassifier","memberEnd":"BehavioredClassifier-interfaceRealization InterfaceRealization-implementingClassifier"}]},{"$type":"Package","$id":"Packages","$ns":"uml","name":"Packages","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"CommonStructure"}],"packagedElement":[{"$type":"Class","$id":"Extension","$ns":"uml","name":"Extension","ownedComment":[{"$type":"Comment","$id":"Extension-_ownedComment.0","$ns":"uml","annotatedElement":"Extension","body":"An extension is used to indicate that the properties of a metaclass are extended through a stereotype, and gives the ability to flexibly add (and later remove) stereotypes to classes."}],"ownedRule":[{"$type":"Constraint","$id":"Extension-non_owned_end","$ns":"uml","name":"non_owned_end","constrainedElement":"Extension","ownedComment":[{"$type":"Comment","$id":"Extension-non_owned_end-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-non_owned_end","body":"The non-owned end of an Extension is typed by a Class."}],"specification":[{"$type":"OpaqueExpression","$id":"Extension-non_owned_end-_specification","$ns":"uml","language":"OCL","body":"metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)"}]},{"$type":"Constraint","$id":"Extension-is_binary","$ns":"uml","name":"is_binary","constrainedElement":"Extension","ownedComment":[{"$type":"Comment","$id":"Extension-is_binary-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-is_binary","body":"An Extension is binary, i.e., it has only two memberEnds."}],"specification":[{"$type":"OpaqueExpression","$id":"Extension-is_binary-_specification","$ns":"uml","language":"OCL","body":"memberEnd->size() = 2"}]}],"generalization":[{"$type":"Generalization","$id":"Extension-_generalization.0","$ns":"uml","general":"Association"}],"ownedAttribute":[{"$type":"Property","$id":"Extension-isRequired","$ns":"uml","name":"isRequired","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Extension-isRequired-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-isRequired","body":"Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"Extension-metaclass","$ns":"uml","name":"metaclass","type":"Class","isReadOnly":"true","isDerived":"true","association":"A_extension_metaclass","ownedComment":[{"$type":"Comment","$id":"Extension-metaclass-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-metaclass","body":"References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd."}]},{"$type":"Property","$id":"Extension-ownedEnd","$ns":"uml","name":"ownedEnd","type":"ExtensionEnd","aggregation":"composite","redefinedProperty":"Association-ownedEnd","association":"A_ownedEnd_extension","ownedComment":[{"$type":"Comment","$id":"Extension-ownedEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-ownedEnd","body":"References the end of the extension that is typed by a Stereotype."}]}],"ownedOperation":[{"$type":"Operation","$id":"Extension-isRequired.1","$ns":"uml","name":"isRequired","isQuery":"true","bodyCondition":"Extension-isRequired.1-spec","ownedComment":[{"$type":"Comment","$id":"Extension-isRequired.1-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-isRequired.1","body":"The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1."}],"ownedRule":[{"$type":"Constraint","$id":"Extension-isRequired.1-spec","$ns":"uml","name":"spec","constrainedElement":"Extension-isRequired.1 Extension-isRequired","specification":[{"$type":"OpaqueExpression","$id":"Extension-isRequired.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedEnd.lowerBound() = 1)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Extension-isRequired.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Extension-metaclass.1","$ns":"uml","name":"metaclass","isQuery":"true","bodyCondition":"Extension-metaclass.1-spec","ownedComment":[{"$type":"Comment","$id":"Extension-metaclass.1-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-metaclass.1","body":"The query metaclass() returns the metaclass that is being extended (as opposed to the extending stereotype)."}],"ownedRule":[{"$type":"Constraint","$id":"Extension-metaclass.1-spec","$ns":"uml","name":"spec","constrainedElement":"Extension-metaclass.1 Extension-metaclass","specification":[{"$type":"OpaqueExpression","$id":"Extension-metaclass.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (metaclassEnd().type.oclAsType(Class))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Extension-metaclass.1-result","$ns":"uml","name":"result","type":"Class","direction":"return"}]},{"$type":"Operation","$id":"Extension-metaclassEnd","$ns":"uml","name":"metaclassEnd","isQuery":"true","bodyCondition":"Extension-metaclassEnd-spec","ownedComment":[{"$type":"Comment","$id":"Extension-metaclassEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Extension-metaclassEnd","body":"The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype)."}],"ownedRule":[{"$type":"Constraint","$id":"Extension-metaclassEnd-spec","$ns":"uml","name":"spec","constrainedElement":"Extension-metaclassEnd","specification":[{"$type":"OpaqueExpression","$id":"Extension-metaclassEnd-spec-_specification","$ns":"uml","language":"OCL","body":"result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Extension-metaclassEnd-result","$ns":"uml","name":"result","type":"Property","direction":"return"}]}]},{"$type":"Class","$id":"ExtensionEnd","$ns":"uml","name":"ExtensionEnd","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd","body":"An extension end is used to tie an extension to a stereotype when extending a metaclass.\nThe default multiplicity of an extension end is 0..1."}],"ownedRule":[{"$type":"Constraint","$id":"ExtensionEnd-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ExtensionEnd","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd-multiplicity","body":"The multiplicity of ExtensionEnd is 0..1 or 1."}],"specification":[{"$type":"OpaqueExpression","$id":"ExtensionEnd-multiplicity-_specification","$ns":"uml","language":"OCL","body":"(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1"}]},{"$type":"Constraint","$id":"ExtensionEnd-aggregation","$ns":"uml","name":"aggregation","constrainedElement":"ExtensionEnd","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-aggregation-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd-aggregation","body":"The aggregation of an ExtensionEnd is composite."}],"specification":[{"$type":"OpaqueExpression","$id":"ExtensionEnd-aggregation-_specification","$ns":"uml","language":"OCL","body":"self.aggregation = AggregationKind::composite"}]}],"generalization":[{"$type":"Generalization","$id":"ExtensionEnd-_generalization.0","$ns":"uml","general":"Property"}],"ownedAttribute":[{"$type":"Property","$id":"ExtensionEnd-lower","$ns":"uml","name":"lower","isDerived":"true","redefinedProperty":"MultiplicityElement-lower","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-lower-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd-lower","body":"This redefinition changes the default multiplicity of association ends, since model elements are usually extended by 0 or 1 instance of the extension stereotype."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExtensionEnd-lower-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ExtensionEnd-type","$ns":"uml","name":"type","type":"Stereotype","redefinedProperty":"TypedElement-type","association":"A_type_extensionEnd","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-type-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd-type","body":"References the type of the ExtensionEnd. Note that this association restricts the possible types of an ExtensionEnd to only be Stereotypes."}]}],"ownedOperation":[{"$type":"Operation","$id":"ExtensionEnd-lowerBound","$ns":"uml","name":"lowerBound","isQuery":"true","redefinedOperation":"MultiplicityElement-lowerBound","bodyCondition":"ExtensionEnd-lowerBound-spec","ownedComment":[{"$type":"Comment","$id":"ExtensionEnd-lowerBound-_ownedComment.0","$ns":"uml","annotatedElement":"ExtensionEnd-lowerBound","body":"The query lowerBound() returns the lower bound of the multiplicity as an Integer. This is a redefinition of the default lower bound, which normally, for MultiplicityElements, evaluates to 1 if empty."}],"ownedRule":[{"$type":"Constraint","$id":"ExtensionEnd-lowerBound-spec","$ns":"uml","name":"spec","constrainedElement":"ExtensionEnd-lowerBound","specification":[{"$type":"OpaqueExpression","$id":"ExtensionEnd-lowerBound-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if lowerValue=null then 0 else lowerValue.integerValue() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ExtensionEnd-lowerBound-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExtensionEnd-lowerBound-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Image","$ns":"uml","name":"Image","ownedComment":[{"$type":"Comment","$id":"Image-_ownedComment.0","$ns":"uml","annotatedElement":"Image","body":"Physical definition of a graphical image."}],"generalization":[{"$type":"Generalization","$id":"Image-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"Image-content","$ns":"uml","name":"content","ownedComment":[{"$type":"Comment","$id":"Image-content-_ownedComment.0","$ns":"uml","annotatedElement":"Image-content","body":"This contains the serialization of the image according to the format. The value could represent a bitmap, image such as a GIF file, or drawing 'instructions' using a standard such as Scalable Vector Graphic (SVG) (which is XML based)."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Image-content-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Image-format","$ns":"uml","name":"format","ownedComment":[{"$type":"Comment","$id":"Image-format-_ownedComment.0","$ns":"uml","annotatedElement":"Image-format","body":"This indicates the format of the content, which is how the string content should be interpreted. The following values are reserved: SVG, GIF, PNG, JPG, WMF, EMF, BMP. In addition the prefix 'MIME: ' is also reserved. This option can be used as an alternative to express the reserved values above, for example \"SVG\" could instead be expressed as \"MIME: image/svg+xml\"."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Image-format-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Image-location","$ns":"uml","name":"location","ownedComment":[{"$type":"Comment","$id":"Image-location-_ownedComment.0","$ns":"uml","annotatedElement":"Image-location","body":"This contains a location that can be used by a tool to locate the image as an alternative to embedding it in the stereotype."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Image-location-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Model","$ns":"uml","name":"Model","ownedComment":[{"$type":"Comment","$id":"Model-_ownedComment.0","$ns":"uml","annotatedElement":"Model","body":"A model captures a view of a physical system. It is an abstraction of the physical system, with a certain purpose. This purpose determines what is to be included in the model and what is irrelevant. Thus the model completely describes those aspects of the physical system that are relevant to the purpose of the model, at the appropriate level of detail."}],"generalization":[{"$type":"Generalization","$id":"Model-_generalization.0","$ns":"uml","general":"Package"}],"ownedAttribute":[{"$type":"Property","$id":"Model-viewpoint","$ns":"uml","name":"viewpoint","ownedComment":[{"$type":"Comment","$id":"Model-viewpoint-_ownedComment.0","$ns":"uml","annotatedElement":"Model-viewpoint","body":"The name of the viewpoint that is expressed by a model (this name may refer to a profile definition)."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Model-viewpoint-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Package","$ns":"uml","name":"Package","ownedComment":[{"$type":"Comment","$id":"Package-_ownedComment.0","$ns":"uml","annotatedElement":"Package","body":"A package can have one or more profile applications to indicate which profiles have been applied. Because a profile is a package, it is possible to apply a profile not only to packages, but also to profiles.\nPackage specializes TemplateableElement and PackageableElement specializes ParameterableElement to specify that a package can be used as a template and a PackageableElement as a template parameter.\nA package is used to group elements, and provides a namespace for the grouped elements."}],"ownedRule":[{"$type":"Constraint","$id":"Package-elements_public_or_private","$ns":"uml","name":"elements_public_or_private","constrainedElement":"Package","ownedComment":[{"$type":"Comment","$id":"Package-elements_public_or_private-_ownedComment.0","$ns":"uml","annotatedElement":"Package-elements_public_or_private","body":"If an element that is owned by a package has visibility, it is public or private."}],"specification":[{"$type":"OpaqueExpression","$id":"Package-elements_public_or_private-_specification","$ns":"uml","language":"OCL","body":"packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)"}]}],"generalization":[{"$type":"Generalization","$id":"Package-_generalization.2","$ns":"uml","general":"PackageableElement"},{"$type":"Generalization","$id":"Package-_generalization.0","$ns":"uml","general":"TemplateableElement"},{"$type":"Generalization","$id":"Package-_generalization.1","$ns":"uml","general":"Namespace"}],"ownedAttribute":[{"$type":"Property","$id":"Package-URI","$ns":"uml","name":"URI","ownedComment":[{"$type":"Comment","$id":"Package-URI-_ownedComment.0","$ns":"uml","annotatedElement":"Package-URI","body":"Provides an identifier for the package that can be used for many purposes. A URI is the universally unique identification of the package following the IETF URI specification, RFC 2396 http://www.ietf.org/rfc/rfc2396.txt and it must comply with those syntax rules."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-URI-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-nestedPackage","$ns":"uml","name":"nestedPackage","type":"Package","isDerived":"true","aggregation":"composite","subsettedProperty":"Package-packagedElement","association":"A_nestedPackage_nestingPackage","ownedComment":[{"$type":"Comment","$id":"Package-nestedPackage-_ownedComment.0","$ns":"uml","annotatedElement":"Package-nestedPackage","body":"References the packaged elements that are Packages."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-nestedPackage-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-nestedPackage-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-nestingPackage","$ns":"uml","name":"nestingPackage","type":"Package","subsettedProperty":"A_packagedElement_owningPackage-owningPackage","association":"A_nestedPackage_nestingPackage","ownedComment":[{"$type":"Comment","$id":"Package-nestingPackage-_ownedComment.0","$ns":"uml","annotatedElement":"Package-nestingPackage","body":"References the Package that owns this Package."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-nestingPackage-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-ownedStereotype","$ns":"uml","name":"ownedStereotype","type":"Stereotype","isReadOnly":"true","isDerived":"true","aggregation":"composite","subsettedProperty":"Package-packagedElement","association":"A_ownedStereotype_owningPackage","ownedComment":[{"$type":"Comment","$id":"Package-ownedStereotype-_ownedComment.0","$ns":"uml","annotatedElement":"Package-ownedStereotype","body":"References the Stereotypes that are owned by the Package."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-ownedStereotype-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-ownedStereotype-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-ownedType","$ns":"uml","name":"ownedType","type":"Type","isDerived":"true","aggregation":"composite","subsettedProperty":"Package-packagedElement","association":"A_ownedType_package","ownedComment":[{"$type":"Comment","$id":"Package-ownedType-_ownedComment.0","$ns":"uml","annotatedElement":"Package-ownedType","body":"References the packaged elements that are Types."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-ownedType-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-ownedType-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-packageMerge","$ns":"uml","name":"packageMerge","type":"PackageMerge","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_packageMerge_receivingPackage","ownedComment":[{"$type":"Comment","$id":"Package-packageMerge-_ownedComment.0","$ns":"uml","annotatedElement":"Package-packageMerge","body":"References the PackageMerges that are owned by this Package."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-packageMerge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-packageMerge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-packagedElement","$ns":"uml","name":"packagedElement","type":"PackageableElement","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_packagedElement_owningPackage","ownedComment":[{"$type":"Comment","$id":"Package-packagedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Package-packagedElement","body":"Specifies the packageable elements that are owned by this Package."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-packagedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-packagedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Package-profileApplication","$ns":"uml","name":"profileApplication","type":"ProfileApplication","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_profileApplication_applyingPackage","ownedComment":[{"$type":"Comment","$id":"Package-profileApplication-_ownedComment.0","$ns":"uml","annotatedElement":"Package-profileApplication","body":"References the ProfileApplications that indicate which profiles have been applied to the Package."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-profileApplication-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-profileApplication-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Package-allApplicableStereotypes","$ns":"uml","name":"allApplicableStereotypes","isQuery":"true","bodyCondition":"Package-allApplicableStereotypes-spec","ownedComment":[{"$type":"Comment","$id":"Package-allApplicableStereotypes-_ownedComment.0","$ns":"uml","annotatedElement":"Package-allApplicableStereotypes","body":"The query allApplicableStereotypes() returns all the directly or indirectly owned stereotypes, including stereotypes contained in sub-profiles."}],"ownedRule":[{"$type":"Constraint","$id":"Package-allApplicableStereotypes-spec","$ns":"uml","name":"spec","constrainedElement":"Package-allApplicableStereotypes","specification":[{"$type":"OpaqueExpression","$id":"Package-allApplicableStereotypes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let ownedPackages : Bag(Package) = ownedMember->select(oclIsKindOf(Package))->collect(oclAsType(Package)) in\r\n ownedStereotype->union(ownedPackages.allApplicableStereotypes())->flatten()->asSet()\r\n)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-allApplicableStereotypes-result","$ns":"uml","name":"result","type":"Stereotype","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-allApplicableStereotypes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-allApplicableStereotypes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Package-containingProfile","$ns":"uml","name":"containingProfile","isQuery":"true","bodyCondition":"Package-containingProfile-spec","ownedComment":[{"$type":"Comment","$id":"Package-containingProfile-_ownedComment.0","$ns":"uml","annotatedElement":"Package-containingProfile","body":"The query containingProfile() returns the closest profile directly or indirectly containing this package (or this package itself, if it is a profile)."}],"ownedRule":[{"$type":"Constraint","$id":"Package-containingProfile-spec","$ns":"uml","name":"spec","constrainedElement":"Package-containingProfile","specification":[{"$type":"OpaqueExpression","$id":"Package-containingProfile-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if self.oclIsKindOf(Profile) then \r\n\tself.oclAsType(Profile)\r\nelse\r\n\tself.namespace.oclAsType(Package).containingProfile()\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-containingProfile-result","$ns":"uml","name":"result","type":"Profile","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"Package-containingProfile-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Package-makesVisible","$ns":"uml","name":"makesVisible","isQuery":"true","precondition":"Package-makesVisible-pre","bodyCondition":"Package-makesVisible-spec","ownedComment":[{"$type":"Comment","$id":"Package-makesVisible-_ownedComment.0","$ns":"uml","annotatedElement":"Package-makesVisible","body":"The query makesVisible() defines whether a Package makes an element visible outside itself. Elements with no visibility and elements with public visibility are made visible."}],"ownedRule":[{"$type":"Constraint","$id":"Package-makesVisible-pre","$ns":"uml","name":"pre","constrainedElement":"Package-makesVisible","specification":[{"$type":"OpaqueExpression","$id":"Package-makesVisible-pre-_specification","$ns":"uml","language":"OCL","body":"member->includes(el)"}]},{"$type":"Constraint","$id":"Package-makesVisible-spec","$ns":"uml","name":"spec","constrainedElement":"Package-makesVisible","specification":[{"$type":"OpaqueExpression","$id":"Package-makesVisible-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedMember->includes(el) or\n(elementImport->select(ei|ei.importedElement = VisibilityKind::public)->collect(importedElement.oclAsType(NamedElement))->includes(el)) or\n(packageImport->select(visibility = VisibilityKind::public)->collect(importedPackage.member->includes(el))->notEmpty()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-makesVisible-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Package-makesVisible-el","$ns":"uml","name":"el","type":"NamedElement"}]},{"$type":"Operation","$id":"Package-mustBeOwned","$ns":"uml","name":"mustBeOwned","isQuery":"true","redefinedOperation":"Element-mustBeOwned","bodyCondition":"Package-mustBeOwned-spec","ownedComment":[{"$type":"Comment","$id":"Package-mustBeOwned-_ownedComment.0","$ns":"uml","annotatedElement":"Package-mustBeOwned","body":"The query mustBeOwned() indicates whether elements of this type must have an owner."}],"ownedRule":[{"$type":"Constraint","$id":"Package-mustBeOwned-spec","$ns":"uml","name":"spec","constrainedElement":"Package-mustBeOwned","specification":[{"$type":"OpaqueExpression","$id":"Package-mustBeOwned-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-mustBeOwned-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Package-nestedPackage.1","$ns":"uml","name":"nestedPackage","isQuery":"true","bodyCondition":"Package-nestedPackage.1-spec","ownedComment":[{"$type":"Comment","$id":"Package-nestedPackage.1-_ownedComment.0","$ns":"uml","annotatedElement":"Package-nestedPackage.1","body":"Derivation for Package::/nestedPackage "}],"ownedRule":[{"$type":"Constraint","$id":"Package-nestedPackage.1-spec","$ns":"uml","name":"spec","constrainedElement":"Package-nestedPackage.1 Package-nestedPackage","specification":[{"$type":"OpaqueExpression","$id":"Package-nestedPackage.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (packagedElement->select(oclIsKindOf(Package))->collect(oclAsType(Package))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-nestedPackage.1-result","$ns":"uml","name":"result","type":"Package","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-nestedPackage.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-nestedPackage.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Package-ownedStereotype.1","$ns":"uml","name":"ownedStereotype","isQuery":"true","bodyCondition":"Package-ownedStereotype.1-spec","ownedComment":[{"$type":"Comment","$id":"Package-ownedStereotype.1-_ownedComment.0","$ns":"uml","annotatedElement":"Package-ownedStereotype.1","body":"Derivation for Package::/ownedStereotype "}],"ownedRule":[{"$type":"Constraint","$id":"Package-ownedStereotype.1-spec","$ns":"uml","name":"spec","constrainedElement":"Package-ownedStereotype.1 Package-ownedStereotype","specification":[{"$type":"OpaqueExpression","$id":"Package-ownedStereotype.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (packagedElement->select(oclIsKindOf(Stereotype))->collect(oclAsType(Stereotype))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-ownedStereotype.1-result","$ns":"uml","name":"result","type":"Stereotype","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-ownedStereotype.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-ownedStereotype.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Package-ownedType.1","$ns":"uml","name":"ownedType","isQuery":"true","bodyCondition":"Package-ownedType.1-spec","ownedComment":[{"$type":"Comment","$id":"Package-ownedType.1-_ownedComment.0","$ns":"uml","annotatedElement":"Package-ownedType.1","body":"Derivation for Package::/ownedType"}],"ownedRule":[{"$type":"Constraint","$id":"Package-ownedType.1-spec","$ns":"uml","name":"spec","constrainedElement":"Package-ownedType.1 Package-ownedType","specification":[{"$type":"OpaqueExpression","$id":"Package-ownedType.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (packagedElement->select(oclIsKindOf(Type))->collect(oclAsType(Type))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-ownedType.1-result","$ns":"uml","name":"result","type":"Type","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-ownedType.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-ownedType.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Package-visibleMembers","$ns":"uml","name":"visibleMembers","isQuery":"true","bodyCondition":"Package-visibleMembers-spec","ownedComment":[{"$type":"Comment","$id":"Package-visibleMembers-_ownedComment.0","$ns":"uml","annotatedElement":"Package-visibleMembers","body":"The query visibleMembers() defines which members of a Package can be accessed outside it."}],"ownedRule":[{"$type":"Constraint","$id":"Package-visibleMembers-spec","$ns":"uml","name":"spec","constrainedElement":"Package-visibleMembers","specification":[{"$type":"OpaqueExpression","$id":"Package-visibleMembers-spec-_specification","$ns":"uml","language":"OCL","body":"result = (member->select( m | m.oclIsKindOf(PackageableElement) and self.makesVisible(m))->collect(oclAsType(PackageableElement))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Package-visibleMembers-result","$ns":"uml","name":"result","type":"PackageableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Package-visibleMembers-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Package-visibleMembers-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"PackageMerge","$ns":"uml","name":"PackageMerge","ownedComment":[{"$type":"Comment","$id":"PackageMerge-_ownedComment.0","$ns":"uml","annotatedElement":"PackageMerge","body":"A package merge defines how the contents of one package are extended by the contents of another package."}],"generalization":[{"$type":"Generalization","$id":"PackageMerge-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"PackageMerge-mergedPackage","$ns":"uml","name":"mergedPackage","type":"Package","subsettedProperty":"DirectedRelationship-target","association":"A_mergedPackage_packageMerge","ownedComment":[{"$type":"Comment","$id":"PackageMerge-mergedPackage-_ownedComment.0","$ns":"uml","annotatedElement":"PackageMerge-mergedPackage","body":"References the Package that is to be merged with the receiving package of the PackageMerge."}]},{"$type":"Property","$id":"PackageMerge-receivingPackage","$ns":"uml","name":"receivingPackage","type":"Package","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_packageMerge_receivingPackage","ownedComment":[{"$type":"Comment","$id":"PackageMerge-receivingPackage-_ownedComment.0","$ns":"uml","annotatedElement":"PackageMerge-receivingPackage","body":"References the Package that is being extended with the contents of the merged package of the PackageMerge."}]}]},{"$type":"Class","$id":"Profile","$ns":"uml","name":"Profile","ownedComment":[{"$type":"Comment","$id":"Profile-_ownedComment.0","$ns":"uml","annotatedElement":"Profile","body":"A profile defines limited extensions to a reference metamodel with the purpose of adapting the metamodel to a specific platform or domain."}],"ownedRule":[{"$type":"Constraint","$id":"Profile-metaclass_reference_not_specialized","$ns":"uml","name":"metaclass_reference_not_specialized","constrainedElement":"Profile","ownedComment":[{"$type":"Comment","$id":"Profile-metaclass_reference_not_specialized-_ownedComment.0","$ns":"uml","annotatedElement":"Profile-metaclass_reference_not_specialized","body":"An element imported as a metaclassReference is not specialized or generalized in a Profile."}],"specification":[{"$type":"OpaqueExpression","$id":"Profile-metaclass_reference_not_specialized-_specification","$ns":"uml","language":"OCL","body":"metaclassReference.importedElement->\r\n\tselect(c | c.oclIsKindOf(Classifier) and\r\n\t\t(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()\r\nand \r\npackagedElement->\r\n    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->\r\n       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()"}]},{"$type":"Constraint","$id":"Profile-references_same_metamodel","$ns":"uml","name":"references_same_metamodel","constrainedElement":"Profile","ownedComment":[{"$type":"Comment","$id":"Profile-references_same_metamodel-_ownedComment.0","$ns":"uml","annotatedElement":"Profile-references_same_metamodel","body":"All elements imported either as metaclassReferences or through metamodelReferences are members of the same base reference metamodel."}],"specification":[{"$type":"OpaqueExpression","$id":"Profile-references_same_metamodel-_specification","$ns":"uml","language":"OCL","body":"metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->\r\n  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Profile-_generalization.0","$ns":"uml","general":"Package"}],"ownedAttribute":[{"$type":"Property","$id":"Profile-metaclassReference","$ns":"uml","name":"metaclassReference","type":"ElementImport","aggregation":"composite","subsettedProperty":"Namespace-elementImport","association":"A_metaclassReference_profile","ownedComment":[{"$type":"Comment","$id":"Profile-metaclassReference-_ownedComment.0","$ns":"uml","annotatedElement":"Profile-metaclassReference","body":"References a metaclass that may be extended."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Profile-metaclassReference-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Profile-metaclassReference-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Profile-metamodelReference","$ns":"uml","name":"metamodelReference","type":"PackageImport","aggregation":"composite","subsettedProperty":"Namespace-packageImport","association":"A_metamodelReference_profile","ownedComment":[{"$type":"Comment","$id":"Profile-metamodelReference-_ownedComment.0","$ns":"uml","annotatedElement":"Profile-metamodelReference","body":"References a package containing (directly or indirectly) metaclasses that may be extended."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Profile-metamodelReference-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Profile-metamodelReference-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ProfileApplication","$ns":"uml","name":"ProfileApplication","ownedComment":[{"$type":"Comment","$id":"ProfileApplication-_ownedComment.0","$ns":"uml","annotatedElement":"ProfileApplication","body":"A profile application is used to show which profiles have been applied to a package."}],"generalization":[{"$type":"Generalization","$id":"ProfileApplication-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"ProfileApplication-appliedProfile","$ns":"uml","name":"appliedProfile","type":"Profile","subsettedProperty":"DirectedRelationship-target","association":"A_appliedProfile_profileApplication","ownedComment":[{"$type":"Comment","$id":"ProfileApplication-appliedProfile-_ownedComment.0","$ns":"uml","annotatedElement":"ProfileApplication-appliedProfile","body":"References the Profiles that are applied to a Package through this ProfileApplication."}]},{"$type":"Property","$id":"ProfileApplication-applyingPackage","$ns":"uml","name":"applyingPackage","type":"Package","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_profileApplication_applyingPackage","ownedComment":[{"$type":"Comment","$id":"ProfileApplication-applyingPackage-_ownedComment.0","$ns":"uml","annotatedElement":"ProfileApplication-applyingPackage","body":"The package that owns the profile application."}]},{"$type":"Property","$id":"ProfileApplication-isStrict","$ns":"uml","name":"isStrict","ownedComment":[{"$type":"Comment","$id":"ProfileApplication-isStrict-_ownedComment.0","$ns":"uml","annotatedElement":"ProfileApplication-isStrict","body":"Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ProfileApplication-isStrict-_defaultValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Stereotype","$ns":"uml","name":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype","body":"A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass."}],"ownedRule":[{"$type":"Constraint","$id":"Stereotype-binaryAssociationsOnly","$ns":"uml","name":"binaryAssociationsOnly","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-binaryAssociationsOnly-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-binaryAssociationsOnly","body":"Stereotypes may only participate in binary associations."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-binaryAssociationsOnly-_specification","$ns":"uml","language":"OCL","body":"ownedAttribute.association->forAll(memberEnd->size()=2)"}]},{"$type":"Constraint","$id":"Stereotype-generalize","$ns":"uml","name":"generalize","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-generalize-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-generalize","body":"A Stereotype may only generalize or specialize another Stereotype."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-generalize-_specification","$ns":"uml","language":"OCL","body":"allParents()->forAll(oclIsKindOf(Stereotype)) \r\nand Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))\r\n"}]},{"$type":"Constraint","$id":"Stereotype-name_not_clash","$ns":"uml","name":"name_not_clash","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-name_not_clash-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-name_not_clash","body":"Stereotype names should not clash with keyword names for the extended model element."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-name_not_clash-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Stereotype-associationEndOwnership","$ns":"uml","name":"associationEndOwnership","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-associationEndOwnership-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-associationEndOwnership","body":"Where a stereotype’s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-associationEndOwnership-_specification","$ns":"uml","language":"OCL","body":"ownedAttribute\r\n->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))\r\n->forAll(opposite.owner = association)"}]},{"$type":"Constraint","$id":"Stereotype-base_property_upper_bound","$ns":"uml","name":"base_property_upper_bound","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-base_property_upper_bound-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-base_property_upper_bound","body":"The upper bound of base-properties is exactly 1."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-base_property_upper_bound-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Stereotype-base_property_multiplicity_single_extension","$ns":"uml","name":"base_property_multiplicity_single_extension","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-base_property_multiplicity_single_extension-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-base_property_multiplicity_single_extension","body":"If a Stereotype extends only one metaclass, the multiplicity of the corresponding base-property shall be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-base_property_multiplicity_single_extension-_specification","$ns":"uml"}]},{"$type":"Constraint","$id":"Stereotype-base_property_multiplicity_multiple_extension","$ns":"uml","name":"base_property_multiplicity_multiple_extension","constrainedElement":"Stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-base_property_multiplicity_multiple_extension-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-base_property_multiplicity_multiple_extension","body":"If a Stereotype extends more than one metaclass, the multiplicity of the corresponding base-properties shall be [0..1]. At any point in time, only one of these base-properties can contain a metaclass instance during runtime."}],"specification":[{"$type":"OpaqueExpression","$id":"Stereotype-base_property_multiplicity_multiple_extension-_specification","$ns":"uml"}]}],"generalization":[{"$type":"Generalization","$id":"Stereotype-_generalization.0","$ns":"uml","general":"Class"}],"ownedAttribute":[{"$type":"Property","$id":"Stereotype-icon","$ns":"uml","name":"icon","type":"Image","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_icon_stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-icon-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-icon","body":"Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Stereotype-icon-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Stereotype-icon-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Stereotype-profile","$ns":"uml","name":"profile","type":"Profile","isReadOnly":"true","isDerived":"true","association":"A_profile_stereotype","ownedComment":[{"$type":"Comment","$id":"Stereotype-profile-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-profile","body":"The profile that directly or indirectly contains this stereotype."}]}],"ownedOperation":[{"$type":"Operation","$id":"Stereotype-containingProfile","$ns":"uml","name":"containingProfile","isQuery":"true","bodyCondition":"Stereotype-containingProfile-spec","ownedComment":[{"$type":"Comment","$id":"Stereotype-containingProfile-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-containingProfile","body":"The query containingProfile returns the closest profile directly or indirectly containing this stereotype."}],"ownedRule":[{"$type":"Constraint","$id":"Stereotype-containingProfile-spec","$ns":"uml","name":"spec","constrainedElement":"Stereotype-containingProfile","specification":[{"$type":"OpaqueExpression","$id":"Stereotype-containingProfile-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.namespace.oclAsType(Package).containingProfile())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Stereotype-containingProfile-result","$ns":"uml","name":"result","type":"Profile","direction":"return"}]},{"$type":"Operation","$id":"Stereotype-profile.1","$ns":"uml","name":"profile","isQuery":"true","bodyCondition":"Stereotype-profile.1-spec","ownedComment":[{"$type":"Comment","$id":"Stereotype-profile.1-_ownedComment.0","$ns":"uml","annotatedElement":"Stereotype-profile.1","body":"A stereotype must be contained, directly or indirectly, in a profile."}],"ownedRule":[{"$type":"Constraint","$id":"Stereotype-profile.1-spec","$ns":"uml","name":"spec","constrainedElement":"Stereotype-profile.1 Stereotype-profile","specification":[{"$type":"OpaqueExpression","$id":"Stereotype-profile.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.containingProfile())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Stereotype-profile.1-result","$ns":"uml","name":"result","type":"Profile","direction":"return"}]}]},{"$type":"Association","$id":"A_profile_stereotype","$ns":"uml","name":"A_profile_stereotype","memberEnd":"Stereotype-profile A_profile_stereotype-stereotype","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_profile_stereotype-stereotype","$ns":"uml","name":"stereotype","type":"Stereotype","association":"A_profile_stereotype","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_profile_stereotype-stereotype-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_profile_stereotype-stereotype-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_icon_stereotype","$ns":"uml","name":"A_icon_stereotype","memberEnd":"Stereotype-icon A_icon_stereotype-stereotype","ownedEnd":[{"$type":"Property","$id":"A_icon_stereotype-stereotype","$ns":"uml","name":"stereotype","type":"Stereotype","subsettedProperty":"Element-owner","association":"A_icon_stereotype","lowerValue":[{"$type":"LiteralInteger","$id":"A_icon_stereotype-stereotype-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_appliedProfile_profileApplication","$ns":"uml","name":"A_appliedProfile_profileApplication","memberEnd":"ProfileApplication-appliedProfile A_appliedProfile_profileApplication-profileApplication","ownedEnd":[{"$type":"Property","$id":"A_appliedProfile_profileApplication-profileApplication","$ns":"uml","name":"profileApplication","type":"ProfileApplication","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_appliedProfile_profileApplication","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_appliedProfile_profileApplication-profileApplication-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_appliedProfile_profileApplication-profileApplication-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_metaclassReference_profile","$ns":"uml","name":"A_metaclassReference_profile","memberEnd":"Profile-metaclassReference A_metaclassReference_profile-profile","ownedEnd":[{"$type":"Property","$id":"A_metaclassReference_profile-profile","$ns":"uml","name":"profile","type":"Profile","subsettedProperty":"ElementImport-importingNamespace","association":"A_metaclassReference_profile","lowerValue":[{"$type":"LiteralInteger","$id":"A_metaclassReference_profile-profile-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_metamodelReference_profile","$ns":"uml","name":"A_metamodelReference_profile","memberEnd":"Profile-metamodelReference A_metamodelReference_profile-profile","ownedEnd":[{"$type":"Property","$id":"A_metamodelReference_profile-profile","$ns":"uml","name":"profile","type":"Profile","subsettedProperty":"PackageImport-importingNamespace","association":"A_metamodelReference_profile","lowerValue":[{"$type":"LiteralInteger","$id":"A_metamodelReference_profile-profile-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_mergedPackage_packageMerge","$ns":"uml","name":"A_mergedPackage_packageMerge","memberEnd":"PackageMerge-mergedPackage A_mergedPackage_packageMerge-packageMerge","ownedEnd":[{"$type":"Property","$id":"A_mergedPackage_packageMerge-packageMerge","$ns":"uml","name":"packageMerge","type":"PackageMerge","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_mergedPackage_packageMerge","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_mergedPackage_packageMerge-packageMerge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_mergedPackage_packageMerge-packageMerge-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_packagedElement_owningPackage","$ns":"uml","name":"A_packagedElement_owningPackage","memberEnd":"Package-packagedElement A_packagedElement_owningPackage-owningPackage","ownedEnd":[{"$type":"Property","$id":"A_packagedElement_owningPackage-owningPackage","$ns":"uml","name":"owningPackage","type":"Package","subsettedProperty":"NamedElement-namespace","association":"A_packagedElement_owningPackage","lowerValue":[{"$type":"LiteralInteger","$id":"A_packagedElement_owningPackage-owningPackage-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_packageMerge_receivingPackage","$ns":"uml","name":"A_packageMerge_receivingPackage","memberEnd":"Package-packageMerge PackageMerge-receivingPackage"},{"$type":"Association","$id":"A_nestedPackage_nestingPackage","$ns":"uml","name":"A_nestedPackage_nestingPackage","memberEnd":"Package-nestedPackage Package-nestingPackage"},{"$type":"Association","$id":"A_profileApplication_applyingPackage","$ns":"uml","name":"A_profileApplication_applyingPackage","memberEnd":"Package-profileApplication ProfileApplication-applyingPackage"},{"$type":"Association","$id":"A_ownedType_package","$ns":"uml","name":"A_ownedType_package","memberEnd":"Package-ownedType Type-package"},{"$type":"Association","$id":"A_ownedStereotype_owningPackage","$ns":"uml","name":"A_ownedStereotype_owningPackage","memberEnd":"Package-ownedStereotype A_ownedStereotype_owningPackage-owningPackage","isDerived":"true","generalization":[{"$type":"Generalization","$id":"A_ownedStereotype_owningPackage-_generalization.0","$ns":"uml","general":"A_packagedElement_owningPackage"}],"ownedEnd":[{"$type":"Property","$id":"A_ownedStereotype_owningPackage-owningPackage","$ns":"uml","name":"owningPackage","type":"Package","redefinedProperty":"A_packagedElement_owningPackage-owningPackage","association":"A_ownedStereotype_owningPackage"}]},{"$type":"Association","$id":"A_type_extensionEnd","$ns":"uml","name":"A_type_extensionEnd","memberEnd":"ExtensionEnd-type A_type_extensionEnd-extensionEnd","ownedEnd":[{"$type":"Property","$id":"A_type_extensionEnd-extensionEnd","$ns":"uml","name":"extensionEnd","type":"ExtensionEnd","subsettedProperty":"A_type_typedElement-typedElement","association":"A_type_extensionEnd","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_type_extensionEnd-extensionEnd-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_type_extensionEnd-extensionEnd-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedEnd_extension","$ns":"uml","name":"A_ownedEnd_extension","memberEnd":"Extension-ownedEnd A_ownedEnd_extension-extension","ownedEnd":[{"$type":"Property","$id":"A_ownedEnd_extension-extension","$ns":"uml","name":"extension","type":"Extension","subsettedProperty":"Property-owningAssociation","association":"A_ownedEnd_extension"}]}]},{"$type":"Package","$id":"Interactions","$ns":"uml","name":"Interactions","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"CommonStructure"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"SimpleClassifiers"},{"$type":"PackageImport","$id":"_packageImport.3","$ns":"uml","importedPackage":"Values"}],"packagedElement":[{"$type":"Class","$id":"ActionExecutionSpecification","$ns":"uml","name":"ActionExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"ActionExecutionSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"ActionExecutionSpecification","body":"An ActionExecutionSpecification is a kind of ExecutionSpecification representing the execution of an Action."}],"ownedRule":[{"$type":"Constraint","$id":"ActionExecutionSpecification-action_referenced","$ns":"uml","name":"action_referenced","constrainedElement":"ActionExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"ActionExecutionSpecification-action_referenced-_ownedComment.0","$ns":"uml","annotatedElement":"ActionExecutionSpecification-action_referenced","body":"The Action referenced by the ActionExecutionSpecification must be owned by the Interaction owning that ActionExecutionSpecification."}],"specification":[{"$type":"OpaqueExpression","$id":"ActionExecutionSpecification-action_referenced-_specification","$ns":"uml","language":"OCL","body":"(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) and\r\nlet parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union(\r\nenclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->\r\ncollect(enclosingInteraction).oclAsType(Interaction)->asSet()) in\r\n(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction"}]}],"generalization":[{"$type":"Generalization","$id":"ActionExecutionSpecification-_generalization.0","$ns":"uml","general":"ExecutionSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"ActionExecutionSpecification-action","$ns":"uml","name":"action","type":"Action","association":"A_action_actionExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"ActionExecutionSpecification-action-_ownedComment.0","$ns":"uml","annotatedElement":"ActionExecutionSpecification-action","body":"Action whose execution is occurring."}]}]},{"$type":"Class","$id":"BehaviorExecutionSpecification","$ns":"uml","name":"BehaviorExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"BehaviorExecutionSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"BehaviorExecutionSpecification","body":"A BehaviorExecutionSpecification is a kind of ExecutionSpecification representing the execution of a Behavior."}],"generalization":[{"$type":"Generalization","$id":"BehaviorExecutionSpecification-_generalization.0","$ns":"uml","general":"ExecutionSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"BehaviorExecutionSpecification-behavior","$ns":"uml","name":"behavior","type":"Behavior","association":"A_behavior_behaviorExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"BehaviorExecutionSpecification-behavior-_ownedComment.0","$ns":"uml","annotatedElement":"BehaviorExecutionSpecification-behavior","body":"Behavior whose execution is occurring."}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehaviorExecutionSpecification-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"CombinedFragment","$ns":"uml","name":"CombinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment","body":"A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner."}],"ownedRule":[{"$type":"Constraint","$id":"CombinedFragment-break","$ns":"uml","name":"break","constrainedElement":"CombinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-break-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-break","body":"If the interactionOperator is break, the corresponding InteractionOperand must cover all Lifelines covered by the enclosing InteractionFragment."}],"specification":[{"$type":"OpaqueExpression","$id":"CombinedFragment-break-_specification","$ns":"uml","language":"OCL","body":"interactionOperator=InteractionOperatorKind::break  implies   \r\nenclosingInteraction.oclAsType(InteractionFragment)->asSet()->union(\r\n   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()"}]},{"$type":"Constraint","$id":"CombinedFragment-consider_and_ignore","$ns":"uml","name":"consider_and_ignore","constrainedElement":"CombinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-consider_and_ignore-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-consider_and_ignore","body":"The interaction operators 'consider' and 'ignore' can only be used for the ConsiderIgnoreFragment subtype of CombinedFragment"}],"specification":[{"$type":"OpaqueExpression","$id":"CombinedFragment-consider_and_ignore-_specification","$ns":"uml","language":"OCL","body":"((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)"}]},{"$type":"Constraint","$id":"CombinedFragment-opt_loop_break_neg","$ns":"uml","name":"opt_loop_break_neg","constrainedElement":"CombinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-opt_loop_break_neg-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-opt_loop_break_neg","body":"If the interactionOperator is opt, loop, break, assert or neg, there must be exactly one operand."}],"specification":[{"$type":"OpaqueExpression","$id":"CombinedFragment-opt_loop_break_neg-_specification","$ns":"uml","language":"OCL","body":"(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or\r\ninteractionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or\r\ninteractionOperator = InteractionOperatorKind::neg)\r\nimplies operand->size()=1"}]}],"generalization":[{"$type":"Generalization","$id":"CombinedFragment-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"CombinedFragment-cfragmentGate","$ns":"uml","name":"cfragmentGate","type":"Gate","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_cfragmentGate_combinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-cfragmentGate-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-cfragmentGate","body":"Specifies the gates that form the interface between this CombinedFragment and its surroundings"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CombinedFragment-cfragmentGate-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CombinedFragment-cfragmentGate-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"CombinedFragment-interactionOperator","$ns":"uml","name":"interactionOperator","type":"InteractionOperatorKind","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-interactionOperator-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-interactionOperator","body":"Specifies the operation which defines the semantics of this combination of InteractionFragments."}],"defaultValue":[{"$type":"InstanceValue","$id":"CombinedFragment-interactionOperator-_defaultValue","$ns":"uml","type":"InteractionOperatorKind","instance":"InteractionOperatorKind-seq"}]},{"$type":"Property","$id":"CombinedFragment-operand","$ns":"uml","name":"operand","type":"InteractionOperand","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_operand_combinedFragment","ownedComment":[{"$type":"Comment","$id":"CombinedFragment-operand-_ownedComment.0","$ns":"uml","annotatedElement":"CombinedFragment-operand","body":"The set of operands of the combined fragment."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CombinedFragment-operand-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"ConsiderIgnoreFragment","$ns":"uml","name":"ConsiderIgnoreFragment","ownedComment":[{"$type":"Comment","$id":"ConsiderIgnoreFragment-_ownedComment.0","$ns":"uml","annotatedElement":"ConsiderIgnoreFragment","body":"A ConsiderIgnoreFragment is a kind of CombinedFragment that is used for the consider and ignore cases, which require lists of pertinent Messages to be specified."}],"ownedRule":[{"$type":"Constraint","$id":"ConsiderIgnoreFragment-consider_or_ignore","$ns":"uml","name":"consider_or_ignore","constrainedElement":"ConsiderIgnoreFragment","ownedComment":[{"$type":"Comment","$id":"ConsiderIgnoreFragment-consider_or_ignore-_ownedComment.0","$ns":"uml","annotatedElement":"ConsiderIgnoreFragment-consider_or_ignore","body":"The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'."}],"specification":[{"$type":"OpaqueExpression","$id":"ConsiderIgnoreFragment-consider_or_ignore-_specification","$ns":"uml","language":"OCL","body":"(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)"}]},{"$type":"Constraint","$id":"ConsiderIgnoreFragment-type","$ns":"uml","name":"type","constrainedElement":"ConsiderIgnoreFragment","ownedComment":[{"$type":"Comment","$id":"ConsiderIgnoreFragment-type-_ownedComment.0","$ns":"uml","annotatedElement":"ConsiderIgnoreFragment-type","body":"The NamedElements must be of a type of element that can be a signature for a message (i.e.., an Operation, or a Signal)."}],"specification":[{"$type":"OpaqueExpression","$id":"ConsiderIgnoreFragment-type-_specification","$ns":"uml","language":"OCL","body":"message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))"}]}],"generalization":[{"$type":"Generalization","$id":"ConsiderIgnoreFragment-_generalization.0","$ns":"uml","general":"CombinedFragment"}],"ownedAttribute":[{"$type":"Property","$id":"ConsiderIgnoreFragment-message","$ns":"uml","name":"message","type":"NamedElement","association":"A_message_considerIgnoreFragment","ownedComment":[{"$type":"Comment","$id":"ConsiderIgnoreFragment-message-_ownedComment.0","$ns":"uml","annotatedElement":"ConsiderIgnoreFragment-message","body":"The set of messages that apply to this fragment."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConsiderIgnoreFragment-message-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConsiderIgnoreFragment-message-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Continuation","$ns":"uml","name":"Continuation","ownedComment":[{"$type":"Comment","$id":"Continuation-_ownedComment.0","$ns":"uml","annotatedElement":"Continuation","body":"A Continuation is a syntactic way to define continuations of different branches of an alternative CombinedFragment. Continuations are intuitively similar to labels representing intermediate points in a flow of control."}],"ownedRule":[{"$type":"Constraint","$id":"Continuation-first_or_last_interaction_fragment","$ns":"uml","name":"first_or_last_interaction_fragment","constrainedElement":"Continuation","ownedComment":[{"$type":"Comment","$id":"Continuation-first_or_last_interaction_fragment-_ownedComment.0","$ns":"uml","annotatedElement":"Continuation-first_or_last_interaction_fragment","body":"Continuations always occur as the very first InteractionFragment or the very last InteractionFragment of the enclosing InteractionOperand."}],"specification":[{"$type":"OpaqueExpression","$id":"Continuation-first_or_last_interaction_fragment-_specification","$ns":"uml","language":"OCL","body":" enclosingOperand->notEmpty() and \r\n let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in \r\n   ( peerFragments->notEmpty() and \r\n   ((peerFragments->first() = self) or  (peerFragments->last() = self)))"}]},{"$type":"Constraint","$id":"Continuation-same_name","$ns":"uml","name":"same_name","constrainedElement":"Continuation","ownedComment":[{"$type":"Comment","$id":"Continuation-same_name-_ownedComment.0","$ns":"uml","annotatedElement":"Continuation-same_name","body":"Across all Interaction instances having the same context value, every Lifeline instance covered by a Continuation (self) must be common with one covered Lifeline instance of all other Continuation instances with the same name as self, and every Lifeline instance covered by a Continuation instance with the same name as self must be common with one covered Lifeline instance of self. Lifeline instances are common if they have the same selector and represents associationEnd values."}],"specification":[{"$type":"OpaqueExpression","$id":"Continuation-same_name-_specification","$ns":"uml","language":"OCL","body":"enclosingOperand.combinedFragment->notEmpty() and\r\nlet parentInteraction : Set(Interaction) = \r\nenclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->\r\ncollect(enclosingInteraction).oclAsType(Interaction)->asSet()\r\nin \r\n(parentInteraction->size() = 1) \r\nand let peerInteractions : Set(Interaction) =\r\n (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)->\r\n select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in\r\n (peerInteractions->notEmpty()) and \r\n  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment->\r\n select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in\r\n   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->\r\n   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->\r\n   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->\r\n   forAll(c : Continuation |  (c.name = self.name) implies \r\n  (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self\r\n  self.covered->asSet()->\r\n  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))\r\n   and\r\n (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c\r\n c.covered->asSet()->\r\n  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))\r\n  )"}]},{"$type":"Constraint","$id":"Continuation-global","$ns":"uml","name":"global","constrainedElement":"Continuation","ownedComment":[{"$type":"Comment","$id":"Continuation-global-_ownedComment.0","$ns":"uml","annotatedElement":"Continuation-global","body":"Continuations are always global in the enclosing InteractionFragment e.g., it always covers all Lifelines covered by the enclosing InteractionOperator."}],"specification":[{"$type":"OpaqueExpression","$id":"Continuation-global-_specification","$ns":"uml","language":"OCL","body":"enclosingOperand->notEmpty() and\r\n  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in \r\n    (operandLifelines->notEmpty() and \r\n    operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))"}]}],"generalization":[{"$type":"Generalization","$id":"Continuation-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"Continuation-setting","$ns":"uml","name":"setting","ownedComment":[{"$type":"Comment","$id":"Continuation-setting-_ownedComment.0","$ns":"uml","annotatedElement":"Continuation-setting","body":"True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Continuation-setting-_defaultValue","$ns":"uml","value":"true"}]}]},{"$type":"Class","$id":"DestructionOccurrenceSpecification","$ns":"uml","name":"DestructionOccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"DestructionOccurrenceSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"DestructionOccurrenceSpecification","body":"A DestructionOccurenceSpecification models the destruction of an object."}],"ownedRule":[{"$type":"Constraint","$id":"DestructionOccurrenceSpecification-no_occurrence_specifications_below","$ns":"uml","name":"no_occurrence_specifications_below","constrainedElement":"DestructionOccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"DestructionOccurrenceSpecification-no_occurrence_specifications_below-_ownedComment.0","$ns":"uml","annotatedElement":"DestructionOccurrenceSpecification-no_occurrence_specifications_below","body":"No other OccurrenceSpecifications on a given Lifeline in an InteractionOperand may appear below a DestructionOccurrenceSpecification."}],"specification":[{"$type":"OpaqueExpression","$id":"DestructionOccurrenceSpecification-no_occurrence_specifications_below-_specification","$ns":"uml","language":"OCL","body":"let o : InteractionOperand = enclosingOperand in o->notEmpty() and \r\nlet peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)\r\nin peerEvents->last() = self"}]}],"generalization":[{"$type":"Generalization","$id":"DestructionOccurrenceSpecification-_generalization.0","$ns":"uml","general":"MessageOccurrenceSpecification"}]},{"$type":"Class","$id":"ExecutionOccurrenceSpecification","$ns":"uml","name":"ExecutionOccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"ExecutionOccurrenceSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionOccurrenceSpecification","body":"An ExecutionOccurrenceSpecification represents moments in time at which Actions or Behaviors start or finish."}],"generalization":[{"$type":"Generalization","$id":"ExecutionOccurrenceSpecification-_generalization.0","$ns":"uml","general":"OccurrenceSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"ExecutionOccurrenceSpecification-execution","$ns":"uml","name":"execution","type":"ExecutionSpecification","association":"A_execution_executionOccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"ExecutionOccurrenceSpecification-execution-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionOccurrenceSpecification-execution","body":"References the execution specification describing the execution that is started or finished at this execution event."}]}]},{"$type":"Class","$id":"ExecutionSpecification","$ns":"uml","name":"ExecutionSpecification","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ExecutionSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionSpecification","body":"An ExecutionSpecification is a specification of the execution of a unit of Behavior or Action within the Lifeline. The duration of an ExecutionSpecification is represented by two OccurrenceSpecifications, the start OccurrenceSpecification and the finish OccurrenceSpecification."}],"ownedRule":[{"$type":"Constraint","$id":"ExecutionSpecification-same_lifeline","$ns":"uml","name":"same_lifeline","constrainedElement":"ExecutionSpecification","ownedComment":[{"$type":"Comment","$id":"ExecutionSpecification-same_lifeline-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionSpecification-same_lifeline","body":"The startEvent and the finishEvent must be on the same Lifeline."}],"specification":[{"$type":"OpaqueExpression","$id":"ExecutionSpecification-same_lifeline-_specification","$ns":"uml","language":"OCL","body":"start.covered = finish.covered"}]}],"generalization":[{"$type":"Generalization","$id":"ExecutionSpecification-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"ExecutionSpecification-finish","$ns":"uml","name":"finish","type":"OccurrenceSpecification","association":"A_finish_executionSpecification","ownedComment":[{"$type":"Comment","$id":"ExecutionSpecification-finish-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionSpecification-finish","body":"References the OccurrenceSpecification that designates the finish of the Action or Behavior."}]},{"$type":"Property","$id":"ExecutionSpecification-start","$ns":"uml","name":"start","type":"OccurrenceSpecification","association":"A_start_executionSpecification","ownedComment":[{"$type":"Comment","$id":"ExecutionSpecification-start-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionSpecification-start","body":"References the OccurrenceSpecification that designates the start of the Action or Behavior."}]}]},{"$type":"Class","$id":"Gate","$ns":"uml","name":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-_ownedComment.0","$ns":"uml","annotatedElement":"Gate","body":"A Gate is a MessageEnd which serves as a connection point for relating a Message which has a MessageEnd (sendEvent / receiveEvent) outside an InteractionFragment with another Message which has a MessageEnd (receiveEvent / sendEvent)  inside that InteractionFragment."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-actual_gate_matched","$ns":"uml","name":"actual_gate_matched","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-actual_gate_matched-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-actual_gate_matched","body":"If this Gate is an actualGate, it must have exactly one matching formalGate within the referred Interaction."}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-actual_gate_matched-_specification","$ns":"uml","language":"OCL","body":"interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1"}]},{"$type":"Constraint","$id":"Gate-inside_cf_matched","$ns":"uml","name":"inside_cf_matched","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-inside_cf_matched-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-inside_cf_matched","body":"If this Gate is inside a CombinedFragment, it must have exactly one matching Gate which is outside of that CombinedFragment."}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-inside_cf_matched-_specification","$ns":"uml","language":"OCL","body":"isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1"}]},{"$type":"Constraint","$id":"Gate-outside_cf_matched","$ns":"uml","name":"outside_cf_matched","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-outside_cf_matched-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-outside_cf_matched","body":"If this Gate is outside an 'alt' CombinedFragment,  for every InteractionOperator inside that CombinedFragment there must be exactly one matching Gate inside the CombindedFragment with its opposing end enclosed by that InteractionOperator. If this Gate is outside CombinedFragment with operator other than 'alt',   there must be exactly one matching Gate inside that CombinedFragment."}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-outside_cf_matched-_specification","$ns":"uml","language":"OCL","body":"isOutsideCF() implies\r\n if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt\r\n then self.combinedFragment.operand->forAll(op : InteractionOperand |\r\n self.combinedFragment.cfragmentGate->select(isInsideCF() and \r\n oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1)\r\n else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1\r\n endif"}]},{"$type":"Constraint","$id":"Gate-formal_gate_distinguishable","$ns":"uml","name":"formal_gate_distinguishable","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-formal_gate_distinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-formal_gate_distinguishable","body":"isFormal() implies that no other formalGate of the parent Interaction returns the same getName() as returned for self"}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-formal_gate_distinguishable-_specification","$ns":"uml","language":"OCL","body":"isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1"}]},{"$type":"Constraint","$id":"Gate-actual_gate_distinguishable","$ns":"uml","name":"actual_gate_distinguishable","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-actual_gate_distinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-actual_gate_distinguishable","body":"isActual() implies that no other actualGate of the parent InteractionUse returns the same getName() as returned for self"}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-actual_gate_distinguishable-_specification","$ns":"uml","language":"OCL","body":"isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1"}]},{"$type":"Constraint","$id":"Gate-outside_cf_gate_distinguishable","$ns":"uml","name":"outside_cf_gate_distinguishable","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-outside_cf_gate_distinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-outside_cf_gate_distinguishable","body":"isOutsideCF() implies that no other outside cfragmentGate of the parent CombinedFragment returns the same getName() as returned for self"}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-outside_cf_gate_distinguishable-_specification","$ns":"uml","language":"OCL","body":"isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1"}]},{"$type":"Constraint","$id":"Gate-inside_cf_gate_distinguishable","$ns":"uml","name":"inside_cf_gate_distinguishable","constrainedElement":"Gate","ownedComment":[{"$type":"Comment","$id":"Gate-inside_cf_gate_distinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-inside_cf_gate_distinguishable","body":"isInsideCF() implies that no other inside cfragmentGate attached to a message with its other end in the same InteractionOperator as self, returns the same getName() as returned for self"}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-inside_cf_gate_distinguishable-_specification","$ns":"uml","language":"OCL","body":"isInsideCF() implies\r\nlet selfOperand : InteractionOperand = self.getOperand() in\r\n  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1"}]}],"generalization":[{"$type":"Generalization","$id":"Gate-_generalization.0","$ns":"uml","general":"MessageEnd"}],"ownedOperation":[{"$type":"Operation","$id":"Gate-isOutsideCF","$ns":"uml","name":"isOutsideCF","isQuery":"true","bodyCondition":"Gate-isOutsideCF-spec","ownedComment":[{"$type":"Comment","$id":"Gate-isOutsideCF-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isOutsideCF","body":"This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present)  is outside of the same CombinedFragment."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-isOutsideCF-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-isOutsideCF","specification":[{"$type":"OpaqueExpression","$id":"Gate-isOutsideCF-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implies\r\nlet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in\r\nif oppEnd.oclIsKindOf(MessageOccurrenceSpecification) \r\nthen let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)\r\nin  self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =\r\n     oppMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(oppMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet())\r\nelse let oppGate : Gate = oppEnd.oclAsType(Gate) \r\nin self.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(self.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet()) =\r\n     oppGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(oppGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-isOutsideCF-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Gate-isInsideCF","$ns":"uml","name":"isInsideCF","isQuery":"true","bodyCondition":"Gate-isInsideCF-spec","ownedComment":[{"$type":"Comment","$id":"Gate-isInsideCF-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isInsideCF","body":"This query returns true if this Gate is attached to the boundary of a CombinedFragment, and its other end (if present) is inside of an InteractionOperator of the same CombinedFragment."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-isInsideCF-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-isInsideCF","specification":[{"$type":"OpaqueExpression","$id":"Gate-isInsideCF-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oppositeEnd()-> notEmpty() and combinedFragment->notEmpty() implies\r\nlet oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in\r\nif oppEnd.oclIsKindOf(MessageOccurrenceSpecification)\r\nthen let oppMOS : MessageOccurrenceSpecification\r\n= oppEnd.oclAsType(MessageOccurrenceSpecification)\r\nin combinedFragment = oppMOS.enclosingOperand.combinedFragment\r\nelse let oppGate : Gate = oppEnd.oclAsType(Gate)\r\nin combinedFragment = oppGate.combinedFragment.enclosingOperand.combinedFragment\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-isInsideCF-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Gate-isActual","$ns":"uml","name":"isActual","isQuery":"true","bodyCondition":"Gate-isActual-spec","ownedComment":[{"$type":"Comment","$id":"Gate-isActual-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isActual","body":"This query returns true value if this Gate is an actualGate of an InteractionUse."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-isActual-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-isActual","specification":[{"$type":"OpaqueExpression","$id":"Gate-isActual-spec-_specification","$ns":"uml","language":"OCL","body":"result = (interactionUse->notEmpty())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-isActual-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Gate-isFormal","$ns":"uml","name":"isFormal","isQuery":"true","bodyCondition":"Gate-isFormal-spec","ownedComment":[{"$type":"Comment","$id":"Gate-isFormal-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isFormal","body":"This query returns true if this Gate is a formalGate of an Interaction."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-isFormal-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-isFormal","ownedComment":[{"$type":"Comment","$id":"Gate-isFormal-spec-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isFormal-spec","body":"<p>interaction-&gt;notEmpty()</p>"}],"specification":[{"$type":"OpaqueExpression","$id":"Gate-isFormal-spec-_specification","$ns":"uml","language":"OCL","body":"result = (interaction->notEmpty())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-isFormal-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Gate-getName","$ns":"uml","name":"getName","isQuery":"true","bodyCondition":"Gate-getName-spec","ownedComment":[{"$type":"Comment","$id":"Gate-getName-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-getName","body":"This query returns the name of the gate, either the explicit name (.name) or the constructed name ('out_\" or 'in_' concatenated in front of .message.name) if the explicit name is not present."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-getName-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-getName","specification":[{"$type":"OpaqueExpression","$id":"Gate-getName-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if name->notEmpty() then name->asOrderedSet()->first()\r\nelse  if isActual() or isOutsideCF() \r\n  then if isSend() \r\n    then 'out_'.concat(self.message.name->asOrderedSet()->first())\r\n    else 'in_'.concat(self.message.name->asOrderedSet()->first())\r\n    endif\r\n  else if isSend()\r\n    then 'in_'.concat(self.message.name->asOrderedSet()->first())\r\n    else 'out_'.concat(self.message.name->asOrderedSet()->first())\r\n    endif\r\n  endif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-getName-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]},{"$type":"Operation","$id":"Gate-matches","$ns":"uml","name":"matches","isQuery":"true","bodyCondition":"Gate-matches-spec","ownedComment":[{"$type":"Comment","$id":"Gate-matches-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-matches","body":"This query returns true if the name of this Gate matches the name of the in parameter Gate, and the messages for the two Gates correspond. The Message for one Gate (say A) corresponds to the Message for another Gate (say B) if (A and B have the same name value) and (if A is a sendEvent then B is a receiveEvent) and (if A is a receiveEvent then B is a sendEvent) and (A and B have the same messageSort value) and (A and B have the same signature value)."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-matches-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-matches","specification":[{"$type":"OpaqueExpression","$id":"Gate-matches-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.getName() = gateToMatch.getName() and \r\nself.message.messageSort = gateToMatch.message.messageSort and\r\nself.message.name = gateToMatch.message.name and\r\nself.message.sendEvent->includes(self) implies gateToMatch.message.receiveEvent->includes(gateToMatch)  and\r\nself.message.receiveEvent->includes(self) implies gateToMatch.message.sendEvent->includes(gateToMatch) and\r\nself.message.signature = gateToMatch.message.signature)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-matches-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Gate-matches-gateToMatch","$ns":"uml","name":"gateToMatch","type":"Gate"}]},{"$type":"Operation","$id":"Gate-isDistinguishableFrom","$ns":"uml","name":"isDistinguishableFrom","isQuery":"true","redefinedOperation":"NamedElement-isDistinguishableFrom","bodyCondition":"Gate-isDistinguishableFrom-spec","ownedComment":[{"$type":"Comment","$id":"Gate-isDistinguishableFrom-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-isDistinguishableFrom","body":"The query isDistinguishableFrom() specifies that two Gates may coexist in the same Namespace, without an explicit name property. The association end formalGate subsets ownedElement, and since the Gate name attribute\r\nis optional, it is allowed to have two formal gates without an explicit name, but having derived names which are distinct."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-isDistinguishableFrom-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-isDistinguishableFrom","specification":[{"$type":"OpaqueExpression","$id":"Gate-isDistinguishableFrom-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-isDistinguishableFrom-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Gate-isDistinguishableFrom-n","$ns":"uml","name":"n","type":"NamedElement"},{"$type":"Parameter","$id":"Gate-isDistinguishableFrom-ns","$ns":"uml","name":"ns","type":"Namespace"}]},{"$type":"Operation","$id":"Gate-getOperand","$ns":"uml","name":"getOperand","isQuery":"true","bodyCondition":"Gate-getOperand-spec","ownedComment":[{"$type":"Comment","$id":"Gate-getOperand-_ownedComment.0","$ns":"uml","annotatedElement":"Gate-getOperand","body":"If the Gate is an inside Combined Fragment Gate, this operation returns the InteractionOperand that the opposite end of this Gate is included within."}],"ownedRule":[{"$type":"Constraint","$id":"Gate-getOperand-spec","$ns":"uml","name":"spec","constrainedElement":"Gate-getOperand","specification":[{"$type":"OpaqueExpression","$id":"Gate-getOperand-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if isInsideCF() then\r\n  let oppEnd : MessageEnd = self.oppositeEnd()->asOrderedSet()->first() in\r\n    if oppEnd.oclIsKindOf(MessageOccurrenceSpecification)\r\n    then let oppMOS : MessageOccurrenceSpecification = oppEnd.oclAsType(MessageOccurrenceSpecification)\r\n        in oppMOS.enclosingOperand->asOrderedSet()->first()\r\n    else let oppGate : Gate = oppEnd.oclAsType(Gate)\r\n        in oppGate.combinedFragment.enclosingOperand->asOrderedSet()->first()\r\n    endif\r\n  else null\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Gate-getOperand-result","$ns":"uml","name":"result","type":"InteractionOperand","direction":"return"}]}]},{"$type":"Class","$id":"GeneralOrdering","$ns":"uml","name":"GeneralOrdering","ownedComment":[{"$type":"Comment","$id":"GeneralOrdering-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralOrdering","body":"A GeneralOrdering represents a binary relation between two OccurrenceSpecifications, to describe that one OccurrenceSpecification must occur before the other in a valid trace. This mechanism provides the ability to define partial orders of OccurrenceSpecifications that may otherwise not have a specified order."}],"ownedRule":[{"$type":"Constraint","$id":"GeneralOrdering-irreflexive_transitive_closure","$ns":"uml","name":"irreflexive_transitive_closure","constrainedElement":"GeneralOrdering","ownedComment":[{"$type":"Comment","$id":"GeneralOrdering-irreflexive_transitive_closure-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralOrdering-irreflexive_transitive_closure","body":"An occurrence specification must not be ordered relative to itself through a series of general orderings. (In other words, the transitive closure of the general orderings is irreflexive.)"}],"specification":[{"$type":"OpaqueExpression","$id":"GeneralOrdering-irreflexive_transitive_closure-_specification","$ns":"uml","language":"OCL","body":"after->closure(toAfter.after)->excludes(before)"}]}],"generalization":[{"$type":"Generalization","$id":"GeneralOrdering-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"GeneralOrdering-after","$ns":"uml","name":"after","type":"OccurrenceSpecification","association":"A_toBefore_after","ownedComment":[{"$type":"Comment","$id":"GeneralOrdering-after-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralOrdering-after","body":"The OccurrenceSpecification referenced comes after the OccurrenceSpecification referenced by before."}]},{"$type":"Property","$id":"GeneralOrdering-before","$ns":"uml","name":"before","type":"OccurrenceSpecification","association":"A_before_toAfter","ownedComment":[{"$type":"Comment","$id":"GeneralOrdering-before-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralOrdering-before","body":"The OccurrenceSpecification referenced comes before the OccurrenceSpecification referenced by after."}]}]},{"$type":"Class","$id":"Interaction","$ns":"uml","name":"Interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction","body":"An Interaction is a unit of Behavior that focuses on the observable exchange of information between connectable elements."}],"ownedRule":[{"$type":"Constraint","$id":"Interaction-not_contained","$ns":"uml","name":"not_contained","constrainedElement":"Interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-not_contained-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-not_contained","body":"An Interaction instance must not be contained within another Interaction instance."}],"specification":[{"$type":"OpaqueExpression","$id":"Interaction-not_contained-_specification","$ns":"uml","language":"OCL","body":"enclosingInteraction->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Interaction-_generalization.0","$ns":"uml","general":"InteractionFragment"},{"$type":"Generalization","$id":"Interaction-_generalization.1","$ns":"uml","general":"Behavior"}],"ownedAttribute":[{"$type":"Property","$id":"Interaction-action","$ns":"uml","name":"action","type":"Action","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_action_interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-action-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-action","body":"Actions owned by the Interaction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interaction-action-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interaction-action-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interaction-formalGate","$ns":"uml","name":"formalGate","type":"Gate","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_formalGate_interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-formalGate-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-formalGate","body":"Specifies the gates that form the message interface between this Interaction and any InteractionUses which reference it."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interaction-formalGate-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interaction-formalGate-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interaction-fragment","$ns":"uml","name":"fragment","type":"InteractionFragment","isOrdered":"true","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_fragment_enclosingInteraction","ownedComment":[{"$type":"Comment","$id":"Interaction-fragment-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-fragment","body":"The ordered set of fragments in the Interaction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interaction-fragment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interaction-fragment-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interaction-lifeline","$ns":"uml","name":"lifeline","type":"Lifeline","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_lifeline_interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-lifeline-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-lifeline","body":"Specifies the participants in this Interaction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interaction-lifeline-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interaction-lifeline-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Interaction-message","$ns":"uml","name":"message","type":"Message","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_message_interaction","ownedComment":[{"$type":"Comment","$id":"Interaction-message-_ownedComment.0","$ns":"uml","annotatedElement":"Interaction-message","body":"The Messages contained in this Interaction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Interaction-message-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Interaction-message-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InteractionConstraint","$ns":"uml","name":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint","body":"An InteractionConstraint is a Boolean expression that guards an operand in a CombinedFragment."}],"ownedRule":[{"$type":"Constraint","$id":"InteractionConstraint-minint_maxint","$ns":"uml","name":"minint_maxint","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-minint_maxint-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-minint_maxint","body":"Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-minint_maxint-_specification","$ns":"uml","language":"OCL","body":"maxint->notEmpty() or minint->notEmpty() implies\r\ninteractionOperand.combinedFragment.interactionOperator =\r\nInteractionOperatorKind::loop"}]},{"$type":"Constraint","$id":"InteractionConstraint-minint_non_negative","$ns":"uml","name":"minint_non_negative","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-minint_non_negative-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-minint_non_negative","body":"If minint is specified, then the expression must evaluate to a non-negative integer."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-minint_non_negative-_specification","$ns":"uml","language":"OCL","body":"minint->notEmpty() implies \r\nminint->asSequence()->first().integerValue() >= 0"}]},{"$type":"Constraint","$id":"InteractionConstraint-maxint_positive","$ns":"uml","name":"maxint_positive","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-maxint_positive-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-maxint_positive","body":"If maxint is specified, then the expression must evaluate to a positive integer."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-maxint_positive-_specification","$ns":"uml","language":"OCL","body":"maxint->notEmpty() implies \r\nmaxint->asSequence()->first().integerValue() > 0"}]},{"$type":"Constraint","$id":"InteractionConstraint-dynamic_variables","$ns":"uml","name":"dynamic_variables","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-dynamic_variables-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-dynamic_variables","body":"The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-dynamic_variables-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InteractionConstraint-global_data","$ns":"uml","name":"global_data","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-global_data-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-global_data","body":"The constraint may contain references to global data or write-once data."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-global_data-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InteractionConstraint-maxint_greater_equal_minint","$ns":"uml","name":"maxint_greater_equal_minint","constrainedElement":"InteractionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-maxint_greater_equal_minint-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-maxint_greater_equal_minint","body":"If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionConstraint-maxint_greater_equal_minint-_specification","$ns":"uml","language":"OCL","body":"maxint->notEmpty() implies (minint->notEmpty() and \r\nmaxint->asSequence()->first().integerValue() >=\r\nminint->asSequence()->first().integerValue() )"}]}],"generalization":[{"$type":"Generalization","$id":"InteractionConstraint-_generalization.0","$ns":"uml","general":"Constraint"}],"ownedAttribute":[{"$type":"Property","$id":"InteractionConstraint-maxint","$ns":"uml","name":"maxint","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_maxint_interactionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-maxint-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-maxint","body":"The maximum number of iterations of a loop"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionConstraint-maxint-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionConstraint-minint","$ns":"uml","name":"minint","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_minint_interactionConstraint","ownedComment":[{"$type":"Comment","$id":"InteractionConstraint-minint-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionConstraint-minint","body":"The minimum number of iterations of a loop"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionConstraint-minint-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InteractionFragment","$ns":"uml","name":"InteractionFragment","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"InteractionFragment-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionFragment","body":"InteractionFragment is an abstract notion of the most general interaction unit. An InteractionFragment is a piece of an Interaction. Each InteractionFragment is conceptually like an Interaction by itself."}],"generalization":[{"$type":"Generalization","$id":"InteractionFragment-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"InteractionFragment-covered","$ns":"uml","name":"covered","type":"Lifeline","association":"A_covered_coveredBy","ownedComment":[{"$type":"Comment","$id":"InteractionFragment-covered-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionFragment-covered","body":"References the Lifelines that the InteractionFragment involves."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InteractionFragment-covered-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionFragment-covered-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionFragment-enclosingInteraction","$ns":"uml","name":"enclosingInteraction","type":"Interaction","subsettedProperty":"NamedElement-namespace","association":"A_fragment_enclosingInteraction","ownedComment":[{"$type":"Comment","$id":"InteractionFragment-enclosingInteraction-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionFragment-enclosingInteraction","body":"The Interaction enclosing this InteractionFragment."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionFragment-enclosingInteraction-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionFragment-enclosingOperand","$ns":"uml","name":"enclosingOperand","type":"InteractionOperand","subsettedProperty":"NamedElement-namespace","association":"A_fragment_enclosingOperand","ownedComment":[{"$type":"Comment","$id":"InteractionFragment-enclosingOperand-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionFragment-enclosingOperand","body":"The operand enclosing this InteractionFragment (they may nest recursively)."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionFragment-enclosingOperand-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionFragment-generalOrdering","$ns":"uml","name":"generalOrdering","type":"GeneralOrdering","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_generalOrdering_interactionFragment","ownedComment":[{"$type":"Comment","$id":"InteractionFragment-generalOrdering-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionFragment-generalOrdering","body":"The general ordering relationships contained in this fragment."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InteractionFragment-generalOrdering-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionFragment-generalOrdering-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InteractionOperand","$ns":"uml","name":"InteractionOperand","ownedComment":[{"$type":"Comment","$id":"InteractionOperand-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperand","body":"An InteractionOperand is contained in a CombinedFragment. An InteractionOperand represents one operand of the expression given by the enclosing CombinedFragment."}],"ownedRule":[{"$type":"Constraint","$id":"InteractionOperand-guard_contain_references","$ns":"uml","name":"guard_contain_references","constrainedElement":"InteractionOperand","ownedComment":[{"$type":"Comment","$id":"InteractionOperand-guard_contain_references-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperand-guard_contain_references","body":"The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionOperand-guard_contain_references-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InteractionOperand-guard_directly_prior","$ns":"uml","name":"guard_directly_prior","constrainedElement":"InteractionOperand","ownedComment":[{"$type":"Comment","$id":"InteractionOperand-guard_directly_prior-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperand-guard_directly_prior","body":"The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionOperand-guard_directly_prior-_specification","$ns":"uml","language":""}]}],"generalization":[{"$type":"Generalization","$id":"InteractionOperand-_generalization.0","$ns":"uml","general":"InteractionFragment"},{"$type":"Generalization","$id":"InteractionOperand-_generalization.1","$ns":"uml","general":"Namespace"}],"ownedAttribute":[{"$type":"Property","$id":"InteractionOperand-fragment","$ns":"uml","name":"fragment","type":"InteractionFragment","isOrdered":"true","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_fragment_enclosingOperand","ownedComment":[{"$type":"Comment","$id":"InteractionOperand-fragment-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperand-fragment","body":"The fragments of the operand."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InteractionOperand-fragment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionOperand-fragment-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionOperand-guard","$ns":"uml","name":"guard","type":"InteractionConstraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_guard_interactionOperand","ownedComment":[{"$type":"Comment","$id":"InteractionOperand-guard-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperand-guard","body":"Constraint of the operand."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionOperand-guard-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InteractionUse","$ns":"uml","name":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse","body":"An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones."}],"ownedRule":[{"$type":"Constraint","$id":"InteractionUse-gates_match","$ns":"uml","name":"gates_match","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-gates_match-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-gates_match","body":"Actual Gates of the InteractionUse must match Formal Gates of the referred Interaction. Gates match when their names are equal and their messages correspond."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-gates_match-_specification","$ns":"uml","language":"OCL","body":"actualGate->notEmpty() implies \r\nrefersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) and\r\nself.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)"}]},{"$type":"Constraint","$id":"InteractionUse-arguments_are_constants","$ns":"uml","name":"arguments_are_constants","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-arguments_are_constants-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-arguments_are_constants","body":"The arguments must only be constants, parameters of the enclosing Interaction or attributes of the classifier owning the enclosing Interaction."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-arguments_are_constants-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InteractionUse-returnValueRecipient_coverage","$ns":"uml","name":"returnValueRecipient_coverage","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-returnValueRecipient_coverage-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-returnValueRecipient_coverage","body":"The returnValueRecipient must be a Property of a ConnectableElement that is represented by a Lifeline covered by this InteractionUse."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-returnValueRecipient_coverage-_specification","$ns":"uml","language":"OCL","body":"returnValueRecipient->asSet()->notEmpty() implies\r\nlet covCE : Set(ConnectableElement) = covered.represents->asSet() in \r\ncovCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in \r\nlet allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in \r\nallProps->includes(returnValueRecipient)"}]},{"$type":"Constraint","$id":"InteractionUse-arguments_correspond_to_parameters","$ns":"uml","name":"arguments_correspond_to_parameters","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-arguments_correspond_to_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-arguments_correspond_to_parameters","body":"The arguments of the InteractionUse must correspond to parameters of the referred Interaction."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-arguments_correspond_to_parameters-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InteractionUse-returnValue_type_recipient_correspondence","$ns":"uml","name":"returnValue_type_recipient_correspondence","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-returnValue_type_recipient_correspondence-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-returnValue_type_recipient_correspondence","body":"The type of the returnValue must correspond to the type of the returnValueRecipient."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-returnValue_type_recipient_correspondence-_specification","$ns":"uml","language":"OCL","body":"returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()\r\n"}]},{"$type":"Constraint","$id":"InteractionUse-all_lifelines","$ns":"uml","name":"all_lifelines","constrainedElement":"InteractionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-all_lifelines-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-all_lifelines","body":"The InteractionUse must cover all Lifelines of the enclosing Interaction that are common with the lifelines covered by the referred Interaction. Lifelines are common if they have the same selector and represents associationEnd values."}],"specification":[{"$type":"OpaqueExpression","$id":"InteractionUse-all_lifelines-_specification","$ns":"uml","language":"OCL","body":"let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->\r\nunion(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->\r\ncollect(enclosingInteraction).oclAsType(Interaction)->asSet()) in\r\nparentInteraction->size()=1 and let refInteraction : Interaction = refersTo in\r\nparentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->\r\nforAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and \r\n(\r\n( refLifeline.selector.oclIsKindOf(LiteralString) implies\r\n  intLifeline.selector.oclIsKindOf(LiteralString) and \r\n  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and\r\n( refLifeline.selector.oclIsKindOf(LiteralInteger) implies\r\n  intLifeline.selector.oclIsKindOf(LiteralInteger) and \r\n  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )\r\n)\r\n implies self.covered->asSet()->includes(intLifeline)))"}]}],"generalization":[{"$type":"Generalization","$id":"InteractionUse-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"InteractionUse-actualGate","$ns":"uml","name":"actualGate","type":"Gate","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_actualGate_interactionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-actualGate-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-actualGate","body":"The actual gates of the InteractionUse."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InteractionUse-actualGate-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionUse-actualGate-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionUse-argument","$ns":"uml","name":"argument","type":"ValueSpecification","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_argument_interactionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-argument-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-argument","body":"The actual arguments of the Interaction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InteractionUse-argument-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionUse-argument-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionUse-refersTo","$ns":"uml","name":"refersTo","type":"Interaction","association":"A_refersTo_interactionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-refersTo-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-refersTo","body":"Refers to the Interaction that defines its meaning."}]},{"$type":"Property","$id":"InteractionUse-returnValue","$ns":"uml","name":"returnValue","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_returnValue_interactionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-returnValue-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-returnValue","body":"The value of the executed Interaction."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionUse-returnValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InteractionUse-returnValueRecipient","$ns":"uml","name":"returnValueRecipient","type":"Property","association":"A_returnValueRecipient_interactionUse","ownedComment":[{"$type":"Comment","$id":"InteractionUse-returnValueRecipient-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionUse-returnValueRecipient","body":"The recipient of the return value."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InteractionUse-returnValueRecipient-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Lifeline","$ns":"uml","name":"Lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline","body":"A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity."}],"ownedRule":[{"$type":"Constraint","$id":"Lifeline-selector_specified","$ns":"uml","name":"selector_specified","constrainedElement":"Lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-selector_specified-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-selector_specified","body":"The selector for a Lifeline must only be specified if the referenced Part is multivalued."}],"specification":[{"$type":"OpaqueExpression","$id":"Lifeline-selector_specified-_specification","$ns":"uml","language":"OCL","body":" self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())"}]},{"$type":"Constraint","$id":"Lifeline-interaction_uses_share_lifeline","$ns":"uml","name":"interaction_uses_share_lifeline","constrainedElement":"Lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-interaction_uses_share_lifeline-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-interaction_uses_share_lifeline","body":"If a lifeline is in an Interaction referred to by an InteractionUse in an enclosing Interaction,  and that lifeline is common with another lifeline in an Interaction referred to by another InteractonUse within that same enclosing Interaction, it must be common to a lifeline within that enclosing Interaction. By common Lifelines we mean Lifelines with the same selector and represents associations.\r\n"}],"specification":[{"$type":"OpaqueExpression","$id":"Lifeline-interaction_uses_share_lifeline-_specification","$ns":"uml","language":"OCL","body":"let intUses : Set(InteractionUse) = interaction.interactionUse  in \r\nintUses->forAll\r\n( iuse : InteractionUse | \r\nlet usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()\r\n->union(\r\niuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()\r\n               ) \r\nin\r\nlet peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()\r\n->union(\r\nusingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()\r\n->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->\r\nselect(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()\r\n               )->excluding(iuse)\r\n in\r\npeerUses->forAll( peerUse : InteractionUse |\r\n peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and \r\n ( self.selector.oclIsKindOf(LiteralString) implies\r\n  l.selector.oclIsKindOf(LiteralString) and \r\n  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )\r\n  and \r\n( self.selector.oclIsKindOf(LiteralInteger) implies\r\n  l.selector.oclIsKindOf(LiteralInteger) and \r\n  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )\r\n)  \r\nimplies\r\n usingInteraction.lifeline->select(represents = self.represents and\r\n ( self.selector.oclIsKindOf(LiteralString) implies\r\n  l.selector.oclIsKindOf(LiteralString) and \r\n  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )\r\nand \r\n( self.selector.oclIsKindOf(LiteralInteger) implies\r\n  l.selector.oclIsKindOf(LiteralInteger) and \r\n  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )\r\n)\r\n                                                )\r\n                    )\r\n)"}]},{"$type":"Constraint","$id":"Lifeline-same_classifier","$ns":"uml","name":"same_classifier","constrainedElement":"Lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-same_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-same_classifier","body":"The classifier containing the referenced ConnectableElement must be the same classifier, or an ancestor, of the classifier that contains the interaction enclosing this lifeline."}],"specification":[{"$type":"OpaqueExpression","$id":"Lifeline-same_classifier-_specification","$ns":"uml","language":"OCL","body":"represents.namespace->closure(namespace)->includes(interaction._'context')"}]},{"$type":"Constraint","$id":"Lifeline-selector_int_or_string","$ns":"uml","name":"selector_int_or_string","constrainedElement":"Lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-selector_int_or_string-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-selector_int_or_string","body":"The selector value, if present, must be a LiteralString or a LiteralInteger "}],"specification":[{"$type":"OpaqueExpression","$id":"Lifeline-selector_int_or_string-_specification","$ns":"uml","language":"OCL","body":"self.selector->notEmpty() implies \r\nself.selector.oclIsKindOf(LiteralInteger) or \r\nself.selector.oclIsKindOf(LiteralString)"}]}],"generalization":[{"$type":"Generalization","$id":"Lifeline-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Lifeline-coveredBy","$ns":"uml","name":"coveredBy","type":"InteractionFragment","association":"A_covered_coveredBy","ownedComment":[{"$type":"Comment","$id":"Lifeline-coveredBy-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-coveredBy","body":"References the InteractionFragments in which this Lifeline takes part."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Lifeline-coveredBy-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Lifeline-coveredBy-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Lifeline-decomposedAs","$ns":"uml","name":"decomposedAs","type":"PartDecomposition","association":"A_decomposedAs_lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-decomposedAs-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-decomposedAs","body":"References the Interaction that represents the decomposition."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Lifeline-decomposedAs-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Lifeline-interaction","$ns":"uml","name":"interaction","type":"Interaction","subsettedProperty":"NamedElement-namespace","association":"A_lifeline_interaction","ownedComment":[{"$type":"Comment","$id":"Lifeline-interaction-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-interaction","body":"References the Interaction enclosing this Lifeline."}]},{"$type":"Property","$id":"Lifeline-represents","$ns":"uml","name":"represents","type":"ConnectableElement","association":"A_represents_lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-represents-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-represents","body":"References the ConnectableElement within the classifier that contains the enclosing interaction."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Lifeline-represents-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Lifeline-selector","$ns":"uml","name":"selector","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_selector_lifeline","ownedComment":[{"$type":"Comment","$id":"Lifeline-selector-_ownedComment.0","$ns":"uml","annotatedElement":"Lifeline-selector","body":"If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Lifeline-selector-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Message","$ns":"uml","name":"Message","ownedComment":[{"$type":"Comment","$id":"Message-_ownedComment.0","$ns":"uml","annotatedElement":"Message","body":"A Message defines a particular communication between Lifelines of an Interaction."}],"ownedRule":[{"$type":"Constraint","$id":"Message-sending_receiving_message_event","$ns":"uml","name":"sending_receiving_message_event","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-sending_receiving_message_event-_ownedComment.0","$ns":"uml","annotatedElement":"Message-sending_receiving_message_event","body":"If the sendEvent and the receiveEvent of the same Message are on the same Lifeline, the sendEvent must be ordered before the receiveEvent."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-sending_receiving_message_event-_specification","$ns":"uml","language":"OCL","body":"receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)\r\nimplies\r\nlet f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered in\r\nf = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  implies\r\nf.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < \r\nf.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )"}]},{"$type":"Constraint","$id":"Message-arguments","$ns":"uml","name":"arguments","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-arguments-_ownedComment.0","$ns":"uml","annotatedElement":"Message-arguments","body":"Arguments of a Message must only be: i) attributes of the sending lifeline, ii) constants, iii) symbolic values (which are wildcard values representing any legal value), iv) explicit parameters of the enclosing Interaction, v) attributes of the class owning the Interaction."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-arguments-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Message-cannot_cross_boundaries","$ns":"uml","name":"cannot_cross_boundaries","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-cannot_cross_boundaries-_ownedComment.0","$ns":"uml","annotatedElement":"Message-cannot_cross_boundaries","body":"Messages cannot cross boundaries of CombinedFragments or their operands.  This is true if and only if both MessageEnds are enclosed within the same InteractionFragment (i.e., an InteractionOperand or an Interaction)."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-cannot_cross_boundaries-_specification","$ns":"uml","language":"OCL","body":"sendEvent->notEmpty() and receiveEvent->notEmpty() implies\r\nlet sendEnclosingFrag : Set(InteractionFragment) = \r\nsendEvent->asOrderedSet()->first().enclosingFragment()\r\nin \r\nlet receiveEnclosingFrag : Set(InteractionFragment) = \r\nreceiveEvent->asOrderedSet()->first().enclosingFragment()\r\nin  sendEnclosingFrag = receiveEnclosingFrag"}]},{"$type":"Constraint","$id":"Message-signature_is_signal","$ns":"uml","name":"signature_is_signal","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-signature_is_signal-_ownedComment.0","$ns":"uml","annotatedElement":"Message-signature_is_signal","body":"In the case when the Message signature is a Signal, the arguments of the Message must correspond to the attributes of the Signal. A Message Argument corresponds to a Signal Attribute if the Argument is of the same Class or a specialization of that of the Attribute."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-signature_is_signal-_specification","$ns":"uml","language":"OCL","body":"(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies\r\n   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->\r\n             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()\r\n   in signalAttributes->size() = self.argument->size()\r\n   and self.argument->forAll( o: ValueSpecification |\r\n          not (o.oclIsKindOf(Expression)\r\n          and o.oclAsType(Expression).symbol->size()=0\r\n          and o.oclAsType(Expression).operand->isEmpty() ) implies\r\n              let p : Property = signalAttributes->at(self.argument->indexOf(o))\r\n              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))\r\n"}]},{"$type":"Constraint","$id":"Message-occurrence_specifications","$ns":"uml","name":"occurrence_specifications","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-occurrence_specifications-_ownedComment.0","$ns":"uml","annotatedElement":"Message-occurrence_specifications","body":"If the MessageEnds are both OccurrenceSpecifications, then the connector must go between the Parts represented by the Lifelines of the two MessageEnds."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-occurrence_specifications-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Message-signature_refer_to","$ns":"uml","name":"signature_refer_to","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-signature_refer_to-_ownedComment.0","$ns":"uml","annotatedElement":"Message-signature_refer_to","body":"The signature must either refer an Operation (in which case messageSort is either synchCall or asynchCall or reply) or a Signal (in which case messageSort is asynchSignal). The name of the NamedElement referenced by signature must be the same as that of the Message."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-signature_refer_to-_specification","$ns":"uml","language":"OCL","body":"signature->notEmpty() implies \r\n((signature.oclIsKindOf(Operation) and \r\n(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) \r\n) or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal )\r\n ) and name = signature.name"}]},{"$type":"Constraint","$id":"Message-signature_is_operation_request","$ns":"uml","name":"signature_is_operation_request","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-signature_is_operation_request-_ownedComment.0","$ns":"uml","annotatedElement":"Message-signature_is_operation_request","body":"In the case when a Message with messageSort synchCall or asynchCall has a non empty Operation signature, the arguments of the Message must correspond to the in and inout parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-signature_is_operation_request-_specification","$ns":"uml","language":"OCL","body":"(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies \r\n let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->\r\n select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )\r\nin requestParms->size() = self.argument->size() and\r\nself.argument->forAll( o: ValueSpecification | \r\nnot (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies \r\nlet p : Parameter = requestParms->at(self.argument->indexOf(o)) in\r\no.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))\r\n)"}]},{"$type":"Constraint","$id":"Message-signature_is_operation_reply","$ns":"uml","name":"signature_is_operation_reply","constrainedElement":"Message","ownedComment":[{"$type":"Comment","$id":"Message-signature_is_operation_reply-_ownedComment.0","$ns":"uml","annotatedElement":"Message-signature_is_operation_reply","body":"In the case when a Message with messageSort reply has a non empty Operation signature, the arguments of the Message must correspond to the out, inout, and return parameters of the Operation. A Parameter corresponds to an Argument if the Argument is of the same Class or a specialization of that of the Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"Message-signature_is_operation_reply-_specification","$ns":"uml","language":"OCL","body":"(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies \r\n let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->\r\nselect(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)\r\nin replyParms->size() = self.argument->size() and\r\nself.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) in\r\ne.operand->notEmpty()  implies \r\nlet p : Parameter = replyParms->at(self.argument->indexOf(o)) in\r\ne.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))\r\n)"}]}],"generalization":[{"$type":"Generalization","$id":"Message-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Message-argument","$ns":"uml","name":"argument","type":"ValueSpecification","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_argument_message","ownedComment":[{"$type":"Comment","$id":"Message-argument-_ownedComment.0","$ns":"uml","annotatedElement":"Message-argument","body":"The arguments of the Message."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Message-argument-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Message-argument-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Message-connector","$ns":"uml","name":"connector","type":"Connector","association":"A_connector_message","ownedComment":[{"$type":"Comment","$id":"Message-connector-_ownedComment.0","$ns":"uml","annotatedElement":"Message-connector","body":"The Connector on which this Message is sent."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Message-connector-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Message-interaction","$ns":"uml","name":"interaction","type":"Interaction","subsettedProperty":"NamedElement-namespace","association":"A_message_interaction","ownedComment":[{"$type":"Comment","$id":"Message-interaction-_ownedComment.0","$ns":"uml","annotatedElement":"Message-interaction","body":"The enclosing Interaction owning the Message."}]},{"$type":"Property","$id":"Message-messageKind","$ns":"uml","name":"messageKind","type":"MessageKind","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Message-messageKind-_ownedComment.0","$ns":"uml","annotatedElement":"Message-messageKind","body":"The derived kind of the Message (complete, lost, found, or unknown)."}]},{"$type":"Property","$id":"Message-messageSort","$ns":"uml","name":"messageSort","type":"MessageSort","ownedComment":[{"$type":"Comment","$id":"Message-messageSort-_ownedComment.0","$ns":"uml","annotatedElement":"Message-messageSort","body":"The sort of communication reflected by the Message."}],"defaultValue":[{"$type":"InstanceValue","$id":"Message-messageSort-_defaultValue","$ns":"uml","type":"MessageSort","instance":"MessageSort-synchCall"}]},{"$type":"Property","$id":"Message-receiveEvent","$ns":"uml","name":"receiveEvent","type":"MessageEnd","subsettedProperty":"A_message_messageEnd-messageEnd","association":"A_receiveEvent_endMessage","ownedComment":[{"$type":"Comment","$id":"Message-receiveEvent-_ownedComment.0","$ns":"uml","annotatedElement":"Message-receiveEvent","body":"References the Receiving of the Message."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Message-receiveEvent-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Message-sendEvent","$ns":"uml","name":"sendEvent","type":"MessageEnd","subsettedProperty":"A_message_messageEnd-messageEnd","association":"A_sendEvent_endMessage","ownedComment":[{"$type":"Comment","$id":"Message-sendEvent-_ownedComment.0","$ns":"uml","annotatedElement":"Message-sendEvent","body":"References the Sending of the Message."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Message-sendEvent-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Message-signature","$ns":"uml","name":"signature","type":"NamedElement","association":"A_signature_message","ownedComment":[{"$type":"Comment","$id":"Message-signature-_ownedComment.0","$ns":"uml","annotatedElement":"Message-signature","body":"The signature of the Message is the specification of its content. It refers either an Operation or a Signal."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Message-signature-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Message-messageKind.1","$ns":"uml","name":"messageKind","isQuery":"true","bodyCondition":"Message-messageKind.1-spec","ownedComment":[{"$type":"Comment","$id":"Message-messageKind.1-_ownedComment.0","$ns":"uml","annotatedElement":"Message-messageKind.1","body":"This query returns the MessageKind value for this Message."}],"ownedRule":[{"$type":"Constraint","$id":"Message-messageKind.1-spec","$ns":"uml","name":"spec","constrainedElement":"Message-messageKind.1 Message-messageKind","specification":[{"$type":"OpaqueExpression","$id":"Message-messageKind.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (messageKind)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Message-messageKind.1-result","$ns":"uml","name":"result","type":"MessageKind","direction":"return"}]},{"$type":"Operation","$id":"Message-isDistinguishableFrom","$ns":"uml","name":"isDistinguishableFrom","isQuery":"true","redefinedOperation":"NamedElement-isDistinguishableFrom","bodyCondition":"Message-isDistinguishableFrom-spec","ownedComment":[{"$type":"Comment","$id":"Message-isDistinguishableFrom-_ownedComment.0","$ns":"uml","annotatedElement":"Message-isDistinguishableFrom","body":"The query isDistinguishableFrom() specifies that any two Messages may coexist in the same Namespace, regardless of their names."}],"ownedRule":[{"$type":"Constraint","$id":"Message-isDistinguishableFrom-spec","$ns":"uml","name":"spec","constrainedElement":"Message-isDistinguishableFrom","specification":[{"$type":"OpaqueExpression","$id":"Message-isDistinguishableFrom-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Message-isDistinguishableFrom-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Message-isDistinguishableFrom-n","$ns":"uml","name":"n","type":"NamedElement"},{"$type":"Parameter","$id":"Message-isDistinguishableFrom-ns","$ns":"uml","name":"ns","type":"Namespace"}]}]},{"$type":"Class","$id":"MessageEnd","$ns":"uml","name":"MessageEnd","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"MessageEnd-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd","body":"MessageEnd is an abstract specialization of NamedElement that represents what can occur at the end of a Message."}],"generalization":[{"$type":"Generalization","$id":"MessageEnd-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"MessageEnd-message","$ns":"uml","name":"message","type":"Message","association":"A_message_messageEnd","ownedComment":[{"$type":"Comment","$id":"MessageEnd-message-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-message","body":"References a Message."}],"lowerValue":[{"$type":"LiteralInteger","$id":"MessageEnd-message-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"MessageEnd-oppositeEnd","$ns":"uml","name":"oppositeEnd","isQuery":"true","precondition":"MessageEnd-oppositeEnd-pre","bodyCondition":"MessageEnd-oppositeEnd-spec","ownedComment":[{"$type":"Comment","$id":"MessageEnd-oppositeEnd-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-oppositeEnd","body":"This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd."}],"ownedRule":[{"$type":"Constraint","$id":"MessageEnd-oppositeEnd-spec","$ns":"uml","name":"spec","constrainedElement":"MessageEnd-oppositeEnd","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-oppositeEnd-spec-_specification","$ns":"uml","language":"OCL","body":"result = (message->asSet().messageEnd->asSet()->excluding(self))"}]},{"$type":"Constraint","$id":"MessageEnd-oppositeEnd-pre","$ns":"uml","name":"pre","constrainedElement":"MessageEnd-oppositeEnd","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-oppositeEnd-pre-_specification","$ns":"uml","language":"OCL","body":"message->notEmpty()\r\n"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MessageEnd-oppositeEnd-result","$ns":"uml","name":"result","type":"MessageEnd","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"MessageEnd-oppositeEnd-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"MessageEnd-oppositeEnd-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"MessageEnd-isSend","$ns":"uml","name":"isSend","isQuery":"true","precondition":"MessageEnd-isSend-pre","bodyCondition":"MessageEnd-isSend-spec","ownedComment":[{"$type":"Comment","$id":"MessageEnd-isSend-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-isSend","body":"This query returns value true if this MessageEnd is a sendEvent."}],"ownedRule":[{"$type":"Constraint","$id":"MessageEnd-isSend-pre","$ns":"uml","name":"pre","constrainedElement":"MessageEnd-isSend","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-isSend-pre-_specification","$ns":"uml","language":"OCL","body":"message->notEmpty()\r\n"}]},{"$type":"Constraint","$id":"MessageEnd-isSend-spec","$ns":"uml","name":"spec","constrainedElement":"MessageEnd-isSend","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-isSend-spec-_specification","$ns":"uml","language":"OCL","body":"result = (message.sendEvent->asSet()->includes(self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MessageEnd-isSend-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"MessageEnd-isReceive","$ns":"uml","name":"isReceive","isQuery":"true","precondition":"MessageEnd-isReceive-pre","bodyCondition":"MessageEnd-isReceive-spec","ownedComment":[{"$type":"Comment","$id":"MessageEnd-isReceive-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-isReceive","body":"This query returns value true if this MessageEnd is a receiveEvent."}],"ownedRule":[{"$type":"Constraint","$id":"MessageEnd-isReceive-pre","$ns":"uml","name":"pre","constrainedElement":"MessageEnd-isReceive","ownedComment":[{"$type":"Comment","$id":"MessageEnd-isReceive-pre-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-isReceive-pre","body":"<p>message-&gt;notEmpty()</p>"}],"specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-isReceive-pre-_specification","$ns":"uml","language":"OCL","body":"message->notEmpty()\r\n"}]},{"$type":"Constraint","$id":"MessageEnd-isReceive-spec","$ns":"uml","name":"spec","constrainedElement":"MessageEnd-isReceive","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-isReceive-spec-_specification","$ns":"uml","language":"OCL","body":"result = (message.receiveEvent->asSet()->includes(self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MessageEnd-isReceive-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"MessageEnd-enclosingFragment","$ns":"uml","name":"enclosingFragment","isQuery":"true","bodyCondition":"MessageEnd-enclosingFragment-spec","ownedComment":[{"$type":"Comment","$id":"MessageEnd-enclosingFragment-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEnd-enclosingFragment","body":"This query returns a set including the enclosing InteractionFragment this MessageEnd is enclosed within."}],"ownedRule":[{"$type":"Constraint","$id":"MessageEnd-enclosingFragment-spec","$ns":"uml","name":"spec","constrainedElement":"MessageEnd-enclosingFragment","specification":[{"$type":"OpaqueExpression","$id":"MessageEnd-enclosingFragment-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if self->select(oclIsKindOf(Gate))->notEmpty() \r\nthen -- it is a Gate\r\nlet endGate : Gate = \r\n  self->select(oclIsKindOf(Gate)).oclAsType(Gate)->asOrderedSet()->first()\r\n  in\r\n  if endGate.isOutsideCF() \r\n  then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())\r\n  else if endGate.isInsideCF() \r\n    then endGate.combinedFragment.oclAsType(InteractionFragment)->asSet()\r\n    else if endGate.isFormal() \r\n      then endGate.interaction.oclAsType(InteractionFragment)->asSet()\r\n      else if endGate.isActual() \r\n        then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->\r\n     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)->asSet())\r\n        else null\r\n        endif\r\n      endif\r\n    endif\r\n  endif\r\nelse -- it is a MessageOccurrenceSpecification\r\nlet endMOS : MessageOccurrenceSpecification  = \r\n  self->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() \r\n  in\r\n  if endMOS.enclosingInteraction->notEmpty() \r\n  then endMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()\r\n  else endMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet()\r\n  endif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MessageEnd-enclosingFragment-result","$ns":"uml","name":"result","type":"InteractionFragment","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"MessageEnd-enclosingFragment-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"MessageEnd-enclosingFragment-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"MessageOccurrenceSpecification","$ns":"uml","name":"MessageOccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"MessageOccurrenceSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"MessageOccurrenceSpecification","body":"A MessageOccurrenceSpecification specifies the occurrence of Message events, such as sending and receiving of Signals or invoking or receiving of Operation calls. A MessageOccurrenceSpecification is a kind of MessageEnd. Messages are generated either by synchronous Operation calls or asynchronous Signal sends. They are received by the execution of corresponding AcceptEventActions."}],"generalization":[{"$type":"Generalization","$id":"MessageOccurrenceSpecification-_generalization.0","$ns":"uml","general":"MessageEnd"},{"$type":"Generalization","$id":"MessageOccurrenceSpecification-_generalization.1","$ns":"uml","general":"OccurrenceSpecification"}]},{"$type":"Class","$id":"OccurrenceSpecification","$ns":"uml","name":"OccurrenceSpecification","ownedComment":[{"$type":"Comment","$id":"OccurrenceSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"OccurrenceSpecification","body":"An OccurrenceSpecification is the basic semantic unit of Interactions. The sequences of occurrences specified by them are the meanings of Interactions."}],"generalization":[{"$type":"Generalization","$id":"OccurrenceSpecification-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"OccurrenceSpecification-covered","$ns":"uml","name":"covered","type":"Lifeline","redefinedProperty":"InteractionFragment-covered","association":"A_covered_events","ownedComment":[{"$type":"Comment","$id":"OccurrenceSpecification-covered-_ownedComment.0","$ns":"uml","annotatedElement":"OccurrenceSpecification-covered","body":"References the Lifeline on which the OccurrenceSpecification appears."}]},{"$type":"Property","$id":"OccurrenceSpecification-toAfter","$ns":"uml","name":"toAfter","type":"GeneralOrdering","association":"A_before_toAfter","ownedComment":[{"$type":"Comment","$id":"OccurrenceSpecification-toAfter-_ownedComment.0","$ns":"uml","annotatedElement":"OccurrenceSpecification-toAfter","body":"References the GeneralOrderings that specify EventOcurrences that must occur after this OccurrenceSpecification."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OccurrenceSpecification-toAfter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OccurrenceSpecification-toAfter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OccurrenceSpecification-toBefore","$ns":"uml","name":"toBefore","type":"GeneralOrdering","association":"A_toBefore_after","ownedComment":[{"$type":"Comment","$id":"OccurrenceSpecification-toBefore-_ownedComment.0","$ns":"uml","annotatedElement":"OccurrenceSpecification-toBefore","body":"References the GeneralOrderings that specify EventOcurrences that must occur before this OccurrenceSpecification."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OccurrenceSpecification-toBefore-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OccurrenceSpecification-toBefore-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"PartDecomposition","$ns":"uml","name":"PartDecomposition","ownedComment":[{"$type":"Comment","$id":"PartDecomposition-_ownedComment.0","$ns":"uml","annotatedElement":"PartDecomposition","body":"A PartDecomposition is a description of the internal Interactions of one Lifeline relative to an Interaction."}],"ownedRule":[{"$type":"Constraint","$id":"PartDecomposition-commutativity_of_decomposition","$ns":"uml","name":"commutativity_of_decomposition","constrainedElement":"PartDecomposition","ownedComment":[{"$type":"Comment","$id":"PartDecomposition-commutativity_of_decomposition-_ownedComment.0","$ns":"uml","annotatedElement":"PartDecomposition-commutativity_of_decomposition","body":"Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Assume also that there is within X an InteractionUse (say) U that covers L. According to the constraint above U will have a counterpart CU within D. Within the Interaction referenced by U, L should also be decomposed, and the decomposition should reference CU. (This rule is called commutativity of decomposition.)"}],"specification":[{"$type":"OpaqueExpression","$id":"PartDecomposition-commutativity_of_decomposition-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"PartDecomposition-assume","$ns":"uml","name":"assume","constrainedElement":"PartDecomposition","ownedComment":[{"$type":"Comment","$id":"PartDecomposition-assume-_ownedComment.0","$ns":"uml","annotatedElement":"PartDecomposition-assume","body":"Assume that within Interaction X, Lifeline L is of class C and decomposed to D. Within X there is a sequence of constructs along L (such constructs are CombinedFragments, InteractionUse and (plain) OccurrenceSpecifications). Then a corresponding sequence of constructs must appear within D, matched one-to-one in the same order. i) CombinedFragment covering L are matched with an extra-global CombinedFragment in D. ii) An InteractionUse covering L is matched with a global (i.e., covering all Lifelines) InteractionUse in D. iii) A plain OccurrenceSpecification on L is considered an actualGate that must be matched by a formalGate of D."}],"specification":[{"$type":"OpaqueExpression","$id":"PartDecomposition-assume-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"PartDecomposition-parts_of_internal_structures","$ns":"uml","name":"parts_of_internal_structures","constrainedElement":"PartDecomposition","ownedComment":[{"$type":"Comment","$id":"PartDecomposition-parts_of_internal_structures-_ownedComment.0","$ns":"uml","annotatedElement":"PartDecomposition-parts_of_internal_structures","body":"PartDecompositions apply only to Parts that are Parts of Internal Structures not to Parts of Collaborations."}],"specification":[{"$type":"OpaqueExpression","$id":"PartDecomposition-parts_of_internal_structures-_specification","$ns":"uml","language":""}]}],"generalization":[{"$type":"Generalization","$id":"PartDecomposition-_generalization.0","$ns":"uml","general":"InteractionUse"}]},{"$type":"Class","$id":"StateInvariant","$ns":"uml","name":"StateInvariant","ownedComment":[{"$type":"Comment","$id":"StateInvariant-_ownedComment.0","$ns":"uml","annotatedElement":"StateInvariant","body":"A StateInvariant is a runtime constraint on the participants of the Interaction. It may be used to specify a variety of different kinds of Constraints, such as values of Attributes or Variables, internal or external States, and so on. A StateInvariant is an InteractionFragment and it is placed on a Lifeline."}],"generalization":[{"$type":"Generalization","$id":"StateInvariant-_generalization.0","$ns":"uml","general":"InteractionFragment"}],"ownedAttribute":[{"$type":"Property","$id":"StateInvariant-covered","$ns":"uml","name":"covered","type":"Lifeline","redefinedProperty":"InteractionFragment-covered","association":"A_covered_stateInvariant","ownedComment":[{"$type":"Comment","$id":"StateInvariant-covered-_ownedComment.0","$ns":"uml","annotatedElement":"StateInvariant-covered","body":"References the Lifeline on which the StateInvariant appears."}]},{"$type":"Property","$id":"StateInvariant-invariant","$ns":"uml","name":"invariant","type":"Constraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_invariant_stateInvariant","ownedComment":[{"$type":"Comment","$id":"StateInvariant-invariant-_ownedComment.0","$ns":"uml","annotatedElement":"StateInvariant-invariant","body":"A Constraint that should hold at runtime for this StateInvariant."}]}]},{"$type":"Enumeration","$id":"InteractionOperatorKind","$ns":"uml","name":"InteractionOperatorKind","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind","body":"InteractionOperatorKind is an enumeration designating the different kinds of operators of CombinedFragments. The InteractionOperand defines the type of operator of a CombinedFragment."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-seq","$ns":"uml","name":"seq","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-seq-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-seq","body":"The InteractionOperatorKind seq designates that the CombinedFragment represents a weak sequencing between the behaviors of the operands."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-alt","$ns":"uml","name":"alt","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-alt-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-alt","body":"The InteractionOperatorKind alt designates that the CombinedFragment represents a choice of behavior. At most one of the operands will be chosen. The chosen operand must have an explicit or implicit guard expression that evaluates to true at this point in the interaction. An implicit true guard is implied if the operand has no guard."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-opt","$ns":"uml","name":"opt","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-opt-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-opt","body":"The InteractionOperatorKind opt designates that the CombinedFragment represents a choice of behavior where either the (sole) operand happens or nothing happens. An option is semantically equivalent to an alternative CombinedFragment where there is one operand with non-empty content and the second operand is empty."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-break","$ns":"uml","name":"break","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-break-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-break","body":"The InteractionOperatorKind break designates that the CombinedFragment represents a breaking scenario in the sense that the operand is a scenario that is performed instead of the remainder of the enclosing InteractionFragment. A break operator with a guard is chosen when the guard is true and the rest of the enclosing Interaction Fragment is ignored. When the guard of the break operand is false, the break operand is ignored and the rest of the enclosing InteractionFragment is chosen. The choice between a break operand without a guard and the rest of the enclosing InteractionFragment is done non-deterministically."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-par","$ns":"uml","name":"par","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-par-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-par","body":"The InteractionOperatorKind par designates that the CombinedFragment represents a parallel merge between the behaviors of the operands. The OccurrenceSpecifications of the different operands can be interleaved in any way as long as the ordering imposed by each operand as such is preserved."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-strict","$ns":"uml","name":"strict","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-strict-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-strict","body":"The InteractionOperatorKind strict designates that the CombinedFragment represents a strict sequencing between the behaviors of the operands. The semantics of strict sequencing defines a strict ordering of the operands on the first level within the CombinedFragment with interactionOperator strict. Therefore OccurrenceSpecifications within contained CombinedFragment will not directly be compared with other OccurrenceSpecifications of the enclosing CombinedFragment."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-loop","$ns":"uml","name":"loop","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-loop-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-loop","body":"The InteractionOperatorKind loop designates that the CombinedFragment represents a loop. The loop operand will be repeated a number of times."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-critical","$ns":"uml","name":"critical","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-critical-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-critical","body":"The InteractionOperatorKind critical designates that the CombinedFragment represents a critical region. A critical region means that the traces of the region cannot be interleaved by other OccurrenceSpecifications (on those Lifelines covered by the region). This means that the region is treated atomically by the enclosing fragment when determining the set of valid traces. Even though enclosing CombinedFragments may imply that some OccurrenceSpecifications may interleave into the region, such as with par-operator, this is prevented by defining a region."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-neg","$ns":"uml","name":"neg","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-neg-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-neg","body":"The InteractionOperatorKind neg designates that the CombinedFragment represents traces that are defined to be invalid."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-assert","$ns":"uml","name":"assert","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-assert-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-assert","body":"The InteractionOperatorKind assert designates that the CombinedFragment represents an assertion. The sequences of the operand of the assertion are the only valid continuations. All other continuations result in an invalid trace."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-ignore","$ns":"uml","name":"ignore","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-ignore-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-ignore","body":"The InteractionOperatorKind ignore designates that there are some message types that are not shown within this combined fragment. These message types can be considered insignificant and are implicitly ignored if they appear in a corresponding execution. Alternatively, one can understand ignore to mean that the message types that are ignored can appear anywhere in the traces."}]},{"$type":"EnumerationLiteral","$id":"InteractionOperatorKind-consider","$ns":"uml","name":"consider","ownedComment":[{"$type":"Comment","$id":"InteractionOperatorKind-consider-_ownedComment.0","$ns":"uml","annotatedElement":"InteractionOperatorKind-consider","body":"The InteractionOperatorKind consider designates which messages should be considered within this combined fragment. This is equivalent to defining every other message to be ignored."}]}]},{"$type":"Enumeration","$id":"MessageKind","$ns":"uml","name":"MessageKind","ownedComment":[{"$type":"Comment","$id":"MessageKind-_ownedComment.0","$ns":"uml","annotatedElement":"MessageKind","body":"This is an enumerated type that identifies the type of Message."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"MessageKind-complete","$ns":"uml","name":"complete","ownedComment":[{"$type":"Comment","$id":"MessageKind-complete-_ownedComment.0","$ns":"uml","annotatedElement":"MessageKind-complete","body":"sendEvent and receiveEvent are present"}]},{"$type":"EnumerationLiteral","$id":"MessageKind-lost","$ns":"uml","name":"lost","ownedComment":[{"$type":"Comment","$id":"MessageKind-lost-_ownedComment.0","$ns":"uml","annotatedElement":"MessageKind-lost","body":"sendEvent present and receiveEvent absent"}]},{"$type":"EnumerationLiteral","$id":"MessageKind-found","$ns":"uml","name":"found","ownedComment":[{"$type":"Comment","$id":"MessageKind-found-_ownedComment.0","$ns":"uml","annotatedElement":"MessageKind-found","body":"sendEvent absent and receiveEvent present"}]},{"$type":"EnumerationLiteral","$id":"MessageKind-unknown","$ns":"uml","name":"unknown","ownedComment":[{"$type":"Comment","$id":"MessageKind-unknown-_ownedComment.0","$ns":"uml","annotatedElement":"MessageKind-unknown","body":"sendEvent and receiveEvent absent (should not appear)"}]}]},{"$type":"Enumeration","$id":"MessageSort","$ns":"uml","name":"MessageSort","ownedComment":[{"$type":"Comment","$id":"MessageSort-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort","body":"This is an enumerated type that identifies the type of communication action that was used to generate the Message."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"MessageSort-synchCall","$ns":"uml","name":"synchCall","ownedComment":[{"$type":"Comment","$id":"MessageSort-synchCall-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-synchCall","body":"The message was generated by a synchronous call to an operation."}]},{"$type":"EnumerationLiteral","$id":"MessageSort-asynchCall","$ns":"uml","name":"asynchCall","ownedComment":[{"$type":"Comment","$id":"MessageSort-asynchCall-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-asynchCall","body":"The message was generated by an asynchronous call to an operation; i.e., a CallAction with isSynchronous = false."}]},{"$type":"EnumerationLiteral","$id":"MessageSort-asynchSignal","$ns":"uml","name":"asynchSignal","ownedComment":[{"$type":"Comment","$id":"MessageSort-asynchSignal-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-asynchSignal","body":"The message was generated by an asynchronous send action."}]},{"$type":"EnumerationLiteral","$id":"MessageSort-createMessage","$ns":"uml","name":"createMessage","ownedComment":[{"$type":"Comment","$id":"MessageSort-createMessage-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-createMessage","body":"The message designating the creation of another lifeline object."}]},{"$type":"EnumerationLiteral","$id":"MessageSort-deleteMessage","$ns":"uml","name":"deleteMessage","ownedComment":[{"$type":"Comment","$id":"MessageSort-deleteMessage-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-deleteMessage","body":"The message designating the termination of another lifeline."}]},{"$type":"EnumerationLiteral","$id":"MessageSort-reply","$ns":"uml","name":"reply","ownedComment":[{"$type":"Comment","$id":"MessageSort-reply-_ownedComment.0","$ns":"uml","annotatedElement":"MessageSort-reply","body":"The message is a reply message to an operation call."}]}]},{"$type":"Association","$id":"A_invariant_stateInvariant","$ns":"uml","name":"A_invariant_stateInvariant","memberEnd":"StateInvariant-invariant A_invariant_stateInvariant-stateInvariant","ownedEnd":[{"$type":"Property","$id":"A_invariant_stateInvariant-stateInvariant","$ns":"uml","name":"stateInvariant","type":"StateInvariant","subsettedProperty":"Element-owner","association":"A_invariant_stateInvariant","lowerValue":[{"$type":"LiteralInteger","$id":"A_invariant_stateInvariant-stateInvariant-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_covered_stateInvariant","$ns":"uml","name":"A_covered_stateInvariant","memberEnd":"StateInvariant-covered A_covered_stateInvariant-stateInvariant","ownedEnd":[{"$type":"Property","$id":"A_covered_stateInvariant-stateInvariant","$ns":"uml","name":"stateInvariant","type":"StateInvariant","subsettedProperty":"Lifeline-coveredBy","association":"A_covered_stateInvariant","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_covered_stateInvariant-stateInvariant-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_covered_stateInvariant-stateInvariant-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_covered_events","$ns":"uml","name":"A_covered_events","memberEnd":"OccurrenceSpecification-covered A_covered_events-events","ownedEnd":[{"$type":"Property","$id":"A_covered_events-events","$ns":"uml","name":"events","type":"OccurrenceSpecification","isOrdered":"true","subsettedProperty":"Lifeline-coveredBy","association":"A_covered_events","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_covered_events-events-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_covered_events-events-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_toBefore_after","$ns":"uml","name":"A_toBefore_after","memberEnd":"OccurrenceSpecification-toBefore GeneralOrdering-after"},{"$type":"Association","$id":"A_message_messageEnd","$ns":"uml","name":"A_message_messageEnd","memberEnd":"MessageEnd-message A_message_messageEnd-messageEnd","ownedEnd":[{"$type":"Property","$id":"A_message_messageEnd-messageEnd","$ns":"uml","name":"messageEnd","type":"MessageEnd","association":"A_message_messageEnd","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_message_messageEnd-messageEnd-_upperValue","$ns":"uml","value":"2"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_message_messageEnd-messageEnd-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_signature_message","$ns":"uml","name":"A_signature_message","memberEnd":"Message-signature A_signature_message-message","ownedEnd":[{"$type":"Property","$id":"A_signature_message-message","$ns":"uml","name":"message","type":"Message","association":"A_signature_message","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signature_message-message-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signature_message-message-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_connector_message","$ns":"uml","name":"A_connector_message","memberEnd":"Message-connector A_connector_message-message","ownedEnd":[{"$type":"Property","$id":"A_connector_message-message","$ns":"uml","name":"message","type":"Message","association":"A_connector_message","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_connector_message-message-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_connector_message-message-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_receiveEvent_endMessage","$ns":"uml","name":"A_receiveEvent_endMessage","memberEnd":"Message-receiveEvent A_receiveEvent_endMessage-endMessage","ownedEnd":[{"$type":"Property","$id":"A_receiveEvent_endMessage-endMessage","$ns":"uml","name":"endMessage","type":"Message","subsettedProperty":"MessageEnd-message","association":"A_receiveEvent_endMessage","lowerValue":[{"$type":"LiteralInteger","$id":"A_receiveEvent_endMessage-endMessage-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_sendEvent_endMessage","$ns":"uml","name":"A_sendEvent_endMessage","memberEnd":"Message-sendEvent A_sendEvent_endMessage-endMessage","ownedEnd":[{"$type":"Property","$id":"A_sendEvent_endMessage-endMessage","$ns":"uml","name":"endMessage","type":"Message","subsettedProperty":"MessageEnd-message","association":"A_sendEvent_endMessage","lowerValue":[{"$type":"LiteralInteger","$id":"A_sendEvent_endMessage-endMessage-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_argument_message","$ns":"uml","name":"A_argument_message","memberEnd":"Message-argument A_argument_message-message","ownedEnd":[{"$type":"Property","$id":"A_argument_message-message","$ns":"uml","name":"message","type":"Message","subsettedProperty":"Element-owner","association":"A_argument_message","lowerValue":[{"$type":"LiteralInteger","$id":"A_argument_message-message-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_selector_lifeline","$ns":"uml","name":"A_selector_lifeline","memberEnd":"Lifeline-selector A_selector_lifeline-lifeline","ownedEnd":[{"$type":"Property","$id":"A_selector_lifeline-lifeline","$ns":"uml","name":"lifeline","type":"Lifeline","subsettedProperty":"Element-owner","association":"A_selector_lifeline","lowerValue":[{"$type":"LiteralInteger","$id":"A_selector_lifeline-lifeline-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_decomposedAs_lifeline","$ns":"uml","name":"A_decomposedAs_lifeline","memberEnd":"Lifeline-decomposedAs A_decomposedAs_lifeline-lifeline","ownedEnd":[{"$type":"Property","$id":"A_decomposedAs_lifeline-lifeline","$ns":"uml","name":"lifeline","type":"Lifeline","association":"A_decomposedAs_lifeline"}]},{"$type":"Association","$id":"A_represents_lifeline","$ns":"uml","name":"A_represents_lifeline","memberEnd":"Lifeline-represents A_represents_lifeline-lifeline","ownedComment":[{"$type":"Comment","$id":"A_represents_lifeline-_ownedComment.0","$ns":"uml","annotatedElement":"A_represents_lifeline","body":"If a Part has multiplicity, multiple lifelines might be used to show it."}],"ownedEnd":[{"$type":"Property","$id":"A_represents_lifeline-lifeline","$ns":"uml","name":"lifeline","type":"Lifeline","association":"A_represents_lifeline","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_represents_lifeline-lifeline-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_represents_lifeline-lifeline-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_returnValueRecipient_interactionUse","$ns":"uml","name":"A_returnValueRecipient_interactionUse","memberEnd":"InteractionUse-returnValueRecipient A_returnValueRecipient_interactionUse-interactionUse","ownedEnd":[{"$type":"Property","$id":"A_returnValueRecipient_interactionUse-interactionUse","$ns":"uml","name":"interactionUse","type":"InteractionUse","association":"A_returnValueRecipient_interactionUse","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_returnValueRecipient_interactionUse-interactionUse-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_returnValueRecipient_interactionUse-interactionUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_refersTo_interactionUse","$ns":"uml","name":"A_refersTo_interactionUse","memberEnd":"InteractionUse-refersTo A_refersTo_interactionUse-interactionUse","ownedEnd":[{"$type":"Property","$id":"A_refersTo_interactionUse-interactionUse","$ns":"uml","name":"interactionUse","type":"InteractionUse","association":"A_refersTo_interactionUse","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_refersTo_interactionUse-interactionUse-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_refersTo_interactionUse-interactionUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_returnValue_interactionUse","$ns":"uml","name":"A_returnValue_interactionUse","memberEnd":"InteractionUse-returnValue A_returnValue_interactionUse-interactionUse","ownedEnd":[{"$type":"Property","$id":"A_returnValue_interactionUse-interactionUse","$ns":"uml","name":"interactionUse","type":"InteractionUse","subsettedProperty":"Element-owner","association":"A_returnValue_interactionUse","lowerValue":[{"$type":"LiteralInteger","$id":"A_returnValue_interactionUse-interactionUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_argument_interactionUse","$ns":"uml","name":"A_argument_interactionUse","memberEnd":"InteractionUse-argument A_argument_interactionUse-interactionUse","ownedEnd":[{"$type":"Property","$id":"A_argument_interactionUse-interactionUse","$ns":"uml","name":"interactionUse","type":"InteractionUse","subsettedProperty":"Element-owner","association":"A_argument_interactionUse","lowerValue":[{"$type":"LiteralInteger","$id":"A_argument_interactionUse-interactionUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_actualGate_interactionUse","$ns":"uml","name":"A_actualGate_interactionUse","memberEnd":"InteractionUse-actualGate A_actualGate_interactionUse-interactionUse","ownedEnd":[{"$type":"Property","$id":"A_actualGate_interactionUse-interactionUse","$ns":"uml","name":"interactionUse","type":"InteractionUse","subsettedProperty":"Element-owner","association":"A_actualGate_interactionUse","lowerValue":[{"$type":"LiteralInteger","$id":"A_actualGate_interactionUse-interactionUse-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_fragment_enclosingOperand","$ns":"uml","name":"A_fragment_enclosingOperand","memberEnd":"InteractionOperand-fragment InteractionFragment-enclosingOperand"},{"$type":"Association","$id":"A_guard_interactionOperand","$ns":"uml","name":"A_guard_interactionOperand","memberEnd":"InteractionOperand-guard A_guard_interactionOperand-interactionOperand","ownedEnd":[{"$type":"Property","$id":"A_guard_interactionOperand-interactionOperand","$ns":"uml","name":"interactionOperand","type":"InteractionOperand","subsettedProperty":"Element-owner","association":"A_guard_interactionOperand"}]},{"$type":"Association","$id":"A_generalOrdering_interactionFragment","$ns":"uml","name":"A_generalOrdering_interactionFragment","memberEnd":"InteractionFragment-generalOrdering A_generalOrdering_interactionFragment-interactionFragment","ownedEnd":[{"$type":"Property","$id":"A_generalOrdering_interactionFragment-interactionFragment","$ns":"uml","name":"interactionFragment","type":"InteractionFragment","subsettedProperty":"Element-owner","association":"A_generalOrdering_interactionFragment","lowerValue":[{"$type":"LiteralInteger","$id":"A_generalOrdering_interactionFragment-interactionFragment-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_covered_coveredBy","$ns":"uml","name":"A_covered_coveredBy","memberEnd":"InteractionFragment-covered Lifeline-coveredBy","ownedComment":[{"$type":"Comment","$id":"A_covered_coveredBy-_ownedComment.0","$ns":"uml","annotatedElement":"A_covered_coveredBy","body":"This association shows the lifelines that make up an interaction. A lifeline may be part of more than one interaction use."}]},{"$type":"Association","$id":"A_minint_interactionConstraint","$ns":"uml","name":"A_minint_interactionConstraint","memberEnd":"InteractionConstraint-minint A_minint_interactionConstraint-interactionConstraint","ownedEnd":[{"$type":"Property","$id":"A_minint_interactionConstraint-interactionConstraint","$ns":"uml","name":"interactionConstraint","type":"InteractionConstraint","subsettedProperty":"Element-owner","association":"A_minint_interactionConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_minint_interactionConstraint-interactionConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_maxint_interactionConstraint","$ns":"uml","name":"A_maxint_interactionConstraint","memberEnd":"InteractionConstraint-maxint A_maxint_interactionConstraint-interactionConstraint","ownedEnd":[{"$type":"Property","$id":"A_maxint_interactionConstraint-interactionConstraint","$ns":"uml","name":"interactionConstraint","type":"InteractionConstraint","subsettedProperty":"Element-owner","association":"A_maxint_interactionConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_maxint_interactionConstraint-interactionConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_action_interaction","$ns":"uml","name":"A_action_interaction","memberEnd":"Interaction-action A_action_interaction-interaction","ownedEnd":[{"$type":"Property","$id":"A_action_interaction-interaction","$ns":"uml","name":"interaction","type":"Interaction","subsettedProperty":"Element-owner","association":"A_action_interaction","lowerValue":[{"$type":"LiteralInteger","$id":"A_action_interaction-interaction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_formalGate_interaction","$ns":"uml","name":"A_formalGate_interaction","memberEnd":"Interaction-formalGate A_formalGate_interaction-interaction","ownedEnd":[{"$type":"Property","$id":"A_formalGate_interaction-interaction","$ns":"uml","name":"interaction","type":"Interaction","subsettedProperty":"NamedElement-namespace","association":"A_formalGate_interaction","lowerValue":[{"$type":"LiteralInteger","$id":"A_formalGate_interaction-interaction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_lifeline_interaction","$ns":"uml","name":"A_lifeline_interaction","memberEnd":"Interaction-lifeline Lifeline-interaction"},{"$type":"Association","$id":"A_fragment_enclosingInteraction","$ns":"uml","name":"A_fragment_enclosingInteraction","memberEnd":"Interaction-fragment InteractionFragment-enclosingInteraction"},{"$type":"Association","$id":"A_message_interaction","$ns":"uml","name":"A_message_interaction","memberEnd":"Interaction-message Message-interaction"},{"$type":"Association","$id":"A_before_toAfter","$ns":"uml","name":"A_before_toAfter","memberEnd":"GeneralOrdering-before OccurrenceSpecification-toAfter"},{"$type":"Association","$id":"A_finish_executionSpecification","$ns":"uml","name":"A_finish_executionSpecification","memberEnd":"ExecutionSpecification-finish A_finish_executionSpecification-executionSpecification","ownedComment":[{"$type":"Comment","$id":"A_finish_executionSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"A_finish_executionSpecification","body":"The event shows the time point at which the action completes execution."}],"ownedEnd":[{"$type":"Property","$id":"A_finish_executionSpecification-executionSpecification","$ns":"uml","name":"executionSpecification","type":"ExecutionSpecification","association":"A_finish_executionSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_finish_executionSpecification-executionSpecification-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_finish_executionSpecification-executionSpecification-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_start_executionSpecification","$ns":"uml","name":"A_start_executionSpecification","memberEnd":"ExecutionSpecification-start A_start_executionSpecification-executionSpecification","ownedComment":[{"$type":"Comment","$id":"A_start_executionSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"A_start_executionSpecification","body":"The event shows the time point at which the action begins execution."}],"ownedEnd":[{"$type":"Property","$id":"A_start_executionSpecification-executionSpecification","$ns":"uml","name":"executionSpecification","type":"ExecutionSpecification","association":"A_start_executionSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_start_executionSpecification-executionSpecification-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_start_executionSpecification-executionSpecification-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_execution_executionOccurrenceSpecification","$ns":"uml","name":"A_execution_executionOccurrenceSpecification","memberEnd":"ExecutionOccurrenceSpecification-execution A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification","ownedEnd":[{"$type":"Property","$id":"A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification","$ns":"uml","name":"executionOccurrenceSpecification","type":"ExecutionOccurrenceSpecification","association":"A_execution_executionOccurrenceSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification-_upperValue","$ns":"uml","value":"2"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_execution_executionOccurrenceSpecification-executionOccurrenceSpecification-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_message_considerIgnoreFragment","$ns":"uml","name":"A_message_considerIgnoreFragment","memberEnd":"ConsiderIgnoreFragment-message A_message_considerIgnoreFragment-considerIgnoreFragment","ownedEnd":[{"$type":"Property","$id":"A_message_considerIgnoreFragment-considerIgnoreFragment","$ns":"uml","name":"considerIgnoreFragment","type":"ConsiderIgnoreFragment","association":"A_message_considerIgnoreFragment","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_message_considerIgnoreFragment-considerIgnoreFragment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_message_considerIgnoreFragment-considerIgnoreFragment-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_cfragmentGate_combinedFragment","$ns":"uml","name":"A_cfragmentGate_combinedFragment","memberEnd":"CombinedFragment-cfragmentGate A_cfragmentGate_combinedFragment-combinedFragment","ownedEnd":[{"$type":"Property","$id":"A_cfragmentGate_combinedFragment-combinedFragment","$ns":"uml","name":"combinedFragment","type":"CombinedFragment","subsettedProperty":"Element-owner","association":"A_cfragmentGate_combinedFragment","lowerValue":[{"$type":"LiteralInteger","$id":"A_cfragmentGate_combinedFragment-combinedFragment-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_operand_combinedFragment","$ns":"uml","name":"A_operand_combinedFragment","memberEnd":"CombinedFragment-operand A_operand_combinedFragment-combinedFragment","ownedEnd":[{"$type":"Property","$id":"A_operand_combinedFragment-combinedFragment","$ns":"uml","name":"combinedFragment","type":"CombinedFragment","subsettedProperty":"Element-owner","association":"A_operand_combinedFragment","lowerValue":[{"$type":"LiteralInteger","$id":"A_operand_combinedFragment-combinedFragment-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_behavior_behaviorExecutionSpecification","$ns":"uml","name":"A_behavior_behaviorExecutionSpecification","memberEnd":"BehaviorExecutionSpecification-behavior A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification","ownedEnd":[{"$type":"Property","$id":"A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification","$ns":"uml","name":"behaviorExecutionSpecification","type":"BehaviorExecutionSpecification","association":"A_behavior_behaviorExecutionSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_behavior_behaviorExecutionSpecification-behaviorExecutionSpecification-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_action_actionExecutionSpecification","$ns":"uml","name":"A_action_actionExecutionSpecification","memberEnd":"ActionExecutionSpecification-action A_action_actionExecutionSpecification-actionExecutionSpecification","ownedEnd":[{"$type":"Property","$id":"A_action_actionExecutionSpecification-actionExecutionSpecification","$ns":"uml","name":"actionExecutionSpecification","type":"ActionExecutionSpecification","association":"A_action_actionExecutionSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_action_actionExecutionSpecification-actionExecutionSpecification-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_action_actionExecutionSpecification-actionExecutionSpecification-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"InformationFlows","$ns":"uml","name":"InformationFlows","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"UseCases"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Deployments"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.3","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.4","$ns":"uml","importedPackage":"SimpleClassifiers"},{"$type":"PackageImport","$id":"_packageImport.5","$ns":"uml","importedPackage":"Packages"},{"$type":"PackageImport","$id":"_packageImport.6","$ns":"uml","importedPackage":"Activities"}],"packagedElement":[{"$type":"Class","$id":"InformationFlow","$ns":"uml","name":"InformationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow","body":"InformationFlows describe circulation of information through a system in a general manner. They do not specify the nature of the information, mechanisms by which it is conveyed, sequences of exchange or any control conditions. During more detailed modeling, representation and realization links may be added to specify which model elements implement an InformationFlow and to show how information is conveyed.  InformationFlows require some kind of “information channel” for unidirectional transmission of information items from sources to targets.  They specify the information channel’s realizations, if any, and identify the information that flows along them.  Information moving along the information channel may be represented by abstract InformationItems and by concrete Classifiers."}],"ownedRule":[{"$type":"Constraint","$id":"InformationFlow-must_conform","$ns":"uml","name":"must_conform","constrainedElement":"InformationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-must_conform-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-must_conform","body":"The sources and targets of the information flow must conform to the sources and targets or conversely the targets and sources of the realization relationships."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationFlow-must_conform-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"InformationFlow-sources_and_targets_kind","$ns":"uml","name":"sources_and_targets_kind","constrainedElement":"InformationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-sources_and_targets_kind-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-sources_and_targets_kind","body":"The sources and targets of the information flow can only be one of the following kind: Actor, Node, UseCase, Artifact, Class, Component, Port, Property, Interface, Package, ActivityNode, ActivityPartition,\r\nBehavior and InstanceSpecification except when its classifier is a relationship (i.e. it represents a link)."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationFlow-sources_and_targets_kind-_specification","$ns":"uml","language":"OCL","body":"(self.informationSource->forAll( sis |\r\n  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or \r\n  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or \r\n  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or \r\n  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) \r\n\r\nand\r\n\r\n(self.informationTarget->forAll( sit | \r\n  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or \r\n  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or \r\n  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or \r\n(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))"}]},{"$type":"Constraint","$id":"InformationFlow-convey_classifiers","$ns":"uml","name":"convey_classifiers","constrainedElement":"InformationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-convey_classifiers-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-convey_classifiers","body":"An information flow can only convey classifiers that are allowed to represent an information item."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationFlow-convey_classifiers-_specification","$ns":"uml","language":"OCL","body":"self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)\r\n  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))"}]}],"generalization":[{"$type":"Generalization","$id":"InformationFlow-_generalization.0","$ns":"uml","general":"DirectedRelationship"},{"$type":"Generalization","$id":"InformationFlow-_generalization.1","$ns":"uml","general":"PackageableElement"}],"ownedAttribute":[{"$type":"Property","$id":"InformationFlow-conveyed","$ns":"uml","name":"conveyed","type":"Classifier","association":"A_conveyed_conveyingFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-conveyed-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-conveyed","body":"Specifies the information items that may circulate on this information flow."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-conveyed-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"InformationFlow-informationSource","$ns":"uml","name":"informationSource","type":"NamedElement","subsettedProperty":"DirectedRelationship-source","association":"A_informationSource_informationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-informationSource-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-informationSource","body":"Defines from which source the conveyed InformationItems are initiated."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-informationSource-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"InformationFlow-informationTarget","$ns":"uml","name":"informationTarget","type":"NamedElement","subsettedProperty":"DirectedRelationship-target","association":"A_informationTarget_informationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-informationTarget-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-informationTarget","body":"Defines to which target the conveyed InformationItems are directed."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-informationTarget-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"InformationFlow-realization","$ns":"uml","name":"realization","type":"Relationship","association":"A_realization_abstraction_flow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-realization-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-realization","body":"Determines which Relationship will realize the specified flow."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-realization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InformationFlow-realization-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InformationFlow-realizingActivityEdge","$ns":"uml","name":"realizingActivityEdge","type":"ActivityEdge","association":"A_realizingActivityEdge_informationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-realizingActivityEdge-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-realizingActivityEdge","body":"Determines which ActivityEdges will realize the specified flow."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-realizingActivityEdge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InformationFlow-realizingActivityEdge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InformationFlow-realizingConnector","$ns":"uml","name":"realizingConnector","type":"Connector","association":"A_realizingConnector_informationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-realizingConnector-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-realizingConnector","body":"Determines which Connectors will realize the specified flow."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-realizingConnector-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InformationFlow-realizingConnector-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InformationFlow-realizingMessage","$ns":"uml","name":"realizingMessage","type":"Message","association":"A_realizingMessage_informationFlow","ownedComment":[{"$type":"Comment","$id":"InformationFlow-realizingMessage-_ownedComment.0","$ns":"uml","annotatedElement":"InformationFlow-realizingMessage","body":"Determines which Messages will realize the specified flow."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationFlow-realizingMessage-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InformationFlow-realizingMessage-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InformationItem","$ns":"uml","name":"InformationItem","ownedComment":[{"$type":"Comment","$id":"InformationItem-_ownedComment.0","$ns":"uml","annotatedElement":"InformationItem","body":"InformationItems represent many kinds of information that can flow from sources to targets in very abstract ways.  They represent the kinds of information that may move within a system, but do not elaborate details of the transferred information.  Details of transferred information are the province of other Classifiers that may ultimately define InformationItems.  Consequently, InformationItems cannot be instantiated and do not themselves have features, generalizations, or associations. An important use of InformationItems is to represent information during early design stages, possibly before the detailed modeling decisions that will ultimately define them have been made. Another purpose of InformationItems is to abstract portions of complex models in less precise, but perhaps more general and communicable, ways. "}],"ownedRule":[{"$type":"Constraint","$id":"InformationItem-sources_and_targets","$ns":"uml","name":"sources_and_targets","constrainedElement":"InformationItem","ownedComment":[{"$type":"Comment","$id":"InformationItem-sources_and_targets-_ownedComment.0","$ns":"uml","annotatedElement":"InformationItem-sources_and_targets","body":"The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any. The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationItem-sources_and_targets-_specification","$ns":"uml","language":"OCL","body":"(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |\r\n  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and\r\n    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and\r\n      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or\r\n        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))"}]},{"$type":"Constraint","$id":"InformationItem-has_no","$ns":"uml","name":"has_no","constrainedElement":"InformationItem","ownedComment":[{"$type":"Comment","$id":"InformationItem-has_no-_ownedComment.0","$ns":"uml","annotatedElement":"InformationItem-has_no","body":"An informationItem has no feature, no generalization, and no associations."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationItem-has_no-_specification","$ns":"uml","language":"OCL","body":"self.generalization->isEmpty() and self.feature->isEmpty()"}]},{"$type":"Constraint","$id":"InformationItem-not_instantiable","$ns":"uml","name":"not_instantiable","constrainedElement":"InformationItem","ownedComment":[{"$type":"Comment","$id":"InformationItem-not_instantiable-_ownedComment.0","$ns":"uml","annotatedElement":"InformationItem-not_instantiable","body":"It is not instantiable."}],"specification":[{"$type":"OpaqueExpression","$id":"InformationItem-not_instantiable-_specification","$ns":"uml","language":"OCL","body":"isAbstract"}]}],"generalization":[{"$type":"Generalization","$id":"InformationItem-_generalization.0","$ns":"uml","general":"Classifier"}],"ownedAttribute":[{"$type":"Property","$id":"InformationItem-represented","$ns":"uml","name":"represented","type":"Classifier","association":"A_represented_representation","ownedComment":[{"$type":"Comment","$id":"InformationItem-represented-_ownedComment.0","$ns":"uml","annotatedElement":"InformationItem-represented","body":"Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InformationItem-represented-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InformationItem-represented-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_represented_representation","$ns":"uml","name":"A_represented_representation","memberEnd":"InformationItem-represented A_represented_representation-representation","ownedEnd":[{"$type":"Property","$id":"A_represented_representation-representation","$ns":"uml","name":"representation","type":"InformationItem","association":"A_represented_representation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_represented_representation-representation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_represented_representation-representation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_conveyed_conveyingFlow","$ns":"uml","name":"A_conveyed_conveyingFlow","memberEnd":"InformationFlow-conveyed A_conveyed_conveyingFlow-conveyingFlow","ownedEnd":[{"$type":"Property","$id":"A_conveyed_conveyingFlow-conveyingFlow","$ns":"uml","name":"conveyingFlow","type":"InformationFlow","association":"A_conveyed_conveyingFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_conveyed_conveyingFlow-conveyingFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_conveyed_conveyingFlow-conveyingFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_realizingActivityEdge_informationFlow","$ns":"uml","name":"A_realizingActivityEdge_informationFlow","memberEnd":"InformationFlow-realizingActivityEdge A_realizingActivityEdge_informationFlow-informationFlow","ownedEnd":[{"$type":"Property","$id":"A_realizingActivityEdge_informationFlow-informationFlow","$ns":"uml","name":"informationFlow","type":"InformationFlow","association":"A_realizingActivityEdge_informationFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_realizingActivityEdge_informationFlow-informationFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_realizingActivityEdge_informationFlow-informationFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_realizingMessage_informationFlow","$ns":"uml","name":"A_realizingMessage_informationFlow","memberEnd":"InformationFlow-realizingMessage A_realizingMessage_informationFlow-informationFlow","ownedEnd":[{"$type":"Property","$id":"A_realizingMessage_informationFlow-informationFlow","$ns":"uml","name":"informationFlow","type":"InformationFlow","association":"A_realizingMessage_informationFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_realizingMessage_informationFlow-informationFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_realizingMessage_informationFlow-informationFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_informationSource_informationFlow","$ns":"uml","name":"A_informationSource_informationFlow","memberEnd":"InformationFlow-informationSource A_informationSource_informationFlow-informationFlow","ownedEnd":[{"$type":"Property","$id":"A_informationSource_informationFlow-informationFlow","$ns":"uml","name":"informationFlow","type":"InformationFlow","subsettedProperty":"A_source_directedRelationship-directedRelationship","association":"A_informationSource_informationFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_informationSource_informationFlow-informationFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_informationSource_informationFlow-informationFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_realization_abstraction_flow","$ns":"uml","name":"A_realization_abstraction_flow","memberEnd":"InformationFlow-realization A_realization_abstraction_flow-abstraction","ownedEnd":[{"$type":"Property","$id":"A_realization_abstraction_flow-abstraction","$ns":"uml","name":"abstraction","type":"InformationFlow","association":"A_realization_abstraction_flow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_realization_abstraction_flow-abstraction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_realization_abstraction_flow-abstraction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_realizingConnector_informationFlow","$ns":"uml","name":"A_realizingConnector_informationFlow","memberEnd":"InformationFlow-realizingConnector A_realizingConnector_informationFlow-informationFlow","ownedEnd":[{"$type":"Property","$id":"A_realizingConnector_informationFlow-informationFlow","$ns":"uml","name":"informationFlow","type":"InformationFlow","association":"A_realizingConnector_informationFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_realizingConnector_informationFlow-informationFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_realizingConnector_informationFlow-informationFlow-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_informationTarget_informationFlow","$ns":"uml","name":"A_informationTarget_informationFlow","memberEnd":"InformationFlow-informationTarget A_informationTarget_informationFlow-informationFlow","ownedEnd":[{"$type":"Property","$id":"A_informationTarget_informationFlow-informationFlow","$ns":"uml","name":"informationFlow","type":"InformationFlow","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_informationTarget_informationFlow","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_informationTarget_informationFlow-informationFlow-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_informationTarget_informationFlow-informationFlow-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"Deployments","$ns":"uml","name":"Deployments","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"CommonStructure"}],"packagedElement":[{"$type":"Class","$id":"Artifact","$ns":"uml","name":"Artifact","ownedComment":[{"$type":"Comment","$id":"Artifact-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact","body":"An artifact is the specification of a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system. Examples of artifacts include model files, source files, scripts, and binary executable files, a table in a database system, a development deliverable, or a word-processing document, a mail message.\nAn artifact is the source of a deployment to a node."}],"generalization":[{"$type":"Generalization","$id":"Artifact-_generalization.0","$ns":"uml","general":"Classifier"},{"$type":"Generalization","$id":"Artifact-_generalization.1","$ns":"uml","general":"DeployedArtifact"}],"ownedAttribute":[{"$type":"Property","$id":"Artifact-fileName","$ns":"uml","name":"fileName","ownedComment":[{"$type":"Comment","$id":"Artifact-fileName-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact-fileName","body":"A concrete name that is used to refer to the Artifact in a physical context. Example: file system name, universal resource locator."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Artifact-fileName-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Artifact-manifestation","$ns":"uml","name":"manifestation","type":"Manifestation","aggregation":"composite","subsettedProperty":"Element-ownedElement NamedElement-clientDependency","association":"A_manifestation_artifact","ownedComment":[{"$type":"Comment","$id":"Artifact-manifestation-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact-manifestation","body":"The set of model elements that are manifested in the Artifact. That is, these model elements are utilized in the construction (or generation) of the artifact."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Artifact-manifestation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Artifact-manifestation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Artifact-nestedArtifact","$ns":"uml","name":"nestedArtifact","type":"Artifact","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_nestedArtifact_artifact","ownedComment":[{"$type":"Comment","$id":"Artifact-nestedArtifact-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact-nestedArtifact","body":"The Artifacts that are defined (nested) within the Artifact. The association is a specialization of the ownedMember association from Namespace to NamedElement."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Artifact-nestedArtifact-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Artifact-nestedArtifact-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Artifact-ownedAttribute","$ns":"uml","name":"ownedAttribute","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Classifier-attribute Namespace-ownedMember","association":"A_ownedAttribute_artifact","ownedComment":[{"$type":"Comment","$id":"Artifact-ownedAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact-ownedAttribute","body":"The attributes or association ends defined for the Artifact. The association is a specialization of the ownedMember association."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Artifact-ownedAttribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Artifact-ownedAttribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Artifact-ownedOperation","$ns":"uml","name":"ownedOperation","type":"Operation","isOrdered":"true","aggregation":"composite","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature Namespace-ownedMember","association":"A_ownedOperation_artifact","ownedComment":[{"$type":"Comment","$id":"Artifact-ownedOperation-_ownedComment.0","$ns":"uml","annotatedElement":"Artifact-ownedOperation","body":"The Operations defined for the Artifact. The association is a specialization of the ownedMember association."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Artifact-ownedOperation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Artifact-ownedOperation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"CommunicationPath","$ns":"uml","name":"CommunicationPath","ownedComment":[{"$type":"Comment","$id":"CommunicationPath-_ownedComment.0","$ns":"uml","annotatedElement":"CommunicationPath","body":"A communication path is an association between two deployment targets, through which they are able to exchange signals and messages."}],"ownedRule":[{"$type":"Constraint","$id":"CommunicationPath-association_ends","$ns":"uml","name":"association_ends","constrainedElement":"CommunicationPath","ownedComment":[{"$type":"Comment","$id":"CommunicationPath-association_ends-_ownedComment.0","$ns":"uml","annotatedElement":"CommunicationPath-association_ends","body":"The association ends of a CommunicationPath are typed by DeploymentTargets."}],"specification":[{"$type":"OpaqueExpression","$id":"CommunicationPath-association_ends-_specification","$ns":"uml","language":"OCL","body":"endType->forAll (oclIsKindOf(DeploymentTarget))"}]}],"generalization":[{"$type":"Generalization","$id":"CommunicationPath-_generalization.0","$ns":"uml","general":"Association"}]},{"$type":"Class","$id":"DeployedArtifact","$ns":"uml","name":"DeployedArtifact","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"DeployedArtifact-_ownedComment.0","$ns":"uml","annotatedElement":"DeployedArtifact","body":"A deployed artifact is an artifact or artifact instance that has been deployed to a deployment target."}],"generalization":[{"$type":"Generalization","$id":"DeployedArtifact-_generalization.0","$ns":"uml","general":"NamedElement"}]},{"$type":"Class","$id":"Deployment","$ns":"uml","name":"Deployment","ownedComment":[{"$type":"Comment","$id":"Deployment-_ownedComment.0","$ns":"uml","annotatedElement":"Deployment","body":"A deployment is the allocation of an artifact or artifact instance to a deployment target.\nA component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files."}],"generalization":[{"$type":"Generalization","$id":"Deployment-_generalization.0","$ns":"uml","general":"Dependency"}],"ownedAttribute":[{"$type":"Property","$id":"Deployment-configuration","$ns":"uml","name":"configuration","type":"DeploymentSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_configuration_deployment","ownedComment":[{"$type":"Comment","$id":"Deployment-configuration-_ownedComment.0","$ns":"uml","annotatedElement":"Deployment-configuration","body":"The specification of properties that parameterize the deployment and execution of one or more Artifacts."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Deployment-configuration-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Deployment-configuration-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Deployment-deployedArtifact","$ns":"uml","name":"deployedArtifact","type":"DeployedArtifact","subsettedProperty":"Dependency-supplier","association":"A_deployedArtifact_deploymentForArtifact","ownedComment":[{"$type":"Comment","$id":"Deployment-deployedArtifact-_ownedComment.0","$ns":"uml","annotatedElement":"Deployment-deployedArtifact","body":"The Artifacts that are deployed onto a Node. This association specializes the supplier association."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Deployment-deployedArtifact-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Deployment-deployedArtifact-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Deployment-location","$ns":"uml","name":"location","type":"DeploymentTarget","subsettedProperty":"Dependency-client Element-owner","association":"A_deployment_location","ownedComment":[{"$type":"Comment","$id":"Deployment-location-_ownedComment.0","$ns":"uml","annotatedElement":"Deployment-location","body":"The DeployedTarget which is the target of a Deployment."}]}]},{"$type":"Class","$id":"DeploymentSpecification","$ns":"uml","name":"DeploymentSpecification","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification","body":"A deployment specification specifies a set of properties that determine execution parameters of a component artifact that is deployed on a node. A deployment specification can be aimed at a specific type of container. An artifact that reifies or implements deployment specification properties is a deployment descriptor."}],"ownedRule":[{"$type":"Constraint","$id":"DeploymentSpecification-deployment_target","$ns":"uml","name":"deployment_target","constrainedElement":"DeploymentSpecification","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-deployment_target-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification-deployment_target","body":"The DeploymentTarget of a DeploymentSpecification is a kind of ExecutionEnvironment."}],"specification":[{"$type":"OpaqueExpression","$id":"DeploymentSpecification-deployment_target-_specification","$ns":"uml","language":"OCL","body":"deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))"}]},{"$type":"Constraint","$id":"DeploymentSpecification-deployed_elements","$ns":"uml","name":"deployed_elements","constrainedElement":"DeploymentSpecification","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-deployed_elements-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification-deployed_elements","body":"The deployedElements of a DeploymentTarget that are involved in a Deployment that has an associated Deployment-Specification is a kind of Component (i.e., the configured components)."}],"specification":[{"$type":"OpaqueExpression","$id":"DeploymentSpecification-deployed_elements-_specification","$ns":"uml","language":"OCL","body":"deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))"}]}],"generalization":[{"$type":"Generalization","$id":"DeploymentSpecification-_generalization.0","$ns":"uml","general":"Artifact"}],"ownedAttribute":[{"$type":"Property","$id":"DeploymentSpecification-deployment","$ns":"uml","name":"deployment","type":"Deployment","subsettedProperty":"Element-owner","association":"A_configuration_deployment","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-deployment-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification-deployment","body":"The deployment with which the DeploymentSpecification is associated."}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentSpecification-deployment-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DeploymentSpecification-deploymentLocation","$ns":"uml","name":"deploymentLocation","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-deploymentLocation-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification-deploymentLocation","body":"The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'"}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentSpecification-deploymentLocation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DeploymentSpecification-executionLocation","$ns":"uml","name":"executionLocation","ownedComment":[{"$type":"Comment","$id":"DeploymentSpecification-executionLocation-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentSpecification-executionLocation","body":"The location where a component Artifact executes. This may be a local or remote location."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentSpecification-executionLocation-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"DeploymentTarget","$ns":"uml","name":"DeploymentTarget","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"DeploymentTarget-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentTarget","body":"A deployment target is the location for a deployed artifact."}],"generalization":[{"$type":"Generalization","$id":"DeploymentTarget-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"DeploymentTarget-deployedElement","$ns":"uml","name":"deployedElement","type":"PackageableElement","isReadOnly":"true","isDerived":"true","association":"A_deployedElement_deploymentTarget","ownedComment":[{"$type":"Comment","$id":"DeploymentTarget-deployedElement-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentTarget-deployedElement","body":"The set of elements that are manifested in an Artifact that is involved in Deployment to a DeploymentTarget."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DeploymentTarget-deployedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentTarget-deployedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"DeploymentTarget-deployment","$ns":"uml","name":"deployment","type":"Deployment","aggregation":"composite","subsettedProperty":"Element-ownedElement NamedElement-clientDependency","association":"A_deployment_location","ownedComment":[{"$type":"Comment","$id":"DeploymentTarget-deployment-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentTarget-deployment","body":"The set of Deployments for a DeploymentTarget."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DeploymentTarget-deployment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentTarget-deployment-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"DeploymentTarget-deployedElement.1","$ns":"uml","name":"deployedElement","isQuery":"true","bodyCondition":"DeploymentTarget-deployedElement.1-spec","ownedComment":[{"$type":"Comment","$id":"DeploymentTarget-deployedElement.1-_ownedComment.0","$ns":"uml","annotatedElement":"DeploymentTarget-deployedElement.1","body":"Derivation for DeploymentTarget::/deployedElement"}],"ownedRule":[{"$type":"Constraint","$id":"DeploymentTarget-deployedElement.1-spec","$ns":"uml","name":"spec","constrainedElement":"DeploymentTarget-deployedElement.1 DeploymentTarget-deployedElement","specification":[{"$type":"OpaqueExpression","$id":"DeploymentTarget-deployedElement.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (deployment.deployedArtifact->select(oclIsKindOf(Artifact))->collect(oclAsType(Artifact).manifestation)->collect(utilizedElement)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"DeploymentTarget-deployedElement.1-result","$ns":"uml","name":"result","type":"PackageableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DeploymentTarget-deployedElement.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DeploymentTarget-deployedElement.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Device","$ns":"uml","name":"Device","ownedComment":[{"$type":"Comment","$id":"Device-_ownedComment.0","$ns":"uml","annotatedElement":"Device","body":"A device is a physical computational resource with processing capability upon which artifacts may be deployed for execution. Devices may be complex (i.e., they may consist of other devices)."}],"generalization":[{"$type":"Generalization","$id":"Device-_generalization.0","$ns":"uml","general":"Node"}]},{"$type":"Class","$id":"ExecutionEnvironment","$ns":"uml","name":"ExecutionEnvironment","ownedComment":[{"$type":"Comment","$id":"ExecutionEnvironment-_ownedComment.0","$ns":"uml","annotatedElement":"ExecutionEnvironment","body":"An execution environment is a node that offers an execution environment for specific types of components that are deployed on it in the form of executable artifacts."}],"generalization":[{"$type":"Generalization","$id":"ExecutionEnvironment-_generalization.0","$ns":"uml","general":"Node"}]},{"$type":"Class","$id":"Manifestation","$ns":"uml","name":"Manifestation","ownedComment":[{"$type":"Comment","$id":"Manifestation-_ownedComment.0","$ns":"uml","annotatedElement":"Manifestation","body":"A manifestation is the concrete physical rendering of one or more model elements by an artifact."}],"generalization":[{"$type":"Generalization","$id":"Manifestation-_generalization.0","$ns":"uml","general":"Abstraction"}],"ownedAttribute":[{"$type":"Property","$id":"Manifestation-utilizedElement","$ns":"uml","name":"utilizedElement","type":"PackageableElement","subsettedProperty":"Dependency-supplier","association":"A_utilizedElement_manifestation","ownedComment":[{"$type":"Comment","$id":"Manifestation-utilizedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Manifestation-utilizedElement","body":"The model element that is utilized in the manifestation in an Artifact."}]}]},{"$type":"Class","$id":"Node","$ns":"uml","name":"Node","ownedComment":[{"$type":"Comment","$id":"Node-_ownedComment.0","$ns":"uml","annotatedElement":"Node","body":"A Node is computational resource upon which artifacts may be deployed for execution. Nodes can be interconnected through communication paths to define network structures."}],"ownedRule":[{"$type":"Constraint","$id":"Node-internal_structure","$ns":"uml","name":"internal_structure","constrainedElement":"Node","ownedComment":[{"$type":"Comment","$id":"Node-internal_structure-_ownedComment.0","$ns":"uml","annotatedElement":"Node-internal_structure","body":"The internal structure of a Node (if defined) consists solely of parts of type Node."}],"specification":[{"$type":"OpaqueExpression","$id":"Node-internal_structure-_specification","$ns":"uml","language":"OCL","body":"part->forAll(oclIsKindOf(Node))"}]}],"generalization":[{"$type":"Generalization","$id":"Node-_generalization.1","$ns":"uml","general":"Class"},{"$type":"Generalization","$id":"Node-_generalization.0","$ns":"uml","general":"DeploymentTarget"}],"ownedAttribute":[{"$type":"Property","$id":"Node-nestedNode","$ns":"uml","name":"nestedNode","type":"Node","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_nestedNode_node","ownedComment":[{"$type":"Comment","$id":"Node-nestedNode-_ownedComment.0","$ns":"uml","annotatedElement":"Node-nestedNode","body":"The Nodes that are defined (nested) within the Node."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Node-nestedNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Node-nestedNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_nestedNode_node","$ns":"uml","name":"A_nestedNode_node","memberEnd":"Node-nestedNode A_nestedNode_node-node","ownedEnd":[{"$type":"Property","$id":"A_nestedNode_node-node","$ns":"uml","name":"node","type":"Node","subsettedProperty":"NamedElement-namespace","association":"A_nestedNode_node","lowerValue":[{"$type":"LiteralInteger","$id":"A_nestedNode_node-node-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_utilizedElement_manifestation","$ns":"uml","name":"A_utilizedElement_manifestation","memberEnd":"Manifestation-utilizedElement A_utilizedElement_manifestation-manifestation","ownedEnd":[{"$type":"Property","$id":"A_utilizedElement_manifestation-manifestation","$ns":"uml","name":"manifestation","type":"Manifestation","subsettedProperty":"A_supplier_supplierDependency-supplierDependency","association":"A_utilizedElement_manifestation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_utilizedElement_manifestation-manifestation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_utilizedElement_manifestation-manifestation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_deployedElement_deploymentTarget","$ns":"uml","name":"A_deployedElement_deploymentTarget","memberEnd":"DeploymentTarget-deployedElement A_deployedElement_deploymentTarget-deploymentTarget","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_deployedElement_deploymentTarget-deploymentTarget","$ns":"uml","name":"deploymentTarget","type":"DeploymentTarget","association":"A_deployedElement_deploymentTarget","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_deployedElement_deploymentTarget-deploymentTarget-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_deployedElement_deploymentTarget-deploymentTarget-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_deployment_location","$ns":"uml","name":"A_deployment_location","memberEnd":"DeploymentTarget-deployment Deployment-location"},{"$type":"Association","$id":"A_deployedArtifact_deploymentForArtifact","$ns":"uml","name":"A_deployedArtifact_deploymentForArtifact","memberEnd":"Deployment-deployedArtifact A_deployedArtifact_deploymentForArtifact-deploymentForArtifact","ownedEnd":[{"$type":"Property","$id":"A_deployedArtifact_deploymentForArtifact-deploymentForArtifact","$ns":"uml","name":"deploymentForArtifact","type":"Deployment","subsettedProperty":"A_supplier_supplierDependency-supplierDependency","association":"A_deployedArtifact_deploymentForArtifact","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_deployedArtifact_deploymentForArtifact-deploymentForArtifact-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_deployedArtifact_deploymentForArtifact-deploymentForArtifact-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_configuration_deployment","$ns":"uml","name":"A_configuration_deployment","memberEnd":"Deployment-configuration DeploymentSpecification-deployment"},{"$type":"Association","$id":"A_ownedAttribute_artifact","$ns":"uml","name":"A_ownedAttribute_artifact","memberEnd":"Artifact-ownedAttribute A_ownedAttribute_artifact-artifact","ownedEnd":[{"$type":"Property","$id":"A_ownedAttribute_artifact-artifact","$ns":"uml","name":"artifact","type":"Artifact","subsettedProperty":"A_attribute_classifier-classifier NamedElement-namespace","association":"A_ownedAttribute_artifact","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedAttribute_artifact-artifact-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedOperation_artifact","$ns":"uml","name":"A_ownedOperation_artifact","memberEnd":"Artifact-ownedOperation A_ownedOperation_artifact-artifact","ownedEnd":[{"$type":"Property","$id":"A_ownedOperation_artifact-artifact","$ns":"uml","name":"artifact","type":"Artifact","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_ownedOperation_artifact","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedOperation_artifact-artifact-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_nestedArtifact_artifact","$ns":"uml","name":"A_nestedArtifact_artifact","memberEnd":"Artifact-nestedArtifact A_nestedArtifact_artifact-artifact","ownedEnd":[{"$type":"Property","$id":"A_nestedArtifact_artifact-artifact","$ns":"uml","name":"artifact","type":"Artifact","subsettedProperty":"NamedElement-namespace","association":"A_nestedArtifact_artifact","lowerValue":[{"$type":"LiteralInteger","$id":"A_nestedArtifact_artifact-artifact-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_manifestation_artifact","$ns":"uml","name":"A_manifestation_artifact","memberEnd":"Artifact-manifestation A_manifestation_artifact-artifact","ownedEnd":[{"$type":"Property","$id":"A_manifestation_artifact-artifact","$ns":"uml","name":"artifact","type":"Artifact","subsettedProperty":"Dependency-client Element-owner","association":"A_manifestation_artifact"}]}]},{"$type":"Package","$id":"CommonStructure","$ns":"uml","name":"CommonStructure","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Packages"}],"packagedElement":[{"$type":"Class","$id":"Abstraction","$ns":"uml","name":"Abstraction","ownedComment":[{"$type":"Comment","$id":"Abstraction-_ownedComment.0","$ns":"uml","annotatedElement":"Abstraction","body":"An Abstraction is a Relationship that relates two Elements or sets of Elements that represent the same concept at different levels of abstraction or from different viewpoints."}],"generalization":[{"$type":"Generalization","$id":"Abstraction-_generalization.0","$ns":"uml","general":"Dependency"}],"ownedAttribute":[{"$type":"Property","$id":"Abstraction-mapping","$ns":"uml","name":"mapping","type":"OpaqueExpression","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_mapping_abstraction","ownedComment":[{"$type":"Comment","$id":"Abstraction-mapping-_ownedComment.0","$ns":"uml","annotatedElement":"Abstraction-mapping","body":"An OpaqueExpression that states the abstraction relationship between the supplier(s) and the client(s). In some cases, such as derivation, it is usually formal and unidirectional; in other cases, such as trace, it is usually informal and bidirectional. The mapping expression is optional and may be omitted if the precise relationship between the Elements is not specified."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Abstraction-mapping-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Comment","$ns":"uml","name":"Comment","ownedComment":[{"$type":"Comment","$id":"Comment-_ownedComment.0","$ns":"uml","annotatedElement":"Comment","body":"A Comment is a textual annotation that can be attached to a set of Elements."}],"generalization":[{"$type":"Generalization","$id":"Comment-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"Comment-annotatedElement","$ns":"uml","name":"annotatedElement","type":"Element","association":"A_annotatedElement_comment","ownedComment":[{"$type":"Comment","$id":"Comment-annotatedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Comment-annotatedElement","body":"References the Element(s) being commented."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Comment-annotatedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Comment-annotatedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Comment-body","$ns":"uml","name":"body","ownedComment":[{"$type":"Comment","$id":"Comment-body-_ownedComment.0","$ns":"uml","annotatedElement":"Comment-body","body":"Specifies a string that is the comment."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Comment-body-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Constraint","$ns":"uml","name":"Constraint","ownedComment":[{"$type":"Comment","$id":"Constraint-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint","body":"A Constraint is a condition or restriction expressed in natural language text or in a machine readable language for the purpose of declaring some of the semantics of an Element or set of Elements."}],"ownedRule":[{"$type":"Constraint","$id":"Constraint-boolean_value","$ns":"uml","name":"boolean_value","constrainedElement":"Constraint","ownedComment":[{"$type":"Comment","$id":"Constraint-boolean_value-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-boolean_value","body":"The ValueSpecification for a Constraint must evaluate to a Boolean value."}],"specification":[{"$type":"OpaqueExpression","$id":"Constraint-boolean_value-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Constraint-no_side_effects","$ns":"uml","name":"no_side_effects","constrainedElement":"Constraint","ownedComment":[{"$type":"Comment","$id":"Constraint-no_side_effects-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-no_side_effects","body":"Evaluating the ValueSpecification for a Constraint must not have side effects."}],"specification":[{"$type":"OpaqueExpression","$id":"Constraint-no_side_effects-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"Constraint-not_apply_to_self","$ns":"uml","name":"not_apply_to_self","constrainedElement":"Constraint","ownedComment":[{"$type":"Comment","$id":"Constraint-not_apply_to_self-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-not_apply_to_self","body":"A Constraint cannot be applied to itself."}],"specification":[{"$type":"OpaqueExpression","$id":"Constraint-not_apply_to_self-_specification","$ns":"uml","language":"OCL","body":"not constrainedElement->includes(self)"}]}],"generalization":[{"$type":"Generalization","$id":"Constraint-_generalization.0","$ns":"uml","general":"PackageableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Constraint-constrainedElement","$ns":"uml","name":"constrainedElement","type":"Element","isOrdered":"true","association":"A_constrainedElement_constraint","ownedComment":[{"$type":"Comment","$id":"Constraint-constrainedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-constrainedElement","body":"The ordered set of Elements referenced by this Constraint."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Constraint-constrainedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Constraint-constrainedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Constraint-context","$ns":"uml","name":"context","type":"Namespace","subsettedProperty":"NamedElement-namespace","association":"A_ownedRule_context","ownedComment":[{"$type":"Comment","$id":"Constraint-context-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-context","body":"Specifies the Namespace that owns the Constraint."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Constraint-context-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Constraint-specification","$ns":"uml","name":"specification","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_specification_owningConstraint","ownedComment":[{"$type":"Comment","$id":"Constraint-specification-_ownedComment.0","$ns":"uml","annotatedElement":"Constraint-specification","body":"A condition that must be true when evaluated in order for the Constraint to be satisfied."}]}]},{"$type":"Class","$id":"Dependency","$ns":"uml","name":"Dependency","ownedComment":[{"$type":"Comment","$id":"Dependency-_ownedComment.0","$ns":"uml","annotatedElement":"Dependency","body":"A Dependency is a Relationship that signifies that a single model Element or a set of model Elements requires other model Elements for their specification or implementation. This means that the complete semantics of the client Element(s) are either semantically or structurally dependent on the definition of the supplier Element(s)."}],"generalization":[{"$type":"Generalization","$id":"Dependency-_generalization.0","$ns":"uml","general":"DirectedRelationship"},{"$type":"Generalization","$id":"Dependency-_generalization.1","$ns":"uml","general":"PackageableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Dependency-client","$ns":"uml","name":"client","type":"NamedElement","subsettedProperty":"DirectedRelationship-source","association":"A_clientDependency_client","ownedComment":[{"$type":"Comment","$id":"Dependency-client-_ownedComment.0","$ns":"uml","annotatedElement":"Dependency-client","body":"The Element(s) dependent on the supplier Element(s). In some cases (such as a trace Abstraction) the assignment of direction (that is, the designation of the client Element) is at the discretion of the modeler and is a stipulation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Dependency-client-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"Dependency-supplier","$ns":"uml","name":"supplier","type":"NamedElement","subsettedProperty":"DirectedRelationship-target","association":"A_supplier_supplierDependency","ownedComment":[{"$type":"Comment","$id":"Dependency-supplier-_ownedComment.0","$ns":"uml","annotatedElement":"Dependency-supplier","body":"The Element(s) on which the client Element(s) depend in some respect. The modeler may stipulate a sense of Dependency direction suitable for their domain."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Dependency-supplier-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"DirectedRelationship","$ns":"uml","name":"DirectedRelationship","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"DirectedRelationship-_ownedComment.0","$ns":"uml","annotatedElement":"DirectedRelationship","body":"A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements."}],"generalization":[{"$type":"Generalization","$id":"DirectedRelationship-_generalization.0","$ns":"uml","general":"Relationship"}],"ownedAttribute":[{"$type":"Property","$id":"DirectedRelationship-source","$ns":"uml","name":"source","type":"Element","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Relationship-relatedElement","association":"A_source_directedRelationship","ownedComment":[{"$type":"Comment","$id":"DirectedRelationship-source-_ownedComment.0","$ns":"uml","annotatedElement":"DirectedRelationship-source","body":"Specifies the source Element(s) of the DirectedRelationship."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DirectedRelationship-source-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"DirectedRelationship-target","$ns":"uml","name":"target","type":"Element","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Relationship-relatedElement","association":"A_target_directedRelationship","ownedComment":[{"$type":"Comment","$id":"DirectedRelationship-target-_ownedComment.0","$ns":"uml","annotatedElement":"DirectedRelationship-target","body":"Specifies the target Element(s) of the DirectedRelationship."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DirectedRelationship-target-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"Element","$ns":"uml","name":"Element","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Element-_ownedComment.0","$ns":"uml","annotatedElement":"Element","body":"An Element is a constituent of a model. As such, it has the capability of owning other Elements."}],"ownedRule":[{"$type":"Constraint","$id":"Element-has_owner","$ns":"uml","name":"has_owner","constrainedElement":"Element","ownedComment":[{"$type":"Comment","$id":"Element-has_owner-_ownedComment.0","$ns":"uml","annotatedElement":"Element-has_owner","body":"Elements that must be owned must have an owner."}],"specification":[{"$type":"OpaqueExpression","$id":"Element-has_owner-_specification","$ns":"uml","language":"OCL","body":"mustBeOwned() implies owner->notEmpty()"}]},{"$type":"Constraint","$id":"Element-not_own_self","$ns":"uml","name":"not_own_self","constrainedElement":"Element","ownedComment":[{"$type":"Comment","$id":"Element-not_own_self-_ownedComment.0","$ns":"uml","annotatedElement":"Element-not_own_self","body":"An element may not directly or indirectly own itself."}],"specification":[{"$type":"OpaqueExpression","$id":"Element-not_own_self-_specification","$ns":"uml","language":"OCL","body":"not allOwnedElements()->includes(self)"}]}],"ownedAttribute":[{"$type":"Property","$id":"Element-ownedComment","$ns":"uml","name":"ownedComment","type":"Comment","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_ownedComment_owningElement","ownedComment":[{"$type":"Comment","$id":"Element-ownedComment-_ownedComment.0","$ns":"uml","annotatedElement":"Element-ownedComment","body":"The Comments owned by this Element."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Element-ownedComment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Element-ownedComment-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Element-ownedElement","$ns":"uml","name":"ownedElement","type":"Element","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","aggregation":"composite","association":"A_ownedElement_owner","ownedComment":[{"$type":"Comment","$id":"Element-ownedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Element-ownedElement","body":"The Elements owned by this Element."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Element-ownedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Element-ownedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Element-owner","$ns":"uml","name":"owner","type":"Element","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_ownedElement_owner","ownedComment":[{"$type":"Comment","$id":"Element-owner-_ownedComment.0","$ns":"uml","annotatedElement":"Element-owner","body":"The Element that owns this Element."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Element-owner-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Element-allOwnedElements","$ns":"uml","name":"allOwnedElements","isQuery":"true","bodyCondition":"Element-allOwnedElements-spec","ownedComment":[{"$type":"Comment","$id":"Element-allOwnedElements-_ownedComment.0","$ns":"uml","annotatedElement":"Element-allOwnedElements","body":"The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element."}],"ownedRule":[{"$type":"Constraint","$id":"Element-allOwnedElements-spec","$ns":"uml","name":"spec","constrainedElement":"Element-allOwnedElements","specification":[{"$type":"OpaqueExpression","$id":"Element-allOwnedElements-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Element-allOwnedElements-result","$ns":"uml","name":"result","type":"Element","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Element-allOwnedElements-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Element-allOwnedElements-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Element-mustBeOwned","$ns":"uml","name":"mustBeOwned","isQuery":"true","bodyCondition":"Element-mustBeOwned-spec","ownedComment":[{"$type":"Comment","$id":"Element-mustBeOwned-_ownedComment.0","$ns":"uml","annotatedElement":"Element-mustBeOwned","body":"The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation."}],"ownedRule":[{"$type":"Constraint","$id":"Element-mustBeOwned-spec","$ns":"uml","name":"spec","constrainedElement":"Element-mustBeOwned","specification":[{"$type":"OpaqueExpression","$id":"Element-mustBeOwned-spec-_specification","$ns":"uml","language":"OCL","body":"result = (true)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Element-mustBeOwned-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"ElementImport","$ns":"uml","name":"ElementImport","ownedComment":[{"$type":"Comment","$id":"ElementImport-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport","body":"An ElementImport identifies a NamedElement in a Namespace other than the one that owns that NamedElement and allows the NamedElement to be referenced using an unqualified name in the Namespace owning the ElementImport."}],"ownedRule":[{"$type":"Constraint","$id":"ElementImport-imported_element_is_public","$ns":"uml","name":"imported_element_is_public","constrainedElement":"ElementImport","ownedComment":[{"$type":"Comment","$id":"ElementImport-imported_element_is_public-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-imported_element_is_public","body":"An importedElement has either public visibility or no visibility at all."}],"specification":[{"$type":"OpaqueExpression","$id":"ElementImport-imported_element_is_public-_specification","$ns":"uml","language":"OCL","body":"importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public"}]},{"$type":"Constraint","$id":"ElementImport-visibility_public_or_private","$ns":"uml","name":"visibility_public_or_private","constrainedElement":"ElementImport","ownedComment":[{"$type":"Comment","$id":"ElementImport-visibility_public_or_private-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-visibility_public_or_private","body":"The visibility of an ElementImport is either public or private."}],"specification":[{"$type":"OpaqueExpression","$id":"ElementImport-visibility_public_or_private-_specification","$ns":"uml","language":"OCL","body":"visibility = VisibilityKind::public or visibility = VisibilityKind::private"}]}],"generalization":[{"$type":"Generalization","$id":"ElementImport-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"ElementImport-alias","$ns":"uml","name":"alias","ownedComment":[{"$type":"Comment","$id":"ElementImport-alias-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-alias","body":"Specifies the name that should be added to the importing Namespace in lieu of the name of the imported PackagableElement. The alias must not clash with any other member in the importing Namespace. By default, no alias is used."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ElementImport-alias-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ElementImport-importedElement","$ns":"uml","name":"importedElement","type":"PackageableElement","subsettedProperty":"DirectedRelationship-target","association":"A_importedElement_import","ownedComment":[{"$type":"Comment","$id":"ElementImport-importedElement-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-importedElement","body":"Specifies the PackageableElement whose name is to be added to a Namespace."}]},{"$type":"Property","$id":"ElementImport-importingNamespace","$ns":"uml","name":"importingNamespace","type":"Namespace","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_elementImport_importingNamespace","ownedComment":[{"$type":"Comment","$id":"ElementImport-importingNamespace-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-importingNamespace","body":"Specifies the Namespace that imports a PackageableElement from another Namespace."}]},{"$type":"Property","$id":"ElementImport-visibility","$ns":"uml","name":"visibility","type":"VisibilityKind","ownedComment":[{"$type":"Comment","$id":"ElementImport-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-visibility","body":"Specifies the visibility of the imported PackageableElement within the importingNamespace, i.e., whether the  importedElement will in turn be visible to other Namespaces. If the ElementImport is public, the importedElement will be visible outside the importingNamespace while, if the ElementImport is private, it will not."}],"defaultValue":[{"$type":"InstanceValue","$id":"ElementImport-visibility-_defaultValue","$ns":"uml","type":"VisibilityKind","instance":"VisibilityKind-public"}]}],"ownedOperation":[{"$type":"Operation","$id":"ElementImport-getName","$ns":"uml","name":"getName","isQuery":"true","bodyCondition":"ElementImport-getName-spec","ownedComment":[{"$type":"Comment","$id":"ElementImport-getName-_ownedComment.0","$ns":"uml","annotatedElement":"ElementImport-getName","body":"The query getName() returns the name under which the imported PackageableElement will be known in the importing namespace."}],"ownedRule":[{"$type":"Constraint","$id":"ElementImport-getName-spec","$ns":"uml","name":"spec","constrainedElement":"ElementImport-getName","specification":[{"$type":"OpaqueExpression","$id":"ElementImport-getName-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if alias->notEmpty() then\n  alias\nelse\n  importedElement.name\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ElementImport-getName-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]}]},{"$type":"Class","$id":"MultiplicityElement","$ns":"uml","name":"MultiplicityElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement","body":"A multiplicity is a definition of an inclusive interval of non-negative integers beginning with a lower bound and ending with a (possibly infinite) upper bound. A MultiplicityElement embeds this information to specify the allowable cardinalities for an instantiation of the Element."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-upper_ge_lower","$ns":"uml","name":"upper_ge_lower","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upper_ge_lower-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upper_ge_lower","body":"The upper bound must be greater than or equal to the lower bound."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-upper_ge_lower-_specification","$ns":"uml","language":"OCL","body":"upperBound() >= lowerBound()"}]},{"$type":"Constraint","$id":"MultiplicityElement-lower_ge_0","$ns":"uml","name":"lower_ge_0","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lower_ge_0-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lower_ge_0","body":"The lower bound must be a non-negative integer literal."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-lower_ge_0-_specification","$ns":"uml","language":"OCL","body":"lowerBound() >= 0"}]},{"$type":"Constraint","$id":"MultiplicityElement-value_specification_no_side_effects","$ns":"uml","name":"value_specification_no_side_effects","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-value_specification_no_side_effects-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-value_specification_no_side_effects","body":"If a non-literal ValueSpecification is used for lowerValue or upperValue, then evaluating that specification must not have side effects."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-value_specification_no_side_effects-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"MultiplicityElement-value_specification_constant","$ns":"uml","name":"value_specification_constant","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-value_specification_constant-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-value_specification_constant","body":"If a non-literal ValueSpecification is used for lowerValue or upperValue, then that specification must be a constant expression."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-value_specification_constant-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"MultiplicityElement-lower_is_integer","$ns":"uml","name":"lower_is_integer","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lower_is_integer-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lower_is_integer","body":"If it is not empty, then lowerValue must have an Integer value."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-lower_is_integer-_specification","$ns":"uml","language":"OCL","body":"lowerValue <> null implies lowerValue.integerValue() <> null"}]},{"$type":"Constraint","$id":"MultiplicityElement-upper_is_unlimitedNatural","$ns":"uml","name":"upper_is_unlimitedNatural","constrainedElement":"MultiplicityElement","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upper_is_unlimitedNatural-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upper_is_unlimitedNatural","body":"If it is not empty, then upperValue must have an UnlimitedNatural value."}],"specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-upper_is_unlimitedNatural-_specification","$ns":"uml","language":"OCL","body":"upperValue <> null implies upperValue.unlimitedValue() <> null"}]}],"generalization":[{"$type":"Generalization","$id":"MultiplicityElement-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"MultiplicityElement-isOrdered","$ns":"uml","name":"isOrdered","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-isOrdered-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-isOrdered","body":"For a multivalued multiplicity, this attribute specifies whether the values in an instantiation of this MultiplicityElement are sequentially ordered."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"MultiplicityElement-isOrdered-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"MultiplicityElement-isUnique","$ns":"uml","name":"isUnique","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-isUnique-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-isUnique","body":"For a multivalued multiplicity, this attributes specifies whether the values in an instantiation of this MultiplicityElement are unique."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"MultiplicityElement-isUnique-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"MultiplicityElement-lower","$ns":"uml","name":"lower","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lower-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lower","body":"The lower bound of the multiplicity interval."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]},{"$type":"Property","$id":"MultiplicityElement-lowerValue","$ns":"uml","name":"lowerValue","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_lowerValue_owningLower","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lowerValue-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lowerValue","body":"The specification of the lower bound for this multiplicity."}],"lowerValue":[{"$type":"LiteralInteger","$id":"MultiplicityElement-lowerValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"MultiplicityElement-upper","$ns":"uml","name":"upper","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upper-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upper","body":"The upper bound of the multiplicity interval."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}]},{"$type":"Property","$id":"MultiplicityElement-upperValue","$ns":"uml","name":"upperValue","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_upperValue_owningUpper","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upperValue-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upperValue","body":"The specification of the upper bound for this multiplicity."}],"lowerValue":[{"$type":"LiteralInteger","$id":"MultiplicityElement-upperValue-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"MultiplicityElement-compatibleWith","$ns":"uml","name":"compatibleWith","isQuery":"true","bodyCondition":"MultiplicityElement-compatibleWith-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-compatibleWith-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-compatibleWith","body":"The operation compatibleWith takes another multiplicity as input. It returns true if the other multiplicity is wider than, or the same as, self."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-compatibleWith-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-compatibleWith","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-compatibleWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((other.lowerBound() <= self.lowerBound()) and ((other.upperBound() = *) or (self.upperBound() <= other.upperBound())))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-compatibleWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"MultiplicityElement-compatibleWith-other","$ns":"uml","name":"other","type":"MultiplicityElement"}]},{"$type":"Operation","$id":"MultiplicityElement-includesMultiplicity","$ns":"uml","name":"includesMultiplicity","isQuery":"true","precondition":"MultiplicityElement-includesMultiplicity-pre","bodyCondition":"MultiplicityElement-includesMultiplicity-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-includesMultiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-includesMultiplicity","body":"The query includesMultiplicity() checks whether this multiplicity includes all the cardinalities allowed by the specified multiplicity."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-includesMultiplicity-pre","$ns":"uml","name":"pre","constrainedElement":"MultiplicityElement-includesMultiplicity","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-includesMultiplicity-pre-_specification","$ns":"uml","language":"OCL","body":"self.upperBound()->notEmpty() and self.lowerBound()->notEmpty() and M.upperBound()->notEmpty() and M.lowerBound()->notEmpty()"}]},{"$type":"Constraint","$id":"MultiplicityElement-includesMultiplicity-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-includesMultiplicity","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-includesMultiplicity-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((self.lowerBound() <= M.lowerBound()) and (self.upperBound() >= M.upperBound()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-includesMultiplicity-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"MultiplicityElement-includesMultiplicity-M","$ns":"uml","name":"M","type":"MultiplicityElement"}]},{"$type":"Operation","$id":"MultiplicityElement-is","$ns":"uml","name":"is","isQuery":"true","bodyCondition":"MultiplicityElement-is-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-is-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-is","body":"The operation is determines if the upper and lower bound of the ranges are the ones given."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-is-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-is","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-is-spec-_specification","$ns":"uml","language":"OCL","body":"result = (lowerbound = self.lowerBound() and upperbound = self.upperBound())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-is-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"MultiplicityElement-is-lowerbound","$ns":"uml","name":"lowerbound","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]},{"$type":"Parameter","$id":"MultiplicityElement-is-upperbound","$ns":"uml","name":"upperbound","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}]}]},{"$type":"Operation","$id":"MultiplicityElement-isMultivalued","$ns":"uml","name":"isMultivalued","isQuery":"true","precondition":"MultiplicityElement-isMultivalued-pre","bodyCondition":"MultiplicityElement-isMultivalued-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-isMultivalued-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-isMultivalued","body":"The query isMultivalued() checks whether this multiplicity has an upper bound greater than one."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-isMultivalued-pre","$ns":"uml","name":"pre","constrainedElement":"MultiplicityElement-isMultivalued","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-isMultivalued-pre-_specification","$ns":"uml","language":"OCL","body":"upperBound()->notEmpty()"}]},{"$type":"Constraint","$id":"MultiplicityElement-isMultivalued-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-isMultivalued","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-isMultivalued-spec-_specification","$ns":"uml","language":"OCL","body":"result = (upperBound() > 1)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-isMultivalued-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"MultiplicityElement-lower.1","$ns":"uml","name":"lower","isQuery":"true","bodyCondition":"MultiplicityElement-lower.1-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lower.1-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lower.1","body":"The derived lower attribute must equal the lowerBound."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-lower.1-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-lower.1 MultiplicityElement-lower","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-lower.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (lowerBound())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-lower.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"lowerValue":[{"$type":"LiteralInteger","$id":"MultiplicityElement-lower.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"MultiplicityElement-lowerBound","$ns":"uml","name":"lowerBound","isQuery":"true","bodyCondition":"MultiplicityElement-lowerBound-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-lowerBound-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-lowerBound","body":"The query lowerBound() returns the lower bound of the multiplicity as an integer, which is the integerValue of lowerValue, if this is given, and 1 otherwise."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-lowerBound-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-lowerBound","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-lowerBound-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if (lowerValue=null or lowerValue.integerValue()=null) then 1 else lowerValue.integerValue() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-lowerBound-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]}]},{"$type":"Operation","$id":"MultiplicityElement-upper.1","$ns":"uml","name":"upper","isQuery":"true","bodyCondition":"MultiplicityElement-upper.1-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upper.1-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upper.1","body":"The derived upper attribute must equal the upperBound."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-upper.1-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-upper.1 MultiplicityElement-upper","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-upper.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (upperBound())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-upper.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}],"lowerValue":[{"$type":"LiteralInteger","$id":"MultiplicityElement-upper.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"MultiplicityElement-upperBound","$ns":"uml","name":"upperBound","isQuery":"true","bodyCondition":"MultiplicityElement-upperBound-spec","ownedComment":[{"$type":"Comment","$id":"MultiplicityElement-upperBound-_ownedComment.0","$ns":"uml","annotatedElement":"MultiplicityElement-upperBound","body":"The query upperBound() returns the upper bound of the multiplicity for a bounded multiplicity as an unlimited natural, which is the unlimitedNaturalValue of upperValue, if given, and 1, otherwise."}],"ownedRule":[{"$type":"Constraint","$id":"MultiplicityElement-upperBound-spec","$ns":"uml","name":"spec","constrainedElement":"MultiplicityElement-upperBound","specification":[{"$type":"OpaqueExpression","$id":"MultiplicityElement-upperBound-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if (upperValue=null or upperValue.unlimitedValue()=null) then 1 else upperValue.unlimitedValue() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"MultiplicityElement-upperBound-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}]}]}]},{"$type":"Class","$id":"NamedElement","$ns":"uml","name":"NamedElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"NamedElement-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement","body":"A NamedElement is an Element in a model that may have a name. The name may be given directly and/or via the use of a StringExpression."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-visibility_needs_ownership","$ns":"uml","name":"visibility_needs_ownership","constrainedElement":"NamedElement","ownedComment":[{"$type":"Comment","$id":"NamedElement-visibility_needs_ownership-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-visibility_needs_ownership","body":"If a NamedElement is owned by something other than a Namespace, it does not have a visibility. One that is not owned by anything (and hence must be a Package, as this is the only kind of NamedElement that overrides mustBeOwned()) may have a visibility."}],"specification":[{"$type":"OpaqueExpression","$id":"NamedElement-visibility_needs_ownership-_specification","$ns":"uml","language":"OCL","body":"(namespace = null and owner <> null) implies visibility = null"}]},{"$type":"Constraint","$id":"NamedElement-has_qualified_name","$ns":"uml","name":"has_qualified_name","constrainedElement":"NamedElement","ownedComment":[{"$type":"Comment","$id":"NamedElement-has_qualified_name-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-has_qualified_name","body":"When there is a name, and all of the containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces."}],"specification":[{"$type":"OpaqueExpression","$id":"NamedElement-has_qualified_name-_specification","$ns":"uml","language":"OCL","body":"(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies\n  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))"}]},{"$type":"Constraint","$id":"NamedElement-has_no_qualified_name","$ns":"uml","name":"has_no_qualified_name","constrainedElement":"NamedElement","ownedComment":[{"$type":"Comment","$id":"NamedElement-has_no_qualified_name-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-has_no_qualified_name","body":"If there is no name, or one of the containing Namespaces has no name, there is no qualifiedName."}],"specification":[{"$type":"OpaqueExpression","$id":"NamedElement-has_no_qualified_name-_specification","$ns":"uml","language":"OCL","body":"name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null"}]}],"generalization":[{"$type":"Generalization","$id":"NamedElement-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"NamedElement-clientDependency","$ns":"uml","name":"clientDependency","type":"Dependency","isDerived":"true","subsettedProperty":"A_source_directedRelationship-directedRelationship","association":"A_clientDependency_client","ownedComment":[{"$type":"Comment","$id":"NamedElement-clientDependency-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-clientDependency","body":"Indicates the Dependencies that reference this NamedElement as a client."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"NamedElement-clientDependency-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-clientDependency-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"NamedElement-name","$ns":"uml","name":"name","ownedComment":[{"$type":"Comment","$id":"NamedElement-name-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-name","body":"The name of the NamedElement."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-name-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"NamedElement-nameExpression","$ns":"uml","name":"nameExpression","type":"StringExpression","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_nameExpression_namedElement","ownedComment":[{"$type":"Comment","$id":"NamedElement-nameExpression-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-nameExpression","body":"The StringExpression used to define the name of this NamedElement."}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-nameExpression-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"NamedElement-namespace","$ns":"uml","name":"namespace","type":"Namespace","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_member_memberNamespace-memberNamespace Element-owner","association":"A_ownedMember_namespace","ownedComment":[{"$type":"Comment","$id":"NamedElement-namespace-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-namespace","body":"Specifies the Namespace that owns the NamedElement."}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-namespace-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"NamedElement-qualifiedName","$ns":"uml","name":"qualifiedName","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"NamedElement-qualifiedName-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-qualifiedName","body":"A name that allows the NamedElement to be identified within a hierarchy of nested Namespaces. It is constructed from the names of the containing Namespaces starting at the root of the hierarchy and ending with the name of the NamedElement itself."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-qualifiedName-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"NamedElement-visibility","$ns":"uml","name":"visibility","type":"VisibilityKind","ownedComment":[{"$type":"Comment","$id":"NamedElement-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-visibility","body":"Determines whether and how the NamedElement is visible outside its owning Namespace."}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-visibility-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"NamedElement-allNamespaces","$ns":"uml","name":"allNamespaces","isQuery":"true","bodyCondition":"NamedElement-allNamespaces-spec","ownedComment":[{"$type":"Comment","$id":"NamedElement-allNamespaces-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-allNamespaces","body":"The query allNamespaces() gives the sequence of Namespaces in which the NamedElement is nested, working outwards."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-allNamespaces-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-allNamespaces","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-allNamespaces-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if owner.oclIsKindOf(TemplateParameter) and\n  owner.oclAsType(TemplateParameter).signature.template.oclIsKindOf(Namespace) then\n    let enclosingNamespace : Namespace =\n      owner.oclAsType(TemplateParameter).signature.template.oclAsType(Namespace) in\n        enclosingNamespace.allNamespaces()->prepend(enclosingNamespace)\nelse\n  if namespace->isEmpty()\n    then OrderedSet{}\n  else\n    namespace.allNamespaces()->prepend(namespace)\n  endif\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-allNamespaces-result","$ns":"uml","name":"result","type":"Namespace","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"NamedElement-allNamespaces-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-allNamespaces-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"NamedElement-allOwningPackages","$ns":"uml","name":"allOwningPackages","isQuery":"true","bodyCondition":"NamedElement-allOwningPackages-spec","ownedComment":[{"$type":"Comment","$id":"NamedElement-allOwningPackages-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-allOwningPackages","body":"The query allOwningPackages() returns the set of all the enclosing Namespaces of this NamedElement, working outwards, that are Packages, up to but not including the first such Namespace that is not a Package."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-allOwningPackages-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-allOwningPackages","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-allOwningPackages-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if namespace.oclIsKindOf(Package)\r\nthen\r\n  let owningPackage : Package = namespace.oclAsType(Package) in\r\n    owningPackage->union(owningPackage.allOwningPackages())\r\nelse\r\n  null\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-allOwningPackages-result","$ns":"uml","name":"result","type":"Package","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"NamedElement-allOwningPackages-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-allOwningPackages-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"NamedElement-isDistinguishableFrom","$ns":"uml","name":"isDistinguishableFrom","isQuery":"true","bodyCondition":"NamedElement-isDistinguishableFrom-spec","ownedComment":[{"$type":"Comment","$id":"NamedElement-isDistinguishableFrom-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-isDistinguishableFrom","body":"The query isDistinguishableFrom() determines whether two NamedElements may logically co-exist within a Namespace. By default, two named elements are distinguishable if (a) they have types neither of which is a kind of the other or (b) they have different names."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-isDistinguishableFrom-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-isDistinguishableFrom","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-isDistinguishableFrom-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((self.oclIsKindOf(n.oclType()) or n.oclIsKindOf(self.oclType())) implies\n    ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->isEmpty()\n)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-isDistinguishableFrom-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"NamedElement-isDistinguishableFrom-n","$ns":"uml","name":"n","type":"NamedElement"},{"$type":"Parameter","$id":"NamedElement-isDistinguishableFrom-ns","$ns":"uml","name":"ns","type":"Namespace"}]},{"$type":"Operation","$id":"NamedElement-qualifiedName.1","$ns":"uml","name":"qualifiedName","isQuery":"true","bodyCondition":"NamedElement-qualifiedName.1-spec","ownedComment":[{"$type":"Comment","$id":"NamedElement-qualifiedName.1-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-qualifiedName.1","body":"When a NamedElement has a name, and all of its containing Namespaces have a name, the qualifiedName is constructed from the name of the NamedElement and the names of the containing Namespaces."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-qualifiedName.1-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-qualifiedName.1 NamedElement-qualifiedName","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-qualifiedName.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if self.name <> null and self.allNamespaces()->select( ns | ns.name=null )->isEmpty()\nthen \n    self.allNamespaces()->iterate( ns : Namespace; agg: String = self.name | ns.name.concat(self.separator()).concat(agg))\nelse\n   null\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-qualifiedName.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]},{"$type":"Operation","$id":"NamedElement-separator","$ns":"uml","name":"separator","isQuery":"true","bodyCondition":"NamedElement-separator-spec","ownedComment":[{"$type":"Comment","$id":"NamedElement-separator-_ownedComment.0","$ns":"uml","annotatedElement":"NamedElement-separator","body":"The query separator() gives the string that is used to separate names when constructing a qualifiedName."}],"ownedRule":[{"$type":"Constraint","$id":"NamedElement-separator-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-separator","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-separator-spec-_specification","$ns":"uml","language":"OCL","body":"result = ('::')"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-separator-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}]}]},{"$type":"Operation","$id":"NamedElement-clientDependency.1","$ns":"uml","name":"clientDependency","isQuery":"true","bodyCondition":"NamedElement-clientDependency.1-spec","ownedRule":[{"$type":"Constraint","$id":"NamedElement-clientDependency.1-spec","$ns":"uml","name":"spec","constrainedElement":"NamedElement-clientDependency.1 NamedElement-clientDependency","specification":[{"$type":"OpaqueExpression","$id":"NamedElement-clientDependency.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (Dependency.allInstances()->select(d | d.client->includes(self)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"NamedElement-clientDependency.1-result","$ns":"uml","name":"result","type":"Dependency","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"NamedElement-clientDependency.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"NamedElement-clientDependency.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Namespace","$ns":"uml","name":"Namespace","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Namespace-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace","body":"A Namespace is an Element in a model that owns and/or imports a set of NamedElements that can be identified by name."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-members_distinguishable","$ns":"uml","name":"members_distinguishable","constrainedElement":"Namespace","ownedComment":[{"$type":"Comment","$id":"Namespace-members_distinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-members_distinguishable","body":"All the members of a Namespace are distinguishable within it."}],"specification":[{"$type":"OpaqueExpression","$id":"Namespace-members_distinguishable-_specification","$ns":"uml","language":"OCL","body":"membersAreDistinguishable()"}]},{"$type":"Constraint","$id":"Namespace-cannot_import_self","$ns":"uml","name":"cannot_import_self","constrainedElement":"Namespace","ownedComment":[{"$type":"Comment","$id":"Namespace-cannot_import_self-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-cannot_import_self","body":"A Namespace cannot have a PackageImport to itself."}],"specification":[{"$type":"OpaqueExpression","$id":"Namespace-cannot_import_self-_specification","$ns":"uml","language":"OCL","body":"packageImport.importedPackage.oclAsType(Namespace)->excludes(self)"}]},{"$type":"Constraint","$id":"Namespace-cannot_import_ownedMembers","$ns":"uml","name":"cannot_import_ownedMembers","constrainedElement":"Namespace","ownedComment":[{"$type":"Comment","$id":"Namespace-cannot_import_ownedMembers-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-cannot_import_ownedMembers","body":"A Namespace cannot have an ElementImport to one of its ownedMembers."}],"specification":[{"$type":"OpaqueExpression","$id":"Namespace-cannot_import_ownedMembers-_specification","$ns":"uml","language":"OCL","body":"elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)"}]}],"generalization":[{"$type":"Generalization","$id":"Namespace-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Namespace-elementImport","$ns":"uml","name":"elementImport","type":"ElementImport","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_elementImport_importingNamespace","ownedComment":[{"$type":"Comment","$id":"Namespace-elementImport-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-elementImport","body":"References the ElementImports owned by the Namespace."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-elementImport-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-elementImport-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Namespace-importedMember","$ns":"uml","name":"importedMember","type":"PackageableElement","isReadOnly":"true","isDerived":"true","subsettedProperty":"Namespace-member","association":"A_importedMember_namespace","ownedComment":[{"$type":"Comment","$id":"Namespace-importedMember-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-importedMember","body":"References the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-importedMember-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-importedMember-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Namespace-member","$ns":"uml","name":"member","type":"NamedElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_member_memberNamespace","ownedComment":[{"$type":"Comment","$id":"Namespace-member-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-member","body":"A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-member-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-member-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Namespace-ownedMember","$ns":"uml","name":"ownedMember","type":"NamedElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement Namespace-member","association":"A_ownedMember_namespace","ownedComment":[{"$type":"Comment","$id":"Namespace-ownedMember-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-ownedMember","body":"A collection of NamedElements owned by the Namespace."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-ownedMember-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-ownedMember-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Namespace-ownedRule","$ns":"uml","name":"ownedRule","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedRule_context","ownedComment":[{"$type":"Comment","$id":"Namespace-ownedRule-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-ownedRule","body":"Specifies a set of Constraints owned by this Namespace."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-ownedRule-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-ownedRule-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Namespace-packageImport","$ns":"uml","name":"packageImport","type":"PackageImport","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_packageImport_importingNamespace","ownedComment":[{"$type":"Comment","$id":"Namespace-packageImport-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-packageImport","body":"References the PackageImports owned by the Namespace."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-packageImport-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-packageImport-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Namespace-excludeCollisions","$ns":"uml","name":"excludeCollisions","isQuery":"true","bodyCondition":"Namespace-excludeCollisions-spec","ownedComment":[{"$type":"Comment","$id":"Namespace-excludeCollisions-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-excludeCollisions","body":"The query excludeCollisions() excludes from a set of PackageableElements any that would not be distinguishable from each other in this Namespace."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-excludeCollisions-spec","$ns":"uml","name":"spec","constrainedElement":"Namespace-excludeCollisions","specification":[{"$type":"OpaqueExpression","$id":"Namespace-excludeCollisions-spec-_specification","$ns":"uml","language":"OCL","body":"result = (imps->reject(imp1  | imps->exists(imp2 | not imp1.isDistinguishableFrom(imp2, self))))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Namespace-excludeCollisions-result","$ns":"uml","name":"result","type":"PackageableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-excludeCollisions-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-excludeCollisions-result-_lowerValue","$ns":"uml"}]},{"$type":"Parameter","$id":"Namespace-excludeCollisions-imps","$ns":"uml","name":"imps","type":"PackageableElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-excludeCollisions-imps-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-excludeCollisions-imps-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Namespace-getNamesOfMember","$ns":"uml","name":"getNamesOfMember","isQuery":"true","bodyCondition":"Namespace-getNamesOfMember-spec","ownedComment":[{"$type":"Comment","$id":"Namespace-getNamesOfMember-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-getNamesOfMember","body":"The query getNamesOfMember() gives a set of all of the names that a member would have in a Namespace, taking importing into account. In general a member can have multiple names in a Namespace if it is imported more than once with different aliases."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-getNamesOfMember-spec","$ns":"uml","name":"spec","constrainedElement":"Namespace-getNamesOfMember","specification":[{"$type":"OpaqueExpression","$id":"Namespace-getNamesOfMember-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if self.ownedMember ->includes(element)\nthen Set{element.name}\nelse let elementImports : Set(ElementImport) = self.elementImport->select(ei | ei.importedElement = element) in\n  if elementImports->notEmpty()\n  then\n     elementImports->collect(el | el.getName())->asSet()\n  else \n     self.packageImport->select(pi | pi.importedPackage.visibleMembers().oclAsType(NamedElement)->includes(element))-> collect(pi | pi.importedPackage.getNamesOfMember(element))->asSet()\n  endif\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Namespace-getNamesOfMember-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-getNamesOfMember-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-getNamesOfMember-result-_lowerValue","$ns":"uml"}]},{"$type":"Parameter","$id":"Namespace-getNamesOfMember-element","$ns":"uml","name":"element","type":"NamedElement"}]},{"$type":"Operation","$id":"Namespace-importMembers","$ns":"uml","name":"importMembers","isQuery":"true","bodyCondition":"Namespace-importMembers-spec","ownedComment":[{"$type":"Comment","$id":"Namespace-importMembers-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-importMembers","body":"The query importMembers() defines which of a set of PackageableElements are actually imported into the Namespace. This excludes hidden ones, i.e., those which have names that conflict with names of ownedMembers, and it also excludes PackageableElements that would have the indistinguishable names when imported."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-importMembers-spec","$ns":"uml","name":"spec","constrainedElement":"Namespace-importMembers","specification":[{"$type":"OpaqueExpression","$id":"Namespace-importMembers-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.excludeCollisions(imps)->select(imp | self.ownedMember->forAll(mem | imp.isDistinguishableFrom(mem, self))))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Namespace-importMembers-result","$ns":"uml","name":"result","type":"PackageableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-importMembers-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-importMembers-result-_lowerValue","$ns":"uml"}]},{"$type":"Parameter","$id":"Namespace-importMembers-imps","$ns":"uml","name":"imps","type":"PackageableElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-importMembers-imps-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-importMembers-imps-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Namespace-importedMember.1","$ns":"uml","name":"importedMember","isQuery":"true","bodyCondition":"Namespace-importedMember.1-spec","ownedComment":[{"$type":"Comment","$id":"Namespace-importedMember.1-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-importedMember.1","body":"The importedMember property is derived as the PackageableElements that are members of this Namespace as a result of either PackageImports or ElementImports."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-importedMember.1-spec","$ns":"uml","name":"spec","constrainedElement":"Namespace-importedMember.1 Namespace-importedMember","specification":[{"$type":"OpaqueExpression","$id":"Namespace-importedMember.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.importMembers(elementImport.importedElement->asSet()->union(packageImport.importedPackage->collect(p | p.visibleMembers()))->asSet()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Namespace-importedMember.1-result","$ns":"uml","name":"result","type":"PackageableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Namespace-importedMember.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Namespace-importedMember.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Namespace-membersAreDistinguishable","$ns":"uml","name":"membersAreDistinguishable","isQuery":"true","bodyCondition":"Namespace-membersAreDistinguishable-spec","ownedComment":[{"$type":"Comment","$id":"Namespace-membersAreDistinguishable-_ownedComment.0","$ns":"uml","annotatedElement":"Namespace-membersAreDistinguishable","body":"The Boolean query membersAreDistinguishable() determines whether all of the Namespace's members are distinguishable within it."}],"ownedRule":[{"$type":"Constraint","$id":"Namespace-membersAreDistinguishable-spec","$ns":"uml","name":"spec","constrainedElement":"Namespace-membersAreDistinguishable","specification":[{"$type":"OpaqueExpression","$id":"Namespace-membersAreDistinguishable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (member->forAll( memb |\n   member->excluding(memb)->forAll(other |\n       memb.isDistinguishableFrom(other, self))))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Namespace-membersAreDistinguishable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"PackageableElement","$ns":"uml","name":"PackageableElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"PackageableElement-_ownedComment.0","$ns":"uml","annotatedElement":"PackageableElement","body":"A PackageableElement is a NamedElement that may be owned directly by a Package. A PackageableElement is also able to serve as the parameteredElement of a TemplateParameter."}],"ownedRule":[{"$type":"Constraint","$id":"PackageableElement-namespace_needs_visibility","$ns":"uml","name":"namespace_needs_visibility","constrainedElement":"PackageableElement","ownedComment":[{"$type":"Comment","$id":"PackageableElement-namespace_needs_visibility-_ownedComment.0","$ns":"uml","annotatedElement":"PackageableElement-namespace_needs_visibility","body":"A PackageableElement owned by a Namespace must have a visibility."}],"specification":[{"$type":"OpaqueExpression","$id":"PackageableElement-namespace_needs_visibility-_specification","$ns":"uml","language":"OCL","body":"visibility = null implies namespace = null"}]}],"generalization":[{"$type":"Generalization","$id":"PackageableElement-_generalization.0","$ns":"uml","general":"ParameterableElement"},{"$type":"Generalization","$id":"PackageableElement-_generalization.1","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"PackageableElement-visibility","$ns":"uml","name":"visibility","type":"VisibilityKind","redefinedProperty":"NamedElement-visibility","ownedComment":[{"$type":"Comment","$id":"PackageableElement-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"PackageableElement-visibility","body":"A PackageableElement must have a visibility specified if it is owned by a Namespace. The default visibility is public."}],"lowerValue":[{"$type":"LiteralInteger","$id":"PackageableElement-visibility-_lowerValue","$ns":"uml"}],"defaultValue":[{"$type":"InstanceValue","$id":"PackageableElement-visibility-_defaultValue","$ns":"uml","type":"VisibilityKind","instance":"VisibilityKind-public"}]}]},{"$type":"Class","$id":"PackageImport","$ns":"uml","name":"PackageImport","ownedComment":[{"$type":"Comment","$id":"PackageImport-_ownedComment.0","$ns":"uml","annotatedElement":"PackageImport","body":"A PackageImport is a Relationship that imports all the non-private members of a Package into the Namespace owning the PackageImport, so that those Elements may be referred to by their unqualified names in the importingNamespace."}],"ownedRule":[{"$type":"Constraint","$id":"PackageImport-public_or_private","$ns":"uml","name":"public_or_private","constrainedElement":"PackageImport","ownedComment":[{"$type":"Comment","$id":"PackageImport-public_or_private-_ownedComment.0","$ns":"uml","annotatedElement":"PackageImport-public_or_private","body":"The visibility of a PackageImport is either public or private."}],"specification":[{"$type":"OpaqueExpression","$id":"PackageImport-public_or_private-_specification","$ns":"uml","language":"OCL","body":"visibility = VisibilityKind::public or visibility = VisibilityKind::private"}]}],"generalization":[{"$type":"Generalization","$id":"PackageImport-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"PackageImport-importedPackage","$ns":"uml","name":"importedPackage","type":"Package","subsettedProperty":"DirectedRelationship-target","association":"A_importedPackage_packageImport","ownedComment":[{"$type":"Comment","$id":"PackageImport-importedPackage-_ownedComment.0","$ns":"uml","annotatedElement":"PackageImport-importedPackage","body":"Specifies the Package whose members are imported into a Namespace."}]},{"$type":"Property","$id":"PackageImport-importingNamespace","$ns":"uml","name":"importingNamespace","type":"Namespace","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_packageImport_importingNamespace","ownedComment":[{"$type":"Comment","$id":"PackageImport-importingNamespace-_ownedComment.0","$ns":"uml","annotatedElement":"PackageImport-importingNamespace","body":"Specifies the Namespace that imports the members from a Package."}]},{"$type":"Property","$id":"PackageImport-visibility","$ns":"uml","name":"visibility","type":"VisibilityKind","ownedComment":[{"$type":"Comment","$id":"PackageImport-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"PackageImport-visibility","body":"Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not."}],"defaultValue":[{"$type":"InstanceValue","$id":"PackageImport-visibility-_defaultValue","$ns":"uml","type":"VisibilityKind","instance":"VisibilityKind-public"}]}]},{"$type":"Class","$id":"ParameterableElement","$ns":"uml","name":"ParameterableElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"ParameterableElement-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterableElement","body":"A ParameterableElement is an Element that can be exposed as a formal TemplateParameter for a template, or specified as an actual parameter in a binding of a template."}],"generalization":[{"$type":"Generalization","$id":"ParameterableElement-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"ParameterableElement-owningTemplateParameter","$ns":"uml","name":"owningTemplateParameter","type":"TemplateParameter","subsettedProperty":"Element-owner ParameterableElement-templateParameter","association":"A_ownedParameteredElement_owningTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ParameterableElement-owningTemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterableElement-owningTemplateParameter","body":"The formal TemplateParameter that owns this ParameterableElement."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ParameterableElement-owningTemplateParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ParameterableElement-templateParameter","$ns":"uml","name":"templateParameter","type":"TemplateParameter","association":"A_parameteredElement_templateParameter","ownedComment":[{"$type":"Comment","$id":"ParameterableElement-templateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterableElement-templateParameter","body":"The TemplateParameter that exposes this ParameterableElement as a formal parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ParameterableElement-templateParameter-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ParameterableElement-isCompatibleWith","$ns":"uml","name":"isCompatibleWith","isQuery":"true","bodyCondition":"ParameterableElement-isCompatibleWith-spec","ownedComment":[{"$type":"Comment","$id":"ParameterableElement-isCompatibleWith-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterableElement-isCompatibleWith","body":"The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints."}],"ownedRule":[{"$type":"Constraint","$id":"ParameterableElement-isCompatibleWith-spec","$ns":"uml","name":"spec","constrainedElement":"ParameterableElement-isCompatibleWith","specification":[{"$type":"OpaqueExpression","$id":"ParameterableElement-isCompatibleWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oclIsKindOf(p.oclType()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ParameterableElement-isCompatibleWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"ParameterableElement-isCompatibleWith-p","$ns":"uml","name":"p","type":"ParameterableElement"}]},{"$type":"Operation","$id":"ParameterableElement-isTemplateParameter","$ns":"uml","name":"isTemplateParameter","isQuery":"true","bodyCondition":"ParameterableElement-isTemplateParameter-spec","ownedComment":[{"$type":"Comment","$id":"ParameterableElement-isTemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterableElement-isTemplateParameter","body":"The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter."}],"ownedRule":[{"$type":"Constraint","$id":"ParameterableElement-isTemplateParameter-spec","$ns":"uml","name":"spec","constrainedElement":"ParameterableElement-isTemplateParameter","specification":[{"$type":"OpaqueExpression","$id":"ParameterableElement-isTemplateParameter-spec-_specification","$ns":"uml","language":"OCL","body":"result = (templateParameter->notEmpty())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ParameterableElement-isTemplateParameter-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]}]},{"$type":"Class","$id":"Realization","$ns":"uml","name":"Realization","ownedComment":[{"$type":"Comment","$id":"Realization-_ownedComment.0","$ns":"uml","annotatedElement":"Realization","body":"Realization is a specialized Abstraction relationship between two sets of model Elements, one representing a specification (the supplier) and the other represents an implementation of the latter (the client). Realization can be used to model stepwise refinement, optimizations, transformations, templates, model synthesis, framework composition, etc."}],"generalization":[{"$type":"Generalization","$id":"Realization-_generalization.0","$ns":"uml","general":"Abstraction"}]},{"$type":"Class","$id":"Relationship","$ns":"uml","name":"Relationship","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Relationship-_ownedComment.0","$ns":"uml","annotatedElement":"Relationship","body":"Relationship is an abstract concept that specifies some kind of relationship between Elements."}],"generalization":[{"$type":"Generalization","$id":"Relationship-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"Relationship-relatedElement","$ns":"uml","name":"relatedElement","type":"Element","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_relatedElement_relationship","ownedComment":[{"$type":"Comment","$id":"Relationship-relatedElement-_ownedComment.0","$ns":"uml","annotatedElement":"Relationship-relatedElement","body":"Specifies the elements related by the Relationship."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Relationship-relatedElement-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"TemplateableElement","$ns":"uml","name":"TemplateableElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"TemplateableElement-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateableElement","body":"A TemplateableElement is an Element that can optionally be defined as a template and bound to other templates."}],"generalization":[{"$type":"Generalization","$id":"TemplateableElement-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"TemplateableElement-ownedTemplateSignature","$ns":"uml","name":"ownedTemplateSignature","type":"TemplateSignature","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_ownedTemplateSignature_template","ownedComment":[{"$type":"Comment","$id":"TemplateableElement-ownedTemplateSignature-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateableElement-ownedTemplateSignature","body":"The optional TemplateSignature specifying the formal TemplateParameters for this TemplateableElement. If a TemplateableElement has a TemplateSignature, then it is a template."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateableElement-ownedTemplateSignature-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateableElement-templateBinding","$ns":"uml","name":"templateBinding","type":"TemplateBinding","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_templateBinding_boundElement","ownedComment":[{"$type":"Comment","$id":"TemplateableElement-templateBinding-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateableElement-templateBinding","body":"The optional TemplateBindings from this TemplateableElement to one or more templates."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TemplateableElement-templateBinding-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateableElement-templateBinding-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"TemplateableElement-isTemplate","$ns":"uml","name":"isTemplate","isQuery":"true","bodyCondition":"TemplateableElement-isTemplate-spec","ownedComment":[{"$type":"Comment","$id":"TemplateableElement-isTemplate-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateableElement-isTemplate","body":"The query isTemplate() returns whether this TemplateableElement is actually a template."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateableElement-isTemplate-spec","$ns":"uml","name":"spec","constrainedElement":"TemplateableElement-isTemplate","specification":[{"$type":"OpaqueExpression","$id":"TemplateableElement-isTemplate-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedTemplateSignature <> null)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"TemplateableElement-isTemplate-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"TemplateableElement-parameterableElements","$ns":"uml","name":"parameterableElements","isQuery":"true","bodyCondition":"TemplateableElement-parameterableElements-spec","ownedComment":[{"$type":"Comment","$id":"TemplateableElement-parameterableElements-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateableElement-parameterableElements","body":"The query parameterableElements() returns the set of ParameterableElements that may be used as the parameteredElements for a TemplateParameter of this TemplateableElement. By default, this set includes all the ownedElements. Subclasses may override this operation if they choose to restrict the set of ParameterableElements."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateableElement-parameterableElements-spec","$ns":"uml","name":"spec","constrainedElement":"TemplateableElement-parameterableElements","specification":[{"$type":"OpaqueExpression","$id":"TemplateableElement-parameterableElements-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.allOwnedElements()->select(oclIsKindOf(ParameterableElement)).oclAsType(ParameterableElement)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"TemplateableElement-parameterableElements-result","$ns":"uml","name":"result","type":"ParameterableElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TemplateableElement-parameterableElements-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateableElement-parameterableElements-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"TemplateBinding","$ns":"uml","name":"TemplateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding","body":"A TemplateBinding is a DirectedRelationship between a TemplateableElement and a template. A TemplateBinding specifies the TemplateParameterSubstitutions of actual parameters for the formal parameters of the template."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateBinding-parameter_substitution_formal","$ns":"uml","name":"parameter_substitution_formal","constrainedElement":"TemplateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-parameter_substitution_formal-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding-parameter_substitution_formal","body":"Each parameterSubstitution must refer to a formal TemplateParameter of the target TemplateSignature."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateBinding-parameter_substitution_formal-_specification","$ns":"uml","language":"OCL","body":"parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))"}]},{"$type":"Constraint","$id":"TemplateBinding-one_parameter_substitution","$ns":"uml","name":"one_parameter_substitution","constrainedElement":"TemplateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-one_parameter_substitution-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding-one_parameter_substitution","body":"A TemplateBiinding contains at most one TemplateParameterSubstitution for each formal TemplateParameter of the target TemplateSignature."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateBinding-one_parameter_substitution-_specification","$ns":"uml","language":"OCL","body":"signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)"}]}],"generalization":[{"$type":"Generalization","$id":"TemplateBinding-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"TemplateBinding-boundElement","$ns":"uml","name":"boundElement","type":"TemplateableElement","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_templateBinding_boundElement","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-boundElement-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding-boundElement","body":"The TemplateableElement that is bound by this TemplateBinding."}]},{"$type":"Property","$id":"TemplateBinding-parameterSubstitution","$ns":"uml","name":"parameterSubstitution","type":"TemplateParameterSubstitution","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_parameterSubstitution_templateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-parameterSubstitution-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding-parameterSubstitution","body":"The TemplateParameterSubstitutions owned by this TemplateBinding."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TemplateBinding-parameterSubstitution-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateBinding-parameterSubstitution-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateBinding-signature","$ns":"uml","name":"signature","type":"TemplateSignature","subsettedProperty":"DirectedRelationship-target","association":"A_signature_templateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateBinding-signature-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateBinding-signature","body":"The TemplateSignature for the template that is the target of this TemplateBinding."}]}]},{"$type":"Class","$id":"TemplateParameter","$ns":"uml","name":"TemplateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter","body":"A TemplateParameter exposes a ParameterableElement as a formal parameter of a template."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateParameter-must_be_compatible","$ns":"uml","name":"must_be_compatible","constrainedElement":"TemplateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-must_be_compatible-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-must_be_compatible","body":"The default must be compatible with the formal TemplateParameter."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateParameter-must_be_compatible-_specification","$ns":"uml","language":"OCL","body":"default <> null implies default.isCompatibleWith(parameteredElement)"}]}],"generalization":[{"$type":"Generalization","$id":"TemplateParameter-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"TemplateParameter-default","$ns":"uml","name":"default","type":"ParameterableElement","association":"A_default_templateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-default-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-default","body":"The ParameterableElement that is the default for this formal TemplateParameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateParameter-default-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateParameter-ownedDefault","$ns":"uml","name":"ownedDefault","type":"ParameterableElement","aggregation":"composite","subsettedProperty":"Element-ownedElement TemplateParameter-default","association":"A_ownedDefault_templateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-ownedDefault-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-ownedDefault","body":"The ParameterableElement that is owned by this TemplateParameter for the purpose of providing a default."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateParameter-ownedDefault-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateParameter-ownedParameteredElement","$ns":"uml","name":"ownedParameteredElement","type":"ParameterableElement","aggregation":"composite","subsettedProperty":"Element-ownedElement TemplateParameter-parameteredElement","association":"A_ownedParameteredElement_owningTemplateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-ownedParameteredElement-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-ownedParameteredElement","body":"The ParameterableElement that is owned by this TemplateParameter for the purpose of exposing it as the parameteredElement."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateParameter-ownedParameteredElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateParameter-parameteredElement","$ns":"uml","name":"parameteredElement","type":"ParameterableElement","association":"A_parameteredElement_templateParameter","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-parameteredElement-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-parameteredElement","body":"The ParameterableElement exposed by this TemplateParameter."}]},{"$type":"Property","$id":"TemplateParameter-signature","$ns":"uml","name":"signature","type":"TemplateSignature","subsettedProperty":"A_parameter_templateSignature-templateSignature Element-owner","association":"A_ownedParameter_signature","ownedComment":[{"$type":"Comment","$id":"TemplateParameter-signature-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameter-signature","body":"The TemplateSignature that owns this TemplateParameter."}]}]},{"$type":"Class","$id":"TemplateParameterSubstitution","$ns":"uml","name":"TemplateParameterSubstitution","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution","body":"A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateParameterSubstitution-must_be_compatible","$ns":"uml","name":"must_be_compatible","constrainedElement":"TemplateParameterSubstitution","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-must_be_compatible-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution-must_be_compatible","body":"The actual ParameterableElement must be compatible with the formal TemplateParameter, e.g., the actual ParameterableElement for a Class TemplateParameter must be a Class."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateParameterSubstitution-must_be_compatible-_specification","$ns":"uml","language":"OCL","body":"actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))"}]}],"generalization":[{"$type":"Generalization","$id":"TemplateParameterSubstitution-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"TemplateParameterSubstitution-actual","$ns":"uml","name":"actual","type":"ParameterableElement","association":"A_actual_templateParameterSubstitution","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-actual-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution-actual","body":"The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution."}]},{"$type":"Property","$id":"TemplateParameterSubstitution-formal","$ns":"uml","name":"formal","type":"TemplateParameter","association":"A_formal_templateParameterSubstitution","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-formal-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution-formal","body":"The formal TemplateParameter that is associated with this TemplateParameterSubstitution."}]},{"$type":"Property","$id":"TemplateParameterSubstitution-ownedActual","$ns":"uml","name":"ownedActual","type":"ParameterableElement","aggregation":"composite","subsettedProperty":"Element-ownedElement TemplateParameterSubstitution-actual","association":"A_ownedActual_owningTemplateParameterSubstitution","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-ownedActual-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution-ownedActual","body":"The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateParameterSubstitution-ownedActual-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateParameterSubstitution-templateBinding","$ns":"uml","name":"templateBinding","type":"TemplateBinding","subsettedProperty":"Element-owner","association":"A_parameterSubstitution_templateBinding","ownedComment":[{"$type":"Comment","$id":"TemplateParameterSubstitution-templateBinding-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateParameterSubstitution-templateBinding","body":"The TemplateBinding that owns this TemplateParameterSubstitution."}]}]},{"$type":"Class","$id":"TemplateSignature","$ns":"uml","name":"TemplateSignature","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature","body":"A Template Signature bundles the set of formal TemplateParameters for a template."}],"ownedRule":[{"$type":"Constraint","$id":"TemplateSignature-own_elements","$ns":"uml","name":"own_elements","constrainedElement":"TemplateSignature","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-own_elements-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature-own_elements","body":"Parameters must own the ParameterableElements they parameter or those ParameterableElements must be owned by the TemplateableElement being templated."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateSignature-own_elements-_specification","$ns":"uml","language":"OCL","body":"template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())"}]},{"$type":"Constraint","$id":"TemplateSignature-unique_parameters","$ns":"uml","name":"unique_parameters","constrainedElement":"TemplateSignature","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-unique_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature-unique_parameters","body":"The names of the parameters of a TemplateSignature are unique."}],"specification":[{"$type":"OpaqueExpression","$id":"TemplateSignature-unique_parameters-_specification","$ns":"uml","language":"OCL","body":"parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies\r\n   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)"}]}],"generalization":[{"$type":"Generalization","$id":"TemplateSignature-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"TemplateSignature-ownedParameter","$ns":"uml","name":"ownedParameter","type":"TemplateParameter","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement TemplateSignature-parameter","association":"A_ownedParameter_signature","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-ownedParameter-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature-ownedParameter","body":"The formal parameters that are owned by this TemplateSignature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TemplateSignature-ownedParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"TemplateSignature-ownedParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"TemplateSignature-parameter","$ns":"uml","name":"parameter","type":"TemplateParameter","isOrdered":"true","association":"A_parameter_templateSignature","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-parameter-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature-parameter","body":"The ordered set of all formal TemplateParameters for this TemplateSignature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"TemplateSignature-parameter-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"TemplateSignature-template","$ns":"uml","name":"template","type":"TemplateableElement","subsettedProperty":"Element-owner","association":"A_ownedTemplateSignature_template","ownedComment":[{"$type":"Comment","$id":"TemplateSignature-template-_ownedComment.0","$ns":"uml","annotatedElement":"TemplateSignature-template","body":"The TemplateableElement that owns this TemplateSignature."}]}]},{"$type":"Class","$id":"Type","$ns":"uml","name":"Type","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Type-_ownedComment.0","$ns":"uml","annotatedElement":"Type","body":"A Type constrains the values represented by a TypedElement."}],"generalization":[{"$type":"Generalization","$id":"Type-_generalization.0","$ns":"uml","general":"PackageableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Type-package","$ns":"uml","name":"package","type":"Package","subsettedProperty":"A_packagedElement_owningPackage-owningPackage","association":"A_ownedType_package","ownedComment":[{"$type":"Comment","$id":"Type-package-_ownedComment.0","$ns":"uml","annotatedElement":"Type-package","body":"Specifies the owning Package of this Type, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Type-package-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Type-conformsTo","$ns":"uml","name":"conformsTo","isQuery":"true","bodyCondition":"Type-conformsTo-spec","ownedComment":[{"$type":"Comment","$id":"Type-conformsTo-_ownedComment.0","$ns":"uml","annotatedElement":"Type-conformsTo","body":"The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations."}],"ownedRule":[{"$type":"Constraint","$id":"Type-conformsTo-spec","$ns":"uml","name":"spec","constrainedElement":"Type-conformsTo","specification":[{"$type":"OpaqueExpression","$id":"Type-conformsTo-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Type-conformsTo-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Type-conformsTo-other","$ns":"uml","name":"other","type":"Type"}]}]},{"$type":"Class","$id":"TypedElement","$ns":"uml","name":"TypedElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"TypedElement-_ownedComment.0","$ns":"uml","annotatedElement":"TypedElement","body":"A TypedElement is a NamedElement that may have a Type specified for it."}],"generalization":[{"$type":"Generalization","$id":"TypedElement-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"TypedElement-type","$ns":"uml","name":"type","type":"Type","association":"A_type_typedElement","ownedComment":[{"$type":"Comment","$id":"TypedElement-type-_ownedComment.0","$ns":"uml","annotatedElement":"TypedElement-type","body":"The type of the TypedElement."}],"lowerValue":[{"$type":"LiteralInteger","$id":"TypedElement-type-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Usage","$ns":"uml","name":"Usage","ownedComment":[{"$type":"Comment","$id":"Usage-_ownedComment.0","$ns":"uml","annotatedElement":"Usage","body":"A Usage is a Dependency in which the client Element requires the supplier Element (or set of Elements) for its full implementation or operation."}],"generalization":[{"$type":"Generalization","$id":"Usage-_generalization.0","$ns":"uml","general":"Dependency"}]},{"$type":"Enumeration","$id":"VisibilityKind","$ns":"uml","name":"VisibilityKind","ownedComment":[{"$type":"Comment","$id":"VisibilityKind-_ownedComment.0","$ns":"uml","annotatedElement":"VisibilityKind","body":"VisibilityKind is an enumeration type that defines literals to determine the visibility of Elements in a model."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"VisibilityKind-public","$ns":"uml","name":"public","ownedComment":[{"$type":"Comment","$id":"VisibilityKind-public-_ownedComment.0","$ns":"uml","annotatedElement":"VisibilityKind-public","body":"A Named Element with public visibility is visible to all elements that can access the contents of the Namespace that owns it."}]},{"$type":"EnumerationLiteral","$id":"VisibilityKind-private","$ns":"uml","name":"private","ownedComment":[{"$type":"Comment","$id":"VisibilityKind-private-_ownedComment.0","$ns":"uml","annotatedElement":"VisibilityKind-private","body":"A NamedElement with private visibility is only visible inside the Namespace that owns it."}]},{"$type":"EnumerationLiteral","$id":"VisibilityKind-protected","$ns":"uml","name":"protected","ownedComment":[{"$type":"Comment","$id":"VisibilityKind-protected-_ownedComment.0","$ns":"uml","annotatedElement":"VisibilityKind-protected","body":"A NamedElement with protected visibility is visible to Elements that have a generalization relationship to the Namespace that owns it."}]},{"$type":"EnumerationLiteral","$id":"VisibilityKind-package","$ns":"uml","name":"package","ownedComment":[{"$type":"Comment","$id":"VisibilityKind-package-_ownedComment.0","$ns":"uml","annotatedElement":"VisibilityKind-package","body":"A NamedElement with package visibility is visible to all Elements within the nearest enclosing Package (given that other owning Elements have proper visibility). Outside the nearest enclosing Package, a NamedElement marked as having package visibility is not visible.  Only NamedElements that are not owned by Packages can be marked as having package visibility. "}]}]},{"$type":"Association","$id":"A_type_typedElement","$ns":"uml","name":"A_type_typedElement","memberEnd":"TypedElement-type A_type_typedElement-typedElement","ownedEnd":[{"$type":"Property","$id":"A_type_typedElement-typedElement","$ns":"uml","name":"typedElement","type":"TypedElement","association":"A_type_typedElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_type_typedElement-typedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_type_typedElement-typedElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameter_signature","$ns":"uml","name":"A_ownedParameter_signature","memberEnd":"TemplateSignature-ownedParameter TemplateParameter-signature"},{"$type":"Association","$id":"A_parameter_templateSignature","$ns":"uml","name":"A_parameter_templateSignature","memberEnd":"TemplateSignature-parameter A_parameter_templateSignature-templateSignature","ownedEnd":[{"$type":"Property","$id":"A_parameter_templateSignature-templateSignature","$ns":"uml","name":"templateSignature","type":"TemplateSignature","association":"A_parameter_templateSignature","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_parameter_templateSignature-templateSignature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_parameter_templateSignature-templateSignature-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_actual_templateParameterSubstitution","$ns":"uml","name":"A_actual_templateParameterSubstitution","memberEnd":"TemplateParameterSubstitution-actual A_actual_templateParameterSubstitution-templateParameterSubstitution","ownedEnd":[{"$type":"Property","$id":"A_actual_templateParameterSubstitution-templateParameterSubstitution","$ns":"uml","name":"templateParameterSubstitution","type":"TemplateParameterSubstitution","association":"A_actual_templateParameterSubstitution","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_actual_templateParameterSubstitution-templateParameterSubstitution-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_actual_templateParameterSubstitution-templateParameterSubstitution-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedActual_owningTemplateParameterSubstitution","$ns":"uml","name":"A_ownedActual_owningTemplateParameterSubstitution","memberEnd":"TemplateParameterSubstitution-ownedActual A_ownedActual_owningTemplateParameterSubstitution-owningTemplateParameterSubstitution","generalization":[{"$type":"Generalization","$id":"A_ownedActual_owningTemplateParameterSubstitution-_generalization.0","$ns":"uml","general":"A_actual_templateParameterSubstitution"}],"ownedEnd":[{"$type":"Property","$id":"A_ownedActual_owningTemplateParameterSubstitution-owningTemplateParameterSubstitution","$ns":"uml","name":"owningTemplateParameterSubstitution","type":"TemplateParameterSubstitution","redefinedProperty":"A_actual_templateParameterSubstitution-templateParameterSubstitution","subsettedProperty":"Element-owner","association":"A_ownedActual_owningTemplateParameterSubstitution","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedActual_owningTemplateParameterSubstitution-owningTemplateParameterSubstitution-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_formal_templateParameterSubstitution","$ns":"uml","name":"A_formal_templateParameterSubstitution","memberEnd":"TemplateParameterSubstitution-formal A_formal_templateParameterSubstitution-templateParameterSubstitution","ownedEnd":[{"$type":"Property","$id":"A_formal_templateParameterSubstitution-templateParameterSubstitution","$ns":"uml","name":"templateParameterSubstitution","type":"TemplateParameterSubstitution","association":"A_formal_templateParameterSubstitution","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_formal_templateParameterSubstitution-templateParameterSubstitution-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_formal_templateParameterSubstitution-templateParameterSubstitution-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedDefault_templateParameter","$ns":"uml","name":"A_ownedDefault_templateParameter","memberEnd":"TemplateParameter-ownedDefault A_ownedDefault_templateParameter-templateParameter","generalization":[{"$type":"Generalization","$id":"A_ownedDefault_templateParameter-_generalization.0","$ns":"uml","general":"A_default_templateParameter"}],"ownedEnd":[{"$type":"Property","$id":"A_ownedDefault_templateParameter-templateParameter","$ns":"uml","name":"templateParameter","type":"TemplateParameter","redefinedProperty":"A_default_templateParameter-templateParameter","subsettedProperty":"Element-owner","association":"A_ownedDefault_templateParameter","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedDefault_templateParameter-templateParameter-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameteredElement_owningTemplateParameter","$ns":"uml","name":"A_ownedParameteredElement_owningTemplateParameter","memberEnd":"TemplateParameter-ownedParameteredElement ParameterableElement-owningTemplateParameter"},{"$type":"Association","$id":"A_default_templateParameter","$ns":"uml","name":"A_default_templateParameter","memberEnd":"TemplateParameter-default A_default_templateParameter-templateParameter","ownedEnd":[{"$type":"Property","$id":"A_default_templateParameter-templateParameter","$ns":"uml","name":"templateParameter","type":"TemplateParameter","association":"A_default_templateParameter","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_default_templateParameter-templateParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_default_templateParameter-templateParameter-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_parameteredElement_templateParameter","$ns":"uml","name":"A_parameteredElement_templateParameter","memberEnd":"TemplateParameter-parameteredElement ParameterableElement-templateParameter"},{"$type":"Association","$id":"A_signature_templateBinding","$ns":"uml","name":"A_signature_templateBinding","memberEnd":"TemplateBinding-signature A_signature_templateBinding-templateBinding","ownedEnd":[{"$type":"Property","$id":"A_signature_templateBinding-templateBinding","$ns":"uml","name":"templateBinding","type":"TemplateBinding","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_signature_templateBinding","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signature_templateBinding-templateBinding-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signature_templateBinding-templateBinding-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_parameterSubstitution_templateBinding","$ns":"uml","name":"A_parameterSubstitution_templateBinding","memberEnd":"TemplateBinding-parameterSubstitution TemplateParameterSubstitution-templateBinding"},{"$type":"Association","$id":"A_templateBinding_boundElement","$ns":"uml","name":"A_templateBinding_boundElement","memberEnd":"TemplateableElement-templateBinding TemplateBinding-boundElement"},{"$type":"Association","$id":"A_ownedTemplateSignature_template","$ns":"uml","name":"A_ownedTemplateSignature_template","memberEnd":"TemplateableElement-ownedTemplateSignature TemplateSignature-template"},{"$type":"Association","$id":"A_relatedElement_relationship","$ns":"uml","name":"A_relatedElement_relationship","memberEnd":"Relationship-relatedElement A_relatedElement_relationship-relationship","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_relatedElement_relationship-relationship","$ns":"uml","name":"relationship","type":"Relationship","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_relatedElement_relationship","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_relatedElement_relationship-relationship-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_relatedElement_relationship-relationship-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_importedPackage_packageImport","$ns":"uml","name":"A_importedPackage_packageImport","memberEnd":"PackageImport-importedPackage A_importedPackage_packageImport-packageImport","ownedEnd":[{"$type":"Property","$id":"A_importedPackage_packageImport-packageImport","$ns":"uml","name":"packageImport","type":"PackageImport","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_importedPackage_packageImport","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_importedPackage_packageImport-packageImport-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_importedPackage_packageImport-packageImport-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_elementImport_importingNamespace","$ns":"uml","name":"A_elementImport_importingNamespace","memberEnd":"Namespace-elementImport ElementImport-importingNamespace"},{"$type":"Association","$id":"A_ownedMember_namespace","$ns":"uml","name":"A_ownedMember_namespace","memberEnd":"Namespace-ownedMember NamedElement-namespace","isDerived":"true"},{"$type":"Association","$id":"A_ownedRule_context","$ns":"uml","name":"A_ownedRule_context","memberEnd":"Namespace-ownedRule Constraint-context"},{"$type":"Association","$id":"A_packageImport_importingNamespace","$ns":"uml","name":"A_packageImport_importingNamespace","memberEnd":"Namespace-packageImport PackageImport-importingNamespace"},{"$type":"Association","$id":"A_member_memberNamespace","$ns":"uml","name":"A_member_memberNamespace","memberEnd":"Namespace-member A_member_memberNamespace-memberNamespace","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_member_memberNamespace-memberNamespace","$ns":"uml","name":"memberNamespace","type":"Namespace","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_member_memberNamespace","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_member_memberNamespace-memberNamespace-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_member_memberNamespace-memberNamespace-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_importedMember_namespace","$ns":"uml","name":"A_importedMember_namespace","memberEnd":"Namespace-importedMember A_importedMember_namespace-namespace","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_importedMember_namespace-namespace","$ns":"uml","name":"namespace","type":"Namespace","subsettedProperty":"A_member_memberNamespace-memberNamespace","association":"A_importedMember_namespace","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_importedMember_namespace-namespace-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_importedMember_namespace-namespace-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_nameExpression_namedElement","$ns":"uml","name":"A_nameExpression_namedElement","memberEnd":"NamedElement-nameExpression A_nameExpression_namedElement-namedElement","ownedEnd":[{"$type":"Property","$id":"A_nameExpression_namedElement-namedElement","$ns":"uml","name":"namedElement","type":"NamedElement","subsettedProperty":"Element-owner","association":"A_nameExpression_namedElement","lowerValue":[{"$type":"LiteralInteger","$id":"A_nameExpression_namedElement-namedElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_clientDependency_client","$ns":"uml","name":"A_clientDependency_client","memberEnd":"NamedElement-clientDependency Dependency-client"},{"$type":"Association","$id":"A_lowerValue_owningLower","$ns":"uml","name":"A_lowerValue_owningLower","memberEnd":"MultiplicityElement-lowerValue A_lowerValue_owningLower-owningLower","ownedEnd":[{"$type":"Property","$id":"A_lowerValue_owningLower-owningLower","$ns":"uml","name":"owningLower","type":"MultiplicityElement","subsettedProperty":"Element-owner","association":"A_lowerValue_owningLower","lowerValue":[{"$type":"LiteralInteger","$id":"A_lowerValue_owningLower-owningLower-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_upperValue_owningUpper","$ns":"uml","name":"A_upperValue_owningUpper","memberEnd":"MultiplicityElement-upperValue A_upperValue_owningUpper-owningUpper","ownedEnd":[{"$type":"Property","$id":"A_upperValue_owningUpper-owningUpper","$ns":"uml","name":"owningUpper","type":"MultiplicityElement","subsettedProperty":"Element-owner","association":"A_upperValue_owningUpper","lowerValue":[{"$type":"LiteralInteger","$id":"A_upperValue_owningUpper-owningUpper-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_importedElement_import","$ns":"uml","name":"A_importedElement_import","memberEnd":"ElementImport-importedElement A_importedElement_import-import","ownedEnd":[{"$type":"Property","$id":"A_importedElement_import-import","$ns":"uml","name":"import","type":"ElementImport","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_importedElement_import","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_importedElement_import-import-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_importedElement_import-import-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedElement_owner","$ns":"uml","name":"A_ownedElement_owner","memberEnd":"Element-ownedElement Element-owner","isDerived":"true"},{"$type":"Association","$id":"A_ownedComment_owningElement","$ns":"uml","name":"A_ownedComment_owningElement","memberEnd":"Element-ownedComment A_ownedComment_owningElement-owningElement","ownedEnd":[{"$type":"Property","$id":"A_ownedComment_owningElement-owningElement","$ns":"uml","name":"owningElement","type":"Element","subsettedProperty":"Element-owner","association":"A_ownedComment_owningElement","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedComment_owningElement-owningElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_source_directedRelationship","$ns":"uml","name":"A_source_directedRelationship","memberEnd":"DirectedRelationship-source A_source_directedRelationship-directedRelationship","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_source_directedRelationship-directedRelationship","$ns":"uml","name":"directedRelationship","type":"DirectedRelationship","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_relatedElement_relationship-relationship","association":"A_source_directedRelationship","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_source_directedRelationship-directedRelationship-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_source_directedRelationship-directedRelationship-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_target_directedRelationship","$ns":"uml","name":"A_target_directedRelationship","memberEnd":"DirectedRelationship-target A_target_directedRelationship-directedRelationship","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_target_directedRelationship-directedRelationship","$ns":"uml","name":"directedRelationship","type":"DirectedRelationship","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_relatedElement_relationship-relationship","association":"A_target_directedRelationship","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_target_directedRelationship-directedRelationship-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_target_directedRelationship-directedRelationship-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_supplier_supplierDependency","$ns":"uml","name":"A_supplier_supplierDependency","memberEnd":"Dependency-supplier A_supplier_supplierDependency-supplierDependency","ownedEnd":[{"$type":"Property","$id":"A_supplier_supplierDependency-supplierDependency","$ns":"uml","name":"supplierDependency","type":"Dependency","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_supplier_supplierDependency","ownedComment":[{"$type":"Comment","$id":"A_supplier_supplierDependency-supplierDependency-_ownedComment.0","$ns":"uml","annotatedElement":"A_supplier_supplierDependency-supplierDependency","body":"Indicates the dependencies that reference the supplier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_supplier_supplierDependency-supplierDependency-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_supplier_supplierDependency-supplierDependency-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_constrainedElement_constraint","$ns":"uml","name":"A_constrainedElement_constraint","memberEnd":"Constraint-constrainedElement A_constrainedElement_constraint-constraint","ownedEnd":[{"$type":"Property","$id":"A_constrainedElement_constraint-constraint","$ns":"uml","name":"constraint","type":"Constraint","association":"A_constrainedElement_constraint","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_constrainedElement_constraint-constraint-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_constrainedElement_constraint-constraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_specification_owningConstraint","$ns":"uml","name":"A_specification_owningConstraint","memberEnd":"Constraint-specification A_specification_owningConstraint-owningConstraint","ownedEnd":[{"$type":"Property","$id":"A_specification_owningConstraint-owningConstraint","$ns":"uml","name":"owningConstraint","type":"Constraint","subsettedProperty":"Element-owner","association":"A_specification_owningConstraint","lowerValue":[{"$type":"LiteralInteger","$id":"A_specification_owningConstraint-owningConstraint-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_annotatedElement_comment","$ns":"uml","name":"A_annotatedElement_comment","memberEnd":"Comment-annotatedElement A_annotatedElement_comment-comment","ownedEnd":[{"$type":"Property","$id":"A_annotatedElement_comment-comment","$ns":"uml","name":"comment","type":"Comment","association":"A_annotatedElement_comment","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_annotatedElement_comment-comment-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_annotatedElement_comment-comment-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_mapping_abstraction","$ns":"uml","name":"A_mapping_abstraction","memberEnd":"Abstraction-mapping A_mapping_abstraction-abstraction","ownedEnd":[{"$type":"Property","$id":"A_mapping_abstraction-abstraction","$ns":"uml","name":"abstraction","type":"Abstraction","subsettedProperty":"Element-owner","association":"A_mapping_abstraction","lowerValue":[{"$type":"LiteralInteger","$id":"A_mapping_abstraction-abstraction-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"CommonBehavior","$ns":"uml","name":"CommonBehavior","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"SimpleClassifiers"}],"packagedElement":[{"$type":"Class","$id":"AnyReceiveEvent","$ns":"uml","name":"AnyReceiveEvent","ownedComment":[{"$type":"Comment","$id":"AnyReceiveEvent-_ownedComment.0","$ns":"uml","annotatedElement":"AnyReceiveEvent","body":"A trigger for an AnyReceiveEvent is triggered by the receipt of any message that is not explicitly handled by any related trigger."}],"generalization":[{"$type":"Generalization","$id":"AnyReceiveEvent-_generalization.0","$ns":"uml","general":"MessageEvent"}]},{"$type":"Class","$id":"Behavior","$ns":"uml","name":"Behavior","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Behavior-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior","body":"Behavior is a specification of how its context BehavioredClassifier changes state over time. This specification may be either a definition of possible behavior execution or emergent behavior, or a selective illustration of an interesting subset of possible executions. The latter form is typically used for capturing examples, such as a trace of a particular execution."}],"ownedRule":[{"$type":"Constraint","$id":"Behavior-most_one_behavior","$ns":"uml","name":"most_one_behavior","constrainedElement":"Behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-most_one_behavior-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-most_one_behavior","body":"There may be at most one Behavior for a given pairing of BehavioredClassifier (as owner of the Behavior) and BehavioralFeature (as specification of the Behavior)."}],"specification":[{"$type":"OpaqueExpression","$id":"Behavior-most_one_behavior-_specification","$ns":"uml","language":"OCL","body":"specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1"}]},{"$type":"Constraint","$id":"Behavior-parameters_match","$ns":"uml","name":"parameters_match","constrainedElement":"Behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-parameters_match-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-parameters_match","body":"If a Behavior has a specification BehavioralFeature, then it must have the same number of ownedParameters as its specification. The Behavior Parameters must also \"match\" the BehavioralParameter Parameters, but the exact requirements for this matching are not formalized."}],"specification":[{"$type":"OpaqueExpression","$id":"Behavior-parameters_match-_specification","$ns":"uml","language":"OCL","body":"specification <> null implies ownedParameter->size() = specification.ownedParameter->size()"}]},{"$type":"Constraint","$id":"Behavior-feature_of_context_classifier","$ns":"uml","name":"feature_of_context_classifier","constrainedElement":"Behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-feature_of_context_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-feature_of_context_classifier","body":"The specification BehavioralFeature must be a feature (possibly inherited) of the context BehavioredClassifier of the Behavior."}],"specification":[{"$type":"OpaqueExpression","$id":"Behavior-feature_of_context_classifier-_specification","$ns":"uml","language":"OCL","body":"_'context'.feature->includes(specification)"}]}],"generalization":[{"$type":"Generalization","$id":"Behavior-_generalization.0","$ns":"uml","general":"Class"}],"ownedAttribute":[{"$type":"Property","$id":"Behavior-context","$ns":"uml","name":"context","type":"BehavioredClassifier","isReadOnly":"true","isDerived":"true","subsettedProperty":"RedefinableElement-redefinitionContext","association":"A_context_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-context-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-context","body":"The BehavioredClassifier that is the context for the execution of the Behavior. A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. For example, following this algorithm, the context of an entry Behavior in a StateMachine is the BehavioredClassifier that owns the StateMachine. The features of the context BehavioredClassifier as well as the Elements visible to the context Classifier are visible to the Behavior."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-context-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-isReentrant","$ns":"uml","name":"isReentrant","ownedComment":[{"$type":"Comment","$id":"Behavior-isReentrant-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-isReentrant","body":"Tells whether the Behavior can be invoked while it is still executing from a previous invocation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Behavior-isReentrant-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"Behavior-ownedParameter","$ns":"uml","name":"ownedParameter","type":"Parameter","isOrdered":"true","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedParameter_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-ownedParameter-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-ownedParameter","body":"References a list of Parameters to the Behavior which describes the order and type of arguments that can be given when the Behavior is invoked and of the values which will be returned when the Behavior completes its execution."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-ownedParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-ownedParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-ownedParameterSet","$ns":"uml","name":"ownedParameterSet","type":"ParameterSet","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedParameterSet_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-ownedParameterSet-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-ownedParameterSet","body":"The ParameterSets owned by this Behavior."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-ownedParameterSet-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-ownedParameterSet-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-postcondition","$ns":"uml","name":"postcondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_postcondition_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-postcondition-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-postcondition","body":"An optional set of Constraints specifying what is fulfilled after the execution of the Behavior is completed, if its precondition was fulfilled before its invocation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-postcondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-postcondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-precondition","$ns":"uml","name":"precondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_precondition_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-precondition-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-precondition","body":"An optional set of Constraints specifying what must be fulfilled before the Behavior is invoked."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-precondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-precondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-specification","$ns":"uml","name":"specification","type":"BehavioralFeature","association":"A_method_specification","ownedComment":[{"$type":"Comment","$id":"Behavior-specification-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-specification","body":"Designates a BehavioralFeature that the Behavior implements. The BehavioralFeature must be owned by the BehavioredClassifier that owns the Behavior or be inherited by it. The Parameters of the BehavioralFeature and the implementing Behavior must match. A Behavior does not need to have a specification, in which case it either is the classifierBehavior of a BehavioredClassifier or it can only be invoked by another Behavior of the Classifier."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-specification-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Behavior-redefinedBehavior","$ns":"uml","name":"redefinedBehavior","type":"Behavior","subsettedProperty":"Classifier-redefinedClassifier","association":"A_redefinedBehavior_behavior","ownedComment":[{"$type":"Comment","$id":"Behavior-redefinedBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-redefinedBehavior","body":"References the Behavior that this Behavior redefines. A subtype of Behavior may redefine any other subtype of Behavior. If the Behavior implements a BehavioralFeature, it replaces the redefined Behavior. If the Behavior is a classifierBehavior, it extends the redefined Behavior."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-redefinedBehavior-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-redefinedBehavior-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Behavior-context.1","$ns":"uml","name":"context","isQuery":"true","bodyCondition":"Behavior-context.1-spec","ownedComment":[{"$type":"Comment","$id":"Behavior-context.1-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-context.1","body":"A Behavior that is directly owned as a nestedClassifier does not have a context. Otherwise, to determine the context of a Behavior, find the first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any. If there is such a BehavioredClassifier, then it is the context, unless it is itself a Behavior with a non-empty context, in which case that is also the context for the original Behavior. "}],"ownedRule":[{"$type":"Constraint","$id":"Behavior-context.1-spec","$ns":"uml","name":"spec","constrainedElement":"Behavior-context.1 Behavior-context","specification":[{"$type":"OpaqueExpression","$id":"Behavior-context.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if nestingClass <> null then\r\n    null\r\nelse\r\n    let b:BehavioredClassifier = self.behavioredClassifier(self.owner) in\r\n    if b.oclIsKindOf(Behavior) and b.oclAsType(Behavior)._'context' <> null then \r\n        b.oclAsType(Behavior)._'context'\r\n    else \r\n        b \r\n    endif\r\nendif\r\n        )"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Behavior-context.1-result","$ns":"uml","name":"result","type":"BehavioredClassifier","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-context.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Behavior-behavioredClassifier","$ns":"uml","name":"behavioredClassifier","isQuery":"true","precondition":"Behavior-behavioredClassifier-spec","ownedComment":[{"$type":"Comment","$id":"Behavior-behavioredClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-behavioredClassifier","body":"The first BehavioredClassifier reached by following the chain of owner relationships from the Behavior, if any."}],"ownedRule":[{"$type":"Constraint","$id":"Behavior-behavioredClassifier-spec","$ns":"uml","name":"spec","constrainedElement":"Behavior-behavioredClassifier","specification":[{"$type":"OpaqueExpression","$id":"Behavior-behavioredClassifier-spec-_specification","$ns":"uml","language":"OCL","body":"if from.oclIsKindOf(BehavioredClassifier) then\r\n    from.oclAsType(BehavioredClassifier)\r\nelse if from.owner = null then\r\n    null\r\nelse\r\n    self.behavioredClassifier(from.owner)\r\nendif\r\nendif\r\n    "}]}],"ownedParameter":[{"$type":"Parameter","$id":"Behavior-behavioredClassifier-from","$ns":"uml","name":"from","type":"Element"},{"$type":"Parameter","$id":"Behavior-behavioredClassifier-result","$ns":"uml","name":"result","type":"BehavioredClassifier","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-behavioredClassifier-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Behavior-inputParameters","$ns":"uml","name":"inputParameters","isQuery":"true","bodyCondition":"Behavior-inputParameters-spec","ownedComment":[{"$type":"Comment","$id":"Behavior-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-inputParameters","body":"The in and inout ownedParameters of the Behavior."}],"ownedRule":[{"$type":"Constraint","$id":"Behavior-inputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"Behavior-inputParameters","specification":[{"$type":"OpaqueExpression","$id":"Behavior-inputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Behavior-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-inputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Behavior-outputParameters","$ns":"uml","name":"outputParameters","isQuery":"true","bodyCondition":"Behavior-outputParameters-spec","ownedComment":[{"$type":"Comment","$id":"Behavior-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"Behavior-outputParameters","body":"The out, inout and return ownedParameters."}],"ownedRule":[{"$type":"Constraint","$id":"Behavior-outputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"Behavior-outputParameters","specification":[{"$type":"OpaqueExpression","$id":"Behavior-outputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Behavior-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Behavior-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Behavior-outputParameters-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"CallEvent","$ns":"uml","name":"CallEvent","ownedComment":[{"$type":"Comment","$id":"CallEvent-_ownedComment.0","$ns":"uml","annotatedElement":"CallEvent","body":"A CallEvent models the receipt by an object of a message invoking a call of an Operation."}],"generalization":[{"$type":"Generalization","$id":"CallEvent-_generalization.0","$ns":"uml","general":"MessageEvent"}],"ownedAttribute":[{"$type":"Property","$id":"CallEvent-operation","$ns":"uml","name":"operation","type":"Operation","association":"A_operation_callEvent","ownedComment":[{"$type":"Comment","$id":"CallEvent-operation-_ownedComment.0","$ns":"uml","annotatedElement":"CallEvent-operation","body":"Designates the Operation whose invocation raised the CalEvent."}]}]},{"$type":"Class","$id":"ChangeEvent","$ns":"uml","name":"ChangeEvent","ownedComment":[{"$type":"Comment","$id":"ChangeEvent-_ownedComment.0","$ns":"uml","annotatedElement":"ChangeEvent","body":"A ChangeEvent models a change in the system configuration that makes a condition true."}],"generalization":[{"$type":"Generalization","$id":"ChangeEvent-_generalization.0","$ns":"uml","general":"Event"}],"ownedAttribute":[{"$type":"Property","$id":"ChangeEvent-changeExpression","$ns":"uml","name":"changeExpression","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_changeExpression_changeEvent","ownedComment":[{"$type":"Comment","$id":"ChangeEvent-changeExpression-_ownedComment.0","$ns":"uml","annotatedElement":"ChangeEvent-changeExpression","body":"A Boolean-valued ValueSpecification that will result in a ChangeEvent whenever its value changes from false to true."}]}]},{"$type":"Class","$id":"Event","$ns":"uml","name":"Event","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Event-_ownedComment.0","$ns":"uml","annotatedElement":"Event","body":"An Event is the specification of some occurrence that may potentially trigger effects by an object."}],"generalization":[{"$type":"Generalization","$id":"Event-_generalization.0","$ns":"uml","general":"PackageableElement"}]},{"$type":"Class","$id":"FunctionBehavior","$ns":"uml","name":"FunctionBehavior","ownedComment":[{"$type":"Comment","$id":"FunctionBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"FunctionBehavior","body":"A FunctionBehavior is an OpaqueBehavior that does not access or modify any objects or other external data."}],"ownedRule":[{"$type":"Constraint","$id":"FunctionBehavior-one_output_parameter","$ns":"uml","name":"one_output_parameter","constrainedElement":"FunctionBehavior","ownedComment":[{"$type":"Comment","$id":"FunctionBehavior-one_output_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"FunctionBehavior-one_output_parameter","body":"A FunctionBehavior has at least one output Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"FunctionBehavior-one_output_parameter-_specification","$ns":"uml","language":"OCL","body":"self.ownedParameter->\r\n  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1"}]},{"$type":"Constraint","$id":"FunctionBehavior-types_of_parameters","$ns":"uml","name":"types_of_parameters","constrainedElement":"FunctionBehavior","ownedComment":[{"$type":"Comment","$id":"FunctionBehavior-types_of_parameters-_ownedComment.0","$ns":"uml","annotatedElement":"FunctionBehavior-types_of_parameters","body":"The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes."}],"specification":[{"$type":"OpaqueExpression","$id":"FunctionBehavior-types_of_parameters-_specification","$ns":"uml","language":"OCL","body":"ownedParameter->forAll(p | p.type <> null and\r\n  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))"}]}],"generalization":[{"$type":"Generalization","$id":"FunctionBehavior-_generalization.0","$ns":"uml","general":"OpaqueBehavior"}],"ownedOperation":[{"$type":"Operation","$id":"FunctionBehavior-hasAllDataTypeAttributes","$ns":"uml","name":"hasAllDataTypeAttributes","isQuery":"true","bodyCondition":"FunctionBehavior-hasAllDataTypeAttributes-spec","ownedComment":[{"$type":"Comment","$id":"FunctionBehavior-hasAllDataTypeAttributes-_ownedComment.0","$ns":"uml","annotatedElement":"FunctionBehavior-hasAllDataTypeAttributes","body":"The hasAllDataTypeAttributes query tests whether the types of the attributes of the given DataType are all DataTypes, and similarly for all those DataTypes."}],"ownedRule":[{"$type":"Constraint","$id":"FunctionBehavior-hasAllDataTypeAttributes-spec","$ns":"uml","name":"spec","constrainedElement":"FunctionBehavior-hasAllDataTypeAttributes","specification":[{"$type":"OpaqueExpression","$id":"FunctionBehavior-hasAllDataTypeAttributes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (d.ownedAttribute->forAll(a |\r\n    a.type.oclIsKindOf(DataType) and\r\n      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"FunctionBehavior-hasAllDataTypeAttributes-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"FunctionBehavior-hasAllDataTypeAttributes-d","$ns":"uml","name":"d","type":"DataType"}]}]},{"$type":"Class","$id":"MessageEvent","$ns":"uml","name":"MessageEvent","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"MessageEvent-_ownedComment.0","$ns":"uml","annotatedElement":"MessageEvent","body":"A MessageEvent specifies the receipt by an object of either an Operation call or a Signal instance."}],"generalization":[{"$type":"Generalization","$id":"MessageEvent-_generalization.0","$ns":"uml","general":"Event"}]},{"$type":"Class","$id":"OpaqueBehavior","$ns":"uml","name":"OpaqueBehavior","ownedComment":[{"$type":"Comment","$id":"OpaqueBehavior-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueBehavior","body":"An OpaqueBehavior is a Behavior whose specification is given in a textual language other than UML."}],"generalization":[{"$type":"Generalization","$id":"OpaqueBehavior-_generalization.0","$ns":"uml","general":"Behavior"}],"ownedAttribute":[{"$type":"Property","$id":"OpaqueBehavior-body","$ns":"uml","name":"body","isOrdered":"true","isUnique":"false","ownedComment":[{"$type":"Comment","$id":"OpaqueBehavior-body-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueBehavior-body","body":"Specifies the behavior in one or more languages."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueBehavior-body-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueBehavior-body-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueBehavior-language","$ns":"uml","name":"language","isOrdered":"true","ownedComment":[{"$type":"Comment","$id":"OpaqueBehavior-language-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueBehavior-language","body":"Languages the body strings use in the same order as the body strings."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueBehavior-language-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueBehavior-language-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"SignalEvent","$ns":"uml","name":"SignalEvent","ownedComment":[{"$type":"Comment","$id":"SignalEvent-_ownedComment.0","$ns":"uml","annotatedElement":"SignalEvent","body":"A SignalEvent represents the receipt of an asynchronous Signal instance."}],"generalization":[{"$type":"Generalization","$id":"SignalEvent-_generalization.0","$ns":"uml","general":"MessageEvent"}],"ownedAttribute":[{"$type":"Property","$id":"SignalEvent-signal","$ns":"uml","name":"signal","type":"Signal","association":"A_signal_signalEvent","ownedComment":[{"$type":"Comment","$id":"SignalEvent-signal-_ownedComment.0","$ns":"uml","annotatedElement":"SignalEvent-signal","body":"The specific Signal that is associated with this SignalEvent."}]}]},{"$type":"Class","$id":"TimeEvent","$ns":"uml","name":"TimeEvent","ownedComment":[{"$type":"Comment","$id":"TimeEvent-_ownedComment.0","$ns":"uml","annotatedElement":"TimeEvent","body":"A TimeEvent is an Event that occurs at a specific point in time."}],"ownedRule":[{"$type":"Constraint","$id":"TimeEvent-when_non_negative","$ns":"uml","name":"when_non_negative","constrainedElement":"TimeEvent","ownedComment":[{"$type":"Comment","$id":"TimeEvent-when_non_negative-_ownedComment.0","$ns":"uml","annotatedElement":"TimeEvent-when_non_negative","body":"The ValueSpecification when must return a non-negative Integer."}],"specification":[{"$type":"OpaqueExpression","$id":"TimeEvent-when_non_negative-_specification","$ns":"uml","language":"OCL","body":"when.integerValue() >= 0"}]}],"generalization":[{"$type":"Generalization","$id":"TimeEvent-_generalization.0","$ns":"uml","general":"Event"}],"ownedAttribute":[{"$type":"Property","$id":"TimeEvent-isRelative","$ns":"uml","name":"isRelative","ownedComment":[{"$type":"Comment","$id":"TimeEvent-isRelative-_ownedComment.0","$ns":"uml","annotatedElement":"TimeEvent-isRelative","body":"Specifies whether the TimeEvent is specified as an absolute or relative time."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"TimeEvent-isRelative-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"TimeEvent-when","$ns":"uml","name":"when","type":"TimeExpression","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_when_timeEvent","ownedComment":[{"$type":"Comment","$id":"TimeEvent-when-_ownedComment.0","$ns":"uml","annotatedElement":"TimeEvent-when","body":"Specifies the time of the TimeEvent."}]}]},{"$type":"Class","$id":"Trigger","$ns":"uml","name":"Trigger","ownedComment":[{"$type":"Comment","$id":"Trigger-_ownedComment.0","$ns":"uml","annotatedElement":"Trigger","body":"A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred."}],"ownedRule":[{"$type":"Constraint","$id":"Trigger-trigger_with_ports","$ns":"uml","name":"trigger_with_ports","constrainedElement":"Trigger","ownedComment":[{"$type":"Comment","$id":"Trigger-trigger_with_ports-_ownedComment.0","$ns":"uml","annotatedElement":"Trigger-trigger_with_ports","body":"If a Trigger specifies one or more ports, the event of the Trigger must be a MessageEvent."}],"specification":[{"$type":"OpaqueExpression","$id":"Trigger-trigger_with_ports-_specification","$ns":"uml","language":"OCL","body":"port->notEmpty() implies event.oclIsKindOf(MessageEvent)"}]}],"generalization":[{"$type":"Generalization","$id":"Trigger-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"Trigger-event","$ns":"uml","name":"event","type":"Event","association":"A_event_trigger","ownedComment":[{"$type":"Comment","$id":"Trigger-event-_ownedComment.0","$ns":"uml","annotatedElement":"Trigger-event","body":"The Event that detected by the Trigger."}]},{"$type":"Property","$id":"Trigger-port","$ns":"uml","name":"port","type":"Port","association":"A_port_trigger","ownedComment":[{"$type":"Comment","$id":"Trigger-port-_ownedComment.0","$ns":"uml","annotatedElement":"Trigger-port","body":"A optional Port of through which the given effect is detected."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Trigger-port-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Trigger-port-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_event_trigger","$ns":"uml","name":"A_event_trigger","memberEnd":"Trigger-event A_event_trigger-trigger","ownedEnd":[{"$type":"Property","$id":"A_event_trigger-trigger","$ns":"uml","name":"trigger","type":"Trigger","association":"A_event_trigger","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_event_trigger-trigger-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_event_trigger-trigger-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_port_trigger","$ns":"uml","name":"A_port_trigger","memberEnd":"Trigger-port A_port_trigger-trigger","ownedEnd":[{"$type":"Property","$id":"A_port_trigger-trigger","$ns":"uml","name":"trigger","type":"Trigger","association":"A_port_trigger","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_port_trigger-trigger-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_port_trigger-trigger-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_when_timeEvent","$ns":"uml","name":"A_when_timeEvent","memberEnd":"TimeEvent-when A_when_timeEvent-timeEvent","ownedEnd":[{"$type":"Property","$id":"A_when_timeEvent-timeEvent","$ns":"uml","name":"timeEvent","type":"TimeEvent","subsettedProperty":"Element-owner","association":"A_when_timeEvent","lowerValue":[{"$type":"LiteralInteger","$id":"A_when_timeEvent-timeEvent-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_signal_signalEvent","$ns":"uml","name":"A_signal_signalEvent","memberEnd":"SignalEvent-signal A_signal_signalEvent-signalEvent","ownedEnd":[{"$type":"Property","$id":"A_signal_signalEvent-signalEvent","$ns":"uml","name":"signalEvent","type":"SignalEvent","association":"A_signal_signalEvent","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signal_signalEvent-signalEvent-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signal_signalEvent-signalEvent-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_changeExpression_changeEvent","$ns":"uml","name":"A_changeExpression_changeEvent","memberEnd":"ChangeEvent-changeExpression A_changeExpression_changeEvent-changeEvent","ownedEnd":[{"$type":"Property","$id":"A_changeExpression_changeEvent-changeEvent","$ns":"uml","name":"changeEvent","type":"ChangeEvent","subsettedProperty":"Element-owner","association":"A_changeExpression_changeEvent","lowerValue":[{"$type":"LiteralInteger","$id":"A_changeExpression_changeEvent-changeEvent-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_operation_callEvent","$ns":"uml","name":"A_operation_callEvent","memberEnd":"CallEvent-operation A_operation_callEvent-callEvent","ownedEnd":[{"$type":"Property","$id":"A_operation_callEvent-callEvent","$ns":"uml","name":"callEvent","type":"CallEvent","association":"A_operation_callEvent","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_operation_callEvent-callEvent-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_operation_callEvent-callEvent-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameterSet_behavior","$ns":"uml","name":"A_ownedParameterSet_behavior","memberEnd":"Behavior-ownedParameterSet A_ownedParameterSet_behavior-behavior","ownedEnd":[{"$type":"Property","$id":"A_ownedParameterSet_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"NamedElement-namespace","association":"A_ownedParameterSet_behavior","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedParameterSet_behavior-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_context_behavior","$ns":"uml","name":"A_context_behavior","memberEnd":"Behavior-context A_context_behavior-behavior","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_context_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement","association":"A_context_behavior","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_context_behavior-behavior-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_context_behavior-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_precondition_behavior","$ns":"uml","name":"A_precondition_behavior","memberEnd":"Behavior-precondition A_precondition_behavior-behavior","ownedEnd":[{"$type":"Property","$id":"A_precondition_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"Constraint-context","association":"A_precondition_behavior","lowerValue":[{"$type":"LiteralInteger","$id":"A_precondition_behavior-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_postcondition_behavior","$ns":"uml","name":"A_postcondition_behavior","memberEnd":"Behavior-postcondition A_postcondition_behavior-behavior","ownedEnd":[{"$type":"Property","$id":"A_postcondition_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"Constraint-context","association":"A_postcondition_behavior","lowerValue":[{"$type":"LiteralInteger","$id":"A_postcondition_behavior-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedBehavior_behavior","$ns":"uml","name":"A_redefinedBehavior_behavior","memberEnd":"Behavior-redefinedBehavior A_redefinedBehavior_behavior-behavior","ownedEnd":[{"$type":"Property","$id":"A_redefinedBehavior_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"A_redefinedClassifier_classifier-classifier","association":"A_redefinedBehavior_behavior","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedBehavior_behavior-behavior-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedBehavior_behavior-behavior-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameter_behavior","$ns":"uml","name":"A_ownedParameter_behavior","memberEnd":"Behavior-ownedParameter A_ownedParameter_behavior-behavior","ownedEnd":[{"$type":"Property","$id":"A_ownedParameter_behavior-behavior","$ns":"uml","name":"behavior","type":"Behavior","subsettedProperty":"NamedElement-namespace","association":"A_ownedParameter_behavior","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedParameter_behavior-behavior-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"Classification","$ns":"uml","name":"Classification","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"CommonStructure"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"Deployments"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"CommonBehavior"}],"packagedElement":[{"$type":"Class","$id":"Substitution","$ns":"uml","name":"Substitution","ownedComment":[{"$type":"Comment","$id":"Substitution-_ownedComment.0","$ns":"uml","annotatedElement":"Substitution","body":"A substitution is a relationship between two classifiers signifying that the substituting classifier complies with the contract specified by the contract classifier. This implies that instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected."}],"generalization":[{"$type":"Generalization","$id":"Substitution-_generalization.0","$ns":"uml","general":"Realization"}],"ownedAttribute":[{"$type":"Property","$id":"Substitution-contract","$ns":"uml","name":"contract","type":"Classifier","subsettedProperty":"Dependency-supplier","association":"A_contract_substitution","ownedComment":[{"$type":"Comment","$id":"Substitution-contract-_ownedComment.0","$ns":"uml","annotatedElement":"Substitution-contract","body":"The contract with which the substituting classifier complies."}]},{"$type":"Property","$id":"Substitution-substitutingClassifier","$ns":"uml","name":"substitutingClassifier","type":"Classifier","subsettedProperty":"Dependency-client Element-owner","association":"A_substitution_substitutingClassifier","ownedComment":[{"$type":"Comment","$id":"Substitution-substitutingClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Substitution-substitutingClassifier","body":"Instances of the substituting classifier are runtime substitutable where instances of the contract classifier are expected."}]}]},{"$type":"Class","$id":"BehavioralFeature","$ns":"uml","name":"BehavioralFeature","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature","body":"A BehavioralFeature is a feature of a Classifier that specifies an aspect of the behavior of its instances.  A BehavioralFeature is implemented (realized) by a Behavior. A BehavioralFeature specifies that a Classifier will respond to a designated request by invoking its implementing method."}],"ownedRule":[{"$type":"Constraint","$id":"BehavioralFeature-abstract_no_method","$ns":"uml","name":"abstract_no_method","constrainedElement":"BehavioralFeature","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-abstract_no_method-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-abstract_no_method","body":"When isAbstract is true there are no methods."}],"specification":[{"$type":"OpaqueExpression","$id":"BehavioralFeature-abstract_no_method-_specification","$ns":"uml","language":"OCL","body":"isAbstract implies method->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"BehavioralFeature-_generalization.0","$ns":"uml","general":"Feature"},{"$type":"Generalization","$id":"BehavioralFeature-_generalization.1","$ns":"uml","general":"Namespace"}],"ownedAttribute":[{"$type":"Property","$id":"BehavioralFeature-concurrency","$ns":"uml","name":"concurrency","type":"CallConcurrencyKind","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-concurrency-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-concurrency","body":"Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures."}],"defaultValue":[{"$type":"InstanceValue","$id":"BehavioralFeature-concurrency-_defaultValue","$ns":"uml","type":"CallConcurrencyKind","instance":"CallConcurrencyKind-sequential"}]},{"$type":"Property","$id":"BehavioralFeature-isAbstract","$ns":"uml","name":"isAbstract","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-isAbstract-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-isAbstract","body":"If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"BehavioralFeature-isAbstract-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioralFeature-method","$ns":"uml","name":"method","type":"Behavior","association":"A_method_specification","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-method-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-method","body":"A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior)."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-method-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-method-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioralFeature-ownedParameter","$ns":"uml","name":"ownedParameter","type":"Parameter","isOrdered":"true","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedParameter_ownerFormalParam","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-ownedParameter-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-ownedParameter","body":"The ordered set of formal Parameters of this BehavioralFeature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-ownedParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-ownedParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioralFeature-ownedParameterSet","$ns":"uml","name":"ownedParameterSet","type":"ParameterSet","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedParameterSet_behavioralFeature","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-ownedParameterSet-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-ownedParameterSet","body":"The ParameterSets owned by this BehavioralFeature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-ownedParameterSet-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-ownedParameterSet-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"BehavioralFeature-raisedException","$ns":"uml","name":"raisedException","type":"Type","association":"A_raisedException_behavioralFeature","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-raisedException-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-raisedException","body":"The Types representing exceptions that may be raised during an invocation of this BehavioralFeature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-raisedException-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-raisedException-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"BehavioralFeature-isDistinguishableFrom","$ns":"uml","name":"isDistinguishableFrom","isQuery":"true","redefinedOperation":"NamedElement-isDistinguishableFrom","bodyCondition":"BehavioralFeature-isDistinguishableFrom-spec","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-isDistinguishableFrom-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-isDistinguishableFrom","body":"The query isDistinguishableFrom() determines whether two BehavioralFeatures may coexist in the same Namespace. It specifies that they must have different signatures."}],"ownedRule":[{"$type":"Constraint","$id":"BehavioralFeature-isDistinguishableFrom-spec","$ns":"uml","name":"spec","constrainedElement":"BehavioralFeature-isDistinguishableFrom","specification":[{"$type":"OpaqueExpression","$id":"BehavioralFeature-isDistinguishableFrom-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((n.oclIsKindOf(BehavioralFeature) and ns.getNamesOfMember(self)->intersection(ns.getNamesOfMember(n))->notEmpty()) implies\n  Set{self}->including(n.oclAsType(BehavioralFeature))->isUnique(ownedParameter->collect(p|\n  Tuple { name=p.name, type=p.type,effect=p.effect,direction=p.direction,isException=p.isException,\n              isStream=p.isStream,isOrdered=p.isOrdered,isUnique=p.isUnique,lower=p.lower, upper=p.upper }))\n  )"}]}],"ownedParameter":[{"$type":"Parameter","$id":"BehavioralFeature-isDistinguishableFrom-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"BehavioralFeature-isDistinguishableFrom-n","$ns":"uml","name":"n","type":"NamedElement"},{"$type":"Parameter","$id":"BehavioralFeature-isDistinguishableFrom-ns","$ns":"uml","name":"ns","type":"Namespace"}]},{"$type":"Operation","$id":"BehavioralFeature-inputParameters","$ns":"uml","name":"inputParameters","isQuery":"true","bodyCondition":"BehavioralFeature-inputParameters-spec","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-inputParameters","body":"The ownedParameters with direction in and inout."}],"ownedRule":[{"$type":"Constraint","$id":"BehavioralFeature-inputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"BehavioralFeature-inputParameters","specification":[{"$type":"OpaqueExpression","$id":"BehavioralFeature-inputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"BehavioralFeature-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-inputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"BehavioralFeature-outputParameters","$ns":"uml","name":"outputParameters","isQuery":"true","bodyCondition":"BehavioralFeature-outputParameters-spec","ownedComment":[{"$type":"Comment","$id":"BehavioralFeature-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"BehavioralFeature-outputParameters","body":"The ownedParameters with direction out, inout, or return."}],"ownedRule":[{"$type":"Constraint","$id":"BehavioralFeature-outputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"BehavioralFeature-outputParameters","specification":[{"$type":"OpaqueExpression","$id":"BehavioralFeature-outputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"BehavioralFeature-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"BehavioralFeature-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"BehavioralFeature-outputParameters-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Classifier","$ns":"uml","name":"Classifier","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Classifier-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier","body":"A Classifier represents a classification of instances according to their Features."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-specialize_type","$ns":"uml","name":"specialize_type","constrainedElement":"Classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-specialize_type-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-specialize_type","body":"A Classifier may only specialize Classifiers of a valid type."}],"specification":[{"$type":"OpaqueExpression","$id":"Classifier-specialize_type-_specification","$ns":"uml","language":"OCL","body":"parents()->forAll(c | self.maySpecializeType(c))"}]},{"$type":"Constraint","$id":"Classifier-maps_to_generalization_set","$ns":"uml","name":"maps_to_generalization_set","constrainedElement":"Classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-maps_to_generalization_set-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-maps_to_generalization_set","body":"The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances also be its subclasses."}],"specification":[{"$type":"OpaqueExpression","$id":"Classifier-maps_to_generalization_set-_specification","$ns":"uml","language":"OCL","body":"powertypeExtent->forAll( gs | \r\n  gs.generalization->forAll( gen | \r\n    not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific) \r\n  ))"}]},{"$type":"Constraint","$id":"Classifier-non_final_parents","$ns":"uml","name":"non_final_parents","constrainedElement":"Classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-non_final_parents-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-non_final_parents","body":"The parents of a Classifier must be non-final."}],"specification":[{"$type":"OpaqueExpression","$id":"Classifier-non_final_parents-_specification","$ns":"uml","language":"OCL","body":"parents()->forAll(not isFinalSpecialization)"}]},{"$type":"Constraint","$id":"Classifier-no_cycles_in_generalization","$ns":"uml","name":"no_cycles_in_generalization","constrainedElement":"Classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-no_cycles_in_generalization-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-no_cycles_in_generalization","body":"Generalization hierarchies must be directed and acyclical. A Classifier can not be both a transitively general and transitively specific Classifier of the same Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"Classifier-no_cycles_in_generalization-_specification","$ns":"uml","language":"OCL","body":"not allParents()->includes(self)"}]}],"generalization":[{"$type":"Generalization","$id":"Classifier-_generalization.3","$ns":"uml","general":"Namespace"},{"$type":"Generalization","$id":"Classifier-_generalization.0","$ns":"uml","general":"Type"},{"$type":"Generalization","$id":"Classifier-_generalization.2","$ns":"uml","general":"TemplateableElement"},{"$type":"Generalization","$id":"Classifier-_generalization.1","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Classifier-attribute","$ns":"uml","name":"attribute","type":"Property","isOrdered":"true","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement Classifier-feature","association":"A_attribute_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-attribute-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-attribute","body":"All of the Properties that are direct (i.e., not inherited or imported) attributes of the Classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-attribute-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-attribute-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-collaborationUse","$ns":"uml","name":"collaborationUse","type":"CollaborationUse","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_collaborationUse_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-collaborationUse-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-collaborationUse","body":"The CollaborationUses owned by the Classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-collaborationUse-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-collaborationUse-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-feature","$ns":"uml","name":"feature","type":"Feature","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Namespace-member","association":"A_feature_featuringClassifier","ownedComment":[{"$type":"Comment","$id":"Classifier-feature-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-feature","body":"Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-feature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-feature-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-general","$ns":"uml","name":"general","type":"Classifier","isDerived":"true","association":"A_general_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-general-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-general","body":"The generalizing Classifiers for this Classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-general-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-general-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-generalization","$ns":"uml","name":"generalization","type":"Generalization","aggregation":"composite","subsettedProperty":"A_source_directedRelationship-directedRelationship Element-ownedElement","association":"A_generalization_specific","ownedComment":[{"$type":"Comment","$id":"Classifier-generalization-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-generalization","body":"The Generalization relationships for this Classifier. These Generalizations navigate to more general Classifiers in the generalization hierarchy."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-generalization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-generalization-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-inheritedMember","$ns":"uml","name":"inheritedMember","type":"NamedElement","isReadOnly":"true","isDerived":"true","subsettedProperty":"Namespace-member","association":"A_inheritedMember_inheritingClassifier","ownedComment":[{"$type":"Comment","$id":"Classifier-inheritedMember-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-inheritedMember","body":"All elements inherited by this Classifier from its general Classifiers."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-inheritedMember-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-inheritedMember-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-isAbstract","$ns":"uml","name":"isAbstract","ownedComment":[{"$type":"Comment","$id":"Classifier-isAbstract-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-isAbstract","body":"If true, the Classifier can only be instantiated by instantiating one of its specializations. An abstract Classifier is intended to be used by other Classifiers e.g., as the target of Associations or Generalizations."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Classifier-isAbstract-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-isFinalSpecialization","$ns":"uml","name":"isFinalSpecialization","ownedComment":[{"$type":"Comment","$id":"Classifier-isFinalSpecialization-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-isFinalSpecialization","body":"If true, the Classifier cannot be specialized."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Classifier-isFinalSpecialization-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-ownedTemplateSignature","$ns":"uml","name":"ownedTemplateSignature","type":"RedefinableTemplateSignature","aggregation":"composite","redefinedProperty":"TemplateableElement-ownedTemplateSignature","subsettedProperty":"A_redefinitionContext_redefinableElement-redefinableElement","association":"A_ownedTemplateSignature_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-ownedTemplateSignature-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-ownedTemplateSignature","body":"The optional RedefinableTemplateSignature specifying the formal template parameters."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-ownedTemplateSignature-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-ownedUseCase","$ns":"uml","name":"ownedUseCase","type":"UseCase","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_ownedUseCase_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-ownedUseCase-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-ownedUseCase","body":"The UseCases owned by this classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-ownedUseCase-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-ownedUseCase-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-powertypeExtent","$ns":"uml","name":"powertypeExtent","type":"GeneralizationSet","association":"A_powertypeExtent_powertype","ownedComment":[{"$type":"Comment","$id":"Classifier-powertypeExtent-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-powertypeExtent","body":"The GeneralizationSet of which this Classifier is a power type."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-powertypeExtent-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-powertypeExtent-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-redefinedClassifier","$ns":"uml","name":"redefinedClassifier","type":"Classifier","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedClassifier_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-redefinedClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-redefinedClassifier","body":"The Classifiers redefined by this Classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-redefinedClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-redefinedClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-representation","$ns":"uml","name":"representation","type":"CollaborationUse","subsettedProperty":"Classifier-collaborationUse","association":"A_representation_classifier","ownedComment":[{"$type":"Comment","$id":"Classifier-representation-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-representation","body":"A CollaborationUse which indicates the Collaboration that represents this Classifier."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-representation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-substitution","$ns":"uml","name":"substitution","type":"Substitution","aggregation":"composite","subsettedProperty":"Element-ownedElement NamedElement-clientDependency","association":"A_substitution_substitutingClassifier","ownedComment":[{"$type":"Comment","$id":"Classifier-substitution-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-substitution","body":"The Substitutions owned by this Classifier."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-substitution-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-substitution-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-templateParameter","$ns":"uml","name":"templateParameter","type":"ClassifierTemplateParameter","redefinedProperty":"ParameterableElement-templateParameter","association":"A_classifier_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"Classifier-templateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-templateParameter","body":"TheClassifierTemplateParameter that exposes this element as a formal parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-templateParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Classifier-useCase","$ns":"uml","name":"useCase","type":"UseCase","association":"A_subject_useCase","ownedComment":[{"$type":"Comment","$id":"Classifier-useCase-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-useCase","body":"The set of UseCases for which this Classifier is the subject."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-useCase-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-useCase-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Classifier-allFeatures","$ns":"uml","name":"allFeatures","isQuery":"true","bodyCondition":"Classifier-allFeatures-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allFeatures-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allFeatures","body":"The query allFeatures() gives all of the Features in the namespace of the Classifier. In general, through mechanisms such as inheritance, this will be a larger set than feature."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allFeatures-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allFeatures","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allFeatures-spec-_specification","$ns":"uml","language":"OCL","body":"result = (member->select(oclIsKindOf(Feature))->collect(oclAsType(Feature))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allFeatures-result","$ns":"uml","name":"result","type":"Feature","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allFeatures-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allFeatures-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-allParents","$ns":"uml","name":"allParents","isQuery":"true","bodyCondition":"Classifier-allParents-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allParents-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allParents","body":"The query allParents() gives all of the direct and indirect ancestors of a generalized Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allParents-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allParents","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allParents-spec-_specification","$ns":"uml","language":"OCL","body":"result = (parents()->union(parents()->collect(allParents())->asSet()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allParents-result","$ns":"uml","name":"result","type":"Classifier","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allParents-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allParents-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-conformsTo","$ns":"uml","name":"conformsTo","isQuery":"true","redefinedOperation":"Type-conformsTo","bodyCondition":"Classifier-conformsTo-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-conformsTo-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-conformsTo","body":"The query conformsTo() gives true for a Classifier that defines a type that conforms to another. This is used, for example, in the specification of signature conformance for operations."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-conformsTo-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-conformsTo","specification":[{"$type":"OpaqueExpression","$id":"Classifier-conformsTo-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if other.oclIsKindOf(Classifier) then\r\n  let otherClassifier : Classifier = other.oclAsType(Classifier) in\r\n    self = otherClassifier or allParents()->includes(otherClassifier)\r\nelse\r\n  false\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-conformsTo-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Classifier-conformsTo-other","$ns":"uml","name":"other","type":"Type"}]},{"$type":"Operation","$id":"Classifier-general.1","$ns":"uml","name":"general","isQuery":"true","bodyCondition":"Classifier-general.1-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-general.1-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-general.1","body":"The general Classifiers are the ones referenced by the Generalization relationships."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-general.1-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-general.1 Classifier-general","specification":[{"$type":"OpaqueExpression","$id":"Classifier-general.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (parents())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-general.1-result","$ns":"uml","name":"result","type":"Classifier","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-general.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-general.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-hasVisibilityOf","$ns":"uml","name":"hasVisibilityOf","isQuery":"true","precondition":"Classifier-hasVisibilityOf-pre","bodyCondition":"Classifier-hasVisibilityOf-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-hasVisibilityOf-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-hasVisibilityOf","body":"The query hasVisibilityOf() determines whether a NamedElement is visible in the classifier. Non-private members are visible. It is only called when the argument is something owned by a parent."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-hasVisibilityOf-pre","$ns":"uml","name":"pre","constrainedElement":"Classifier-hasVisibilityOf","specification":[{"$type":"OpaqueExpression","$id":"Classifier-hasVisibilityOf-pre-_specification","$ns":"uml","language":"OCL","body":"allParents()->including(self)->collect(member)->includes(n)"}]},{"$type":"Constraint","$id":"Classifier-hasVisibilityOf-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-hasVisibilityOf","specification":[{"$type":"OpaqueExpression","$id":"Classifier-hasVisibilityOf-spec-_specification","$ns":"uml","language":"OCL","body":"result = (n.visibility <> VisibilityKind::private)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-hasVisibilityOf-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Classifier-hasVisibilityOf-n","$ns":"uml","name":"n","type":"NamedElement"}]},{"$type":"Operation","$id":"Classifier-inherit","$ns":"uml","name":"inherit","isQuery":"true","bodyCondition":"Classifier-inherit-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-inherit-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-inherit","body":"The query inherit() defines how to inherit a set of elements passed as its argument.  It excludes redefined elements from the result."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-inherit-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-inherit","specification":[{"$type":"OpaqueExpression","$id":"Classifier-inherit-spec-_specification","$ns":"uml","language":"OCL","body":"result = (inhs->reject(inh |\r\n  inh.oclIsKindOf(RedefinableElement) and\r\n  ownedMember->select(oclIsKindOf(RedefinableElement))->\r\n    select(redefinedElement->includes(inh.oclAsType(RedefinableElement)))\r\n       ->notEmpty()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-inherit-result","$ns":"uml","name":"result","type":"NamedElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-inherit-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-inherit-result-_lowerValue","$ns":"uml"}]},{"$type":"Parameter","$id":"Classifier-inherit-inhs","$ns":"uml","name":"inhs","type":"NamedElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-inherit-inhs-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-inherit-inhs-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-inheritableMembers","$ns":"uml","name":"inheritableMembers","isQuery":"true","precondition":"Classifier-inheritableMembers-pre","bodyCondition":"Classifier-inheritableMembers-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-inheritableMembers-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-inheritableMembers","body":"The query inheritableMembers() gives all of the members of a Classifier that may be inherited in one of its descendants, subject to whatever visibility restrictions apply."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-inheritableMembers-pre","$ns":"uml","name":"pre","constrainedElement":"Classifier-inheritableMembers","specification":[{"$type":"OpaqueExpression","$id":"Classifier-inheritableMembers-pre-_specification","$ns":"uml","language":"OCL","body":"c.allParents()->includes(self)"}]},{"$type":"Constraint","$id":"Classifier-inheritableMembers-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-inheritableMembers","specification":[{"$type":"OpaqueExpression","$id":"Classifier-inheritableMembers-spec-_specification","$ns":"uml","language":"OCL","body":"result = (member->select(m | c.hasVisibilityOf(m)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-inheritableMembers-result","$ns":"uml","name":"result","type":"NamedElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-inheritableMembers-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-inheritableMembers-result-_lowerValue","$ns":"uml"}]},{"$type":"Parameter","$id":"Classifier-inheritableMembers-c","$ns":"uml","name":"c","type":"Classifier"}]},{"$type":"Operation","$id":"Classifier-inheritedMember.1","$ns":"uml","name":"inheritedMember","isQuery":"true","bodyCondition":"Classifier-inheritedMember.1-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-inheritedMember.1-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-inheritedMember.1","body":"The inheritedMember association is derived by inheriting the inheritable members of the parents."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-inheritedMember.1-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-inheritedMember.1 Classifier-inheritedMember","specification":[{"$type":"OpaqueExpression","$id":"Classifier-inheritedMember.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (inherit(parents()->collect(inheritableMembers(self))->asSet()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-inheritedMember.1-result","$ns":"uml","name":"result","type":"NamedElement","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-inheritedMember.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-inheritedMember.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-isTemplate","$ns":"uml","name":"isTemplate","isQuery":"true","redefinedOperation":"TemplateableElement-isTemplate","bodyCondition":"Classifier-isTemplate-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-isTemplate-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-isTemplate","body":"The query isTemplate() returns whether this Classifier is actually a template."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-isTemplate-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-isTemplate","specification":[{"$type":"OpaqueExpression","$id":"Classifier-isTemplate-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedTemplateSignature <> null or general->exists(g | g.isTemplate()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-isTemplate-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Classifier-maySpecializeType","$ns":"uml","name":"maySpecializeType","isQuery":"true","bodyCondition":"Classifier-maySpecializeType-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-maySpecializeType-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-maySpecializeType","body":"The query maySpecializeType() determines whether this classifier may have a generalization relationship to classifiers of the specified type. By default a classifier may specialize classifiers of the same or a more general type. It is intended to be redefined by classifiers that have different specialization constraints."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-maySpecializeType-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-maySpecializeType","specification":[{"$type":"OpaqueExpression","$id":"Classifier-maySpecializeType-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oclIsKindOf(c.oclType()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-maySpecializeType-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Classifier-maySpecializeType-c","$ns":"uml","name":"c","type":"Classifier"}]},{"$type":"Operation","$id":"Classifier-parents","$ns":"uml","name":"parents","isQuery":"true","bodyCondition":"Classifier-parents-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-parents-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-parents","body":"The query parents() gives all of the immediate ancestors of a generalized Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-parents-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-parents","specification":[{"$type":"OpaqueExpression","$id":"Classifier-parents-spec-_specification","$ns":"uml","language":"OCL","body":"result = (generalization.general->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-parents-result","$ns":"uml","name":"result","type":"Classifier","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-parents-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-parents-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-directlyRealizedInterfaces","$ns":"uml","name":"directlyRealizedInterfaces","isQuery":"true","bodyCondition":"Classifier-directlyRealizedInterfaces-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-directlyRealizedInterfaces-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-directlyRealizedInterfaces","body":"The Interfaces directly realized by this Classifier"}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-directlyRealizedInterfaces-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-directlyRealizedInterfaces","specification":[{"$type":"OpaqueExpression","$id":"Classifier-directlyRealizedInterfaces-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((clientDependency->\r\n  select(oclIsKindOf(Realization) and supplier->forAll(oclIsKindOf(Interface))))->\r\n      collect(supplier.oclAsType(Interface))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-directlyRealizedInterfaces-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-directlyRealizedInterfaces-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-directlyRealizedInterfaces-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-directlyUsedInterfaces","$ns":"uml","name":"directlyUsedInterfaces","isQuery":"true","bodyCondition":"Classifier-directlyUsedInterfaces-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-directlyUsedInterfaces-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-directlyUsedInterfaces","body":"The Interfaces directly used by this Classifier"}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-directlyUsedInterfaces-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-directlyUsedInterfaces","specification":[{"$type":"OpaqueExpression","$id":"Classifier-directlyUsedInterfaces-spec-_specification","$ns":"uml","language":"OCL","body":"result = ((supplierDependency->\r\n  select(oclIsKindOf(Usage) and client->forAll(oclIsKindOf(Interface))))->\r\n    collect(client.oclAsType(Interface))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-directlyUsedInterfaces-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-directlyUsedInterfaces-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-directlyUsedInterfaces-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-allRealizedInterfaces","$ns":"uml","name":"allRealizedInterfaces","isQuery":"true","bodyCondition":"Classifier-allRealizedInterfaces-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allRealizedInterfaces-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allRealizedInterfaces","body":"The Interfaces realized by this Classifier and all of its generalizations"}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allRealizedInterfaces-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allRealizedInterfaces","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allRealizedInterfaces-spec-_specification","$ns":"uml","language":"OCL","body":"result = (directlyRealizedInterfaces()->union(self.allParents()->collect(directlyRealizedInterfaces()))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allRealizedInterfaces-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allRealizedInterfaces-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allRealizedInterfaces-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-allUsedInterfaces","$ns":"uml","name":"allUsedInterfaces","isQuery":"true","bodyCondition":"Classifier-allUsedInterfaces-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allUsedInterfaces-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allUsedInterfaces","body":"The Interfaces used by this Classifier and all of its generalizations"}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allUsedInterfaces-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allUsedInterfaces","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allUsedInterfaces-spec-_specification","$ns":"uml","language":"OCL","body":"result = (directlyUsedInterfaces()->union(self.allParents()->collect(directlyUsedInterfaces()))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allUsedInterfaces-result","$ns":"uml","name":"result","type":"Interface","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allUsedInterfaces-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allUsedInterfaces-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-isSubstitutableFor","$ns":"uml","name":"isSubstitutableFor","isQuery":"true","bodyCondition":"Classifier-isSubstitutableFor-spec","ownedRule":[{"$type":"Constraint","$id":"Classifier-isSubstitutableFor-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-isSubstitutableFor","specification":[{"$type":"OpaqueExpression","$id":"Classifier-isSubstitutableFor-spec-_specification","$ns":"uml","language":"OCL","body":"result = (substitution.contract->includes(contract))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-isSubstitutableFor-contract","$ns":"uml","name":"contract","type":"Classifier"},{"$type":"Parameter","$id":"Classifier-isSubstitutableFor-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Classifier-allAttributes","$ns":"uml","name":"allAttributes","isQuery":"true","bodyCondition":"Classifier-allAttributes-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allAttributes-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allAttributes","body":"The query allAttributes gives an ordered set of all owned and inherited attributes of the Classifier. All owned attributes appear before any inherited attributes, and the attributes inherited from any more specific parent Classifier appear before those of any more general parent Classifier. However, if the Classifier has multiple immediate parents, then the relative ordering of the sets of attributes from those parents is not defined."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allAttributes-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allAttributes","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allAttributes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (attribute->asSequence()->union(parents()->asSequence().allAttributes())->select(p | member->includes(p))->asOrderedSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allAttributes-result","$ns":"uml","name":"result","type":"Property","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allAttributes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allAttributes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Classifier-allSlottableFeatures","$ns":"uml","name":"allSlottableFeatures","isQuery":"true","bodyCondition":"Classifier-allSlottableFeatures-spec","ownedComment":[{"$type":"Comment","$id":"Classifier-allSlottableFeatures-_ownedComment.0","$ns":"uml","annotatedElement":"Classifier-allSlottableFeatures","body":"All StructuralFeatures related to the Classifier that may have Slots, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures."}],"ownedRule":[{"$type":"Constraint","$id":"Classifier-allSlottableFeatures-spec","$ns":"uml","name":"spec","constrainedElement":"Classifier-allSlottableFeatures","specification":[{"$type":"OpaqueExpression","$id":"Classifier-allSlottableFeatures-spec-_specification","$ns":"uml","language":"OCL","body":"result = (member->select(oclIsKindOf(StructuralFeature))->\r\n  collect(oclAsType(StructuralFeature))->\r\n   union(self.inherit(self.allParents()->collect(p | p.attribute)->asSet())->\r\n     collect(oclAsType(StructuralFeature)))->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Classifier-allSlottableFeatures-result","$ns":"uml","name":"result","type":"StructuralFeature","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Classifier-allSlottableFeatures-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Classifier-allSlottableFeatures-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ClassifierTemplateParameter","$ns":"uml","name":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter","body":"A ClassifierTemplateParameter exposes a Classifier as a formal template parameter."}],"ownedRule":[{"$type":"Constraint","$id":"ClassifierTemplateParameter-has_constraining_classifier","$ns":"uml","name":"has_constraining_classifier","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-has_constraining_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-has_constraining_classifier","body":"If allowSubstitutable is true, then there must be a constrainingClassifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-has_constraining_classifier-_specification","$ns":"uml","language":"OCL","body":"allowSubstitutable implies constrainingClassifier->notEmpty()"}]},{"$type":"Constraint","$id":"ClassifierTemplateParameter-parametered_element_no_features","$ns":"uml","name":"parametered_element_no_features","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-parametered_element_no_features-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-parametered_element_no_features","body":"The parameteredElement has no direct features, and if constrainedElement is empty it has no generalizations."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-parametered_element_no_features-_specification","$ns":"uml","language":"OCL","body":"parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())"}]},{"$type":"Constraint","$id":"ClassifierTemplateParameter-matching_abstract","$ns":"uml","name":"matching_abstract","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-matching_abstract-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-matching_abstract","body":"If the parameteredElement is not abstract, then the Classifier used as an argument shall not be abstract."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-matching_abstract-_specification","$ns":"uml","language":"OCL","body":"(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)"}]},{"$type":"Constraint","$id":"ClassifierTemplateParameter-actual_is_classifier","$ns":"uml","name":"actual_is_classifier","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-actual_is_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-actual_is_classifier","body":"The argument to a ClassifierTemplateParameter is a Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-actual_is_classifier-_specification","$ns":"uml","language":"OCL","body":" templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))"}]},{"$type":"Constraint","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_args","$ns":"uml","name":"constraining_classifiers_constrain_args","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_args-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-constraining_classifiers_constrain_args","body":"If there are any constrainingClassifiers, then every argument must be the same as or a specialization of them, or if allowSubstitutable is true, then it can also be substitutable."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_args-_specification","$ns":"uml","language":"OCL","body":"templateParameterSubstitution.actual->forAll( a |\r\n  let arg : Classifier = a.oclAsType(Classifier) in\r\n    constrainingClassifier->forAll(\r\n      cc |  \r\n         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))\r\n      )\r\n)"}]},{"$type":"Constraint","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_parametered_element","$ns":"uml","name":"constraining_classifiers_constrain_parametered_element","constrainedElement":"ClassifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_parametered_element-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-constraining_classifiers_constrain_parametered_element","body":"If there are any constrainingClassifiers, then the parameteredElement must be the same as or a specialization of them, or if allowSubstitutable is true, then it can also be substitutable."}],"specification":[{"$type":"OpaqueExpression","$id":"ClassifierTemplateParameter-constraining_classifiers_constrain_parametered_element-_specification","$ns":"uml","language":"OCL","body":"constrainingClassifier->forAll(\r\n     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))\r\n)\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"ClassifierTemplateParameter-_generalization.0","$ns":"uml","general":"TemplateParameter"}],"ownedAttribute":[{"$type":"Property","$id":"ClassifierTemplateParameter-allowSubstitutable","$ns":"uml","name":"allowSubstitutable","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-allowSubstitutable-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-allowSubstitutable","body":"Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ClassifierTemplateParameter-allowSubstitutable-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"ClassifierTemplateParameter-constrainingClassifier","$ns":"uml","name":"constrainingClassifier","type":"Classifier","association":"A_constrainingClassifier_classifierTemplateParameter","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-constrainingClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-constrainingClassifier","body":"The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ClassifierTemplateParameter-constrainingClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ClassifierTemplateParameter-constrainingClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ClassifierTemplateParameter-parameteredElement","$ns":"uml","name":"parameteredElement","type":"Classifier","redefinedProperty":"TemplateParameter-parameteredElement","association":"A_classifier_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"ClassifierTemplateParameter-parameteredElement-_ownedComment.0","$ns":"uml","annotatedElement":"ClassifierTemplateParameter-parameteredElement","body":"The Classifier exposed by this ClassifierTemplateParameter."}]}]},{"$type":"Class","$id":"Feature","$ns":"uml","name":"Feature","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Feature-_ownedComment.0","$ns":"uml","annotatedElement":"Feature","body":"A Feature declares a behavioral or structural characteristic of Classifiers."}],"generalization":[{"$type":"Generalization","$id":"Feature-_generalization.0","$ns":"uml","general":"RedefinableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Feature-featuringClassifier","$ns":"uml","name":"featuringClassifier","type":"Classifier","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"A_member_memberNamespace-memberNamespace","association":"A_feature_featuringClassifier","ownedComment":[{"$type":"Comment","$id":"Feature-featuringClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"Feature-featuringClassifier","body":"The Classifiers that have this Feature as a feature."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Feature-featuringClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Feature-isStatic","$ns":"uml","name":"isStatic","ownedComment":[{"$type":"Comment","$id":"Feature-isStatic-_ownedComment.0","$ns":"uml","annotatedElement":"Feature-isStatic","body":"Specifies whether this Feature characterizes individual instances classified by the Classifier (false) or the Classifier itself (true)."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Feature-isStatic-_defaultValue","$ns":"uml"}]}]},{"$type":"Class","$id":"Generalization","$ns":"uml","name":"Generalization","ownedComment":[{"$type":"Comment","$id":"Generalization-_ownedComment.0","$ns":"uml","annotatedElement":"Generalization","body":"A Generalization is a taxonomic relationship between a more general Classifier and a more specific Classifier. Each instance of the specific Classifier is also an instance of the general Classifier. The specific Classifier inherits the features of the more general Classifier. A Generalization is owned by the specific Classifier."}],"generalization":[{"$type":"Generalization","$id":"Generalization-_generalization.0","$ns":"uml","general":"DirectedRelationship"}],"ownedAttribute":[{"$type":"Property","$id":"Generalization-general","$ns":"uml","name":"general","type":"Classifier","subsettedProperty":"DirectedRelationship-target","association":"A_general_generalization","ownedComment":[{"$type":"Comment","$id":"Generalization-general-_ownedComment.0","$ns":"uml","annotatedElement":"Generalization-general","body":"The general classifier in the Generalization relationship."}]},{"$type":"Property","$id":"Generalization-generalizationSet","$ns":"uml","name":"generalizationSet","type":"GeneralizationSet","association":"A_generalizationSet_generalization","ownedComment":[{"$type":"Comment","$id":"Generalization-generalizationSet-_ownedComment.0","$ns":"uml","annotatedElement":"Generalization-generalizationSet","body":"Represents a set of instances of Generalization.  A Generalization may appear in many GeneralizationSets."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Generalization-generalizationSet-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Generalization-generalizationSet-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Generalization-isSubstitutable","$ns":"uml","name":"isSubstitutable","ownedComment":[{"$type":"Comment","$id":"Generalization-isSubstitutable-_ownedComment.0","$ns":"uml","annotatedElement":"Generalization-isSubstitutable","body":"Indicates whether the specific Classifier can be used wherever the general Classifier can be used. If true, the execution traces of the specific Classifier shall be a superset of the execution traces of the general Classifier. If false, there is no such constraint on execution traces. If unset, the modeler has not stated whether there is such a constraint or not."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Generalization-isSubstitutable-_lowerValue","$ns":"uml"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Generalization-isSubstitutable-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"Generalization-specific","$ns":"uml","name":"specific","type":"Classifier","subsettedProperty":"DirectedRelationship-source Element-owner","association":"A_generalization_specific","ownedComment":[{"$type":"Comment","$id":"Generalization-specific-_ownedComment.0","$ns":"uml","annotatedElement":"Generalization-specific","body":"The specializing Classifier in the Generalization relationship."}]}]},{"$type":"Class","$id":"GeneralizationSet","$ns":"uml","name":"GeneralizationSet","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet","body":"A GeneralizationSet is a PackageableElement whose instances represent sets of Generalization relationships."}],"ownedRule":[{"$type":"Constraint","$id":"GeneralizationSet-generalization_same_classifier","$ns":"uml","name":"generalization_same_classifier","constrainedElement":"GeneralizationSet","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-generalization_same_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-generalization_same_classifier","body":"Every Generalization associated with a particular GeneralizationSet must have the same general Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"GeneralizationSet-generalization_same_classifier-_specification","$ns":"uml","language":"OCL","body":"generalization->collect(general)->asSet()->size() <= 1"}]},{"$type":"Constraint","$id":"GeneralizationSet-maps_to_generalization_set","$ns":"uml","name":"maps_to_generalization_set","constrainedElement":"GeneralizationSet","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-maps_to_generalization_set-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-maps_to_generalization_set","body":"The Classifier that maps to a GeneralizationSet may neither be a specific nor a general Classifier in any of the Generalization relationships defined for that GeneralizationSet. In other words, a power type may not be an instance of itself nor may its instances be its subclasses."}],"specification":[{"$type":"OpaqueExpression","$id":"GeneralizationSet-maps_to_generalization_set-_specification","$ns":"uml","language":"OCL","body":"powertype <> null implies generalization->forAll( gen | \r\n    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)\r\n  )"}]}],"generalization":[{"$type":"Generalization","$id":"GeneralizationSet-_generalization.0","$ns":"uml","general":"PackageableElement"}],"ownedAttribute":[{"$type":"Property","$id":"GeneralizationSet-generalization","$ns":"uml","name":"generalization","type":"Generalization","association":"A_generalizationSet_generalization","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-generalization-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-generalization","body":"Designates the instances of Generalization that are members of this GeneralizationSet."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"GeneralizationSet-generalization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"GeneralizationSet-generalization-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"GeneralizationSet-isCovering","$ns":"uml","name":"isCovering","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-isCovering-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-isCovering","body":"Indicates (via the associated Generalizations) whether or not the set of specific Classifiers are covering for a particular general classifier. When isCovering is true, every instance of a particular general Classifier is also an instance of at least one of its specific Classifiers for the GeneralizationSet. When isCovering is false, there are one or more instances of the particular general Classifier that are not instances of at least one of its specific Classifiers defined for the GeneralizationSet."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"GeneralizationSet-isCovering-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"GeneralizationSet-isDisjoint","$ns":"uml","name":"isDisjoint","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-isDisjoint-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-isDisjoint","body":"Indicates whether or not the set of specific Classifiers in a Generalization relationship have instance in common. If isDisjoint is true, the specific Classifiers for a particular GeneralizationSet have no members in common; that is, their intersection is empty. If isDisjoint is false, the specific Classifiers in a particular GeneralizationSet have one or more members in common; that is, their intersection is not empty."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"GeneralizationSet-isDisjoint-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"GeneralizationSet-powertype","$ns":"uml","name":"powertype","type":"Classifier","association":"A_powertypeExtent_powertype","ownedComment":[{"$type":"Comment","$id":"GeneralizationSet-powertype-_ownedComment.0","$ns":"uml","annotatedElement":"GeneralizationSet-powertype","body":"Designates the Classifier that is defined as the power type for the associated GeneralizationSet, if there is one."}],"lowerValue":[{"$type":"LiteralInteger","$id":"GeneralizationSet-powertype-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InstanceSpecification","$ns":"uml","name":"InstanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification","body":"An InstanceSpecification is a model element that represents an instance in a modeled system. An InstanceSpecification can act as a DeploymentTarget in a Deployment relationship, in the case that it represents an instance of a Node. It can also act as a DeployedArtifact, if it represents an instance of an Artifact."}],"ownedRule":[{"$type":"Constraint","$id":"InstanceSpecification-deployment_artifact","$ns":"uml","name":"deployment_artifact","constrainedElement":"InstanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-deployment_artifact-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-deployment_artifact","body":"An InstanceSpecification can act as a DeployedArtifact if it represents an instance of an Artifact."}],"specification":[{"$type":"OpaqueExpression","$id":"InstanceSpecification-deployment_artifact-_specification","$ns":"uml","language":"OCL","body":"deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))"}]},{"$type":"Constraint","$id":"InstanceSpecification-structural_feature","$ns":"uml","name":"structural_feature","constrainedElement":"InstanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-structural_feature-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-structural_feature","body":"No more than one slot in an InstanceSpecification may have the same definingFeature."}],"specification":[{"$type":"OpaqueExpression","$id":"InstanceSpecification-structural_feature-_specification","$ns":"uml","language":"OCL","body":"classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))"}]},{"$type":"Constraint","$id":"InstanceSpecification-defining_feature","$ns":"uml","name":"defining_feature","constrainedElement":"InstanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-defining_feature-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-defining_feature","body":"The definingFeature of each slot is a StructuralFeature related to a classifier of the InstanceSpecification, including direct attributes, inherited attributes, private attributes in generalizations, and memberEnds of Associations, but excluding redefined StructuralFeatures."}],"specification":[{"$type":"OpaqueExpression","$id":"InstanceSpecification-defining_feature-_specification","$ns":"uml","language":"OCL","body":"slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))"}]},{"$type":"Constraint","$id":"InstanceSpecification-deployment_target","$ns":"uml","name":"deployment_target","constrainedElement":"InstanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-deployment_target-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-deployment_target","body":"An InstanceSpecification can act as a DeploymentTarget if it represents an instance of a Node and functions as a part in the internal structure of an encompassing Node."}],"specification":[{"$type":"OpaqueExpression","$id":"InstanceSpecification-deployment_target-_specification","$ns":"uml","language":"OCL","body":"deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))"}]}],"generalization":[{"$type":"Generalization","$id":"InstanceSpecification-_generalization.2","$ns":"uml","general":"DeploymentTarget"},{"$type":"Generalization","$id":"InstanceSpecification-_generalization.0","$ns":"uml","general":"PackageableElement"},{"$type":"Generalization","$id":"InstanceSpecification-_generalization.1","$ns":"uml","general":"DeployedArtifact"}],"ownedAttribute":[{"$type":"Property","$id":"InstanceSpecification-classifier","$ns":"uml","name":"classifier","type":"Classifier","association":"A_classifier_instanceSpecification","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-classifier","body":"The Classifier or Classifiers of the represented instance. If multiple Classifiers are specified, the instance is classified by all of them."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InstanceSpecification-classifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InstanceSpecification-classifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InstanceSpecification-slot","$ns":"uml","name":"slot","type":"Slot","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_slot_owningInstance","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-slot-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-slot","body":"A Slot giving the value or values of a StructuralFeature of the instance. An InstanceSpecification can have one Slot per StructuralFeature of its Classifiers, including inherited features. It is not necessary to model a Slot for every StructuralFeature, in which case the InstanceSpecification is a partial description."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InstanceSpecification-slot-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InstanceSpecification-slot-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InstanceSpecification-specification","$ns":"uml","name":"specification","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_specification_owningInstanceSpec","ownedComment":[{"$type":"Comment","$id":"InstanceSpecification-specification-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceSpecification-specification","body":"A specification of how to compute, derive, or construct the instance."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InstanceSpecification-specification-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InstanceValue","$ns":"uml","name":"InstanceValue","ownedComment":[{"$type":"Comment","$id":"InstanceValue-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceValue","body":"An InstanceValue is a ValueSpecification that identifies an instance."}],"generalization":[{"$type":"Generalization","$id":"InstanceValue-_generalization.0","$ns":"uml","general":"ValueSpecification"}],"ownedAttribute":[{"$type":"Property","$id":"InstanceValue-instance","$ns":"uml","name":"instance","type":"InstanceSpecification","association":"A_instance_instanceValue","ownedComment":[{"$type":"Comment","$id":"InstanceValue-instance-_ownedComment.0","$ns":"uml","annotatedElement":"InstanceValue-instance","body":"The InstanceSpecification that represents the specified value."}]}]},{"$type":"Class","$id":"Operation","$ns":"uml","name":"Operation","ownedComment":[{"$type":"Comment","$id":"Operation-_ownedComment.0","$ns":"uml","annotatedElement":"Operation","body":"An Operation is a BehavioralFeature of a Classifier that specifies the name, type, parameters, and constraints for invoking an associated Behavior. An Operation may invoke both the execution of method behaviors as well as other behavioral responses. Operation specializes TemplateableElement in order to support specification of template operations and bound operations. Operation specializes ParameterableElement to specify that an operation can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-at_most_one_return","$ns":"uml","name":"at_most_one_return","constrainedElement":"Operation","ownedComment":[{"$type":"Comment","$id":"Operation-at_most_one_return-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-at_most_one_return","body":"An Operation can have at most one return parameter; i.e., an owned parameter with the direction set to 'return.'"}],"specification":[{"$type":"OpaqueExpression","$id":"Operation-at_most_one_return-_specification","$ns":"uml","language":"OCL","body":"self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1"}]},{"$type":"Constraint","$id":"Operation-only_body_for_query","$ns":"uml","name":"only_body_for_query","constrainedElement":"Operation","ownedComment":[{"$type":"Comment","$id":"Operation-only_body_for_query-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-only_body_for_query","body":"A bodyCondition can only be specified for a query Operation."}],"specification":[{"$type":"OpaqueExpression","$id":"Operation-only_body_for_query-_specification","$ns":"uml","language":"OCL","body":"bodyCondition <> null implies isQuery"}]}],"generalization":[{"$type":"Generalization","$id":"Operation-_generalization.2","$ns":"uml","general":"TemplateableElement"},{"$type":"Generalization","$id":"Operation-_generalization.0","$ns":"uml","general":"ParameterableElement"},{"$type":"Generalization","$id":"Operation-_generalization.1","$ns":"uml","general":"BehavioralFeature"}],"ownedAttribute":[{"$type":"Property","$id":"Operation-bodyCondition","$ns":"uml","name":"bodyCondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_bodyCondition_bodyContext","ownedComment":[{"$type":"Comment","$id":"Operation-bodyCondition-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-bodyCondition","body":"An optional Constraint on the result values of an invocation of this Operation."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-bodyCondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-class","$ns":"uml","name":"class","type":"Class","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_ownedOperation_class","ownedComment":[{"$type":"Comment","$id":"Operation-class-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-class","body":"The Class that owns this operation, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-class-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-datatype","$ns":"uml","name":"datatype","type":"DataType","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_ownedOperation_datatype","ownedComment":[{"$type":"Comment","$id":"Operation-datatype-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-datatype","body":"The DataType that owns this Operation, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-datatype-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace RedefinableElement-redefinitionContext","association":"A_ownedOperation_interface","ownedComment":[{"$type":"Comment","$id":"Operation-interface-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-interface","body":"The Interface that owns this Operation, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-interface-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-isOrdered","$ns":"uml","name":"isOrdered","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Operation-isOrdered-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isOrdered","body":"Specifies whether the return parameter is ordered or not, if present.  This information is derived from the return result for this Operation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"Operation-isQuery","$ns":"uml","name":"isQuery","ownedComment":[{"$type":"Comment","$id":"Operation-isQuery-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isQuery","body":"Specifies whether an execution of the BehavioralFeature leaves the state of the system unchanged (isQuery=true) or whether side effects may occur (isQuery=false)."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Operation-isQuery-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-isUnique","$ns":"uml","name":"isUnique","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Operation-isUnique-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isUnique","body":"Specifies whether the return parameter is unique or not, if present. This information is derived from the return result for this Operation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Property","$id":"Operation-lower","$ns":"uml","name":"lower","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Operation-lower-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-lower","body":"Specifies the lower multiplicity of the return parameter, if present. This information is derived from the return result for this Operation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-lower-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-ownedParameter","$ns":"uml","name":"ownedParameter","type":"Parameter","isOrdered":"true","aggregation":"composite","redefinedProperty":"BehavioralFeature-ownedParameter","association":"A_ownedParameter_operation","ownedComment":[{"$type":"Comment","$id":"Operation-ownedParameter-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-ownedParameter","body":"The parameters owned by this Operation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-ownedParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-ownedParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-postcondition","$ns":"uml","name":"postcondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_postcondition_postContext","ownedComment":[{"$type":"Comment","$id":"Operation-postcondition-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-postcondition","body":"An optional set of Constraints specifying the state of the system when the Operation is completed."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-postcondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-postcondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-precondition","$ns":"uml","name":"precondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Namespace-ownedRule","association":"A_precondition_preContext","ownedComment":[{"$type":"Comment","$id":"Operation-precondition-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-precondition","body":"An optional set of Constraints on the state of the system when the Operation is invoked."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-precondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-precondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-raisedException","$ns":"uml","name":"raisedException","type":"Type","redefinedProperty":"BehavioralFeature-raisedException","association":"A_raisedException_operation","ownedComment":[{"$type":"Comment","$id":"Operation-raisedException-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-raisedException","body":"The Types representing exceptions that may be raised during an invocation of this operation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-raisedException-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-raisedException-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-redefinedOperation","$ns":"uml","name":"redefinedOperation","type":"Operation","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedOperation_operation","ownedComment":[{"$type":"Comment","$id":"Operation-redefinedOperation-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-redefinedOperation","body":"The Operations that are redefined by this Operation."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-redefinedOperation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-redefinedOperation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-templateParameter","$ns":"uml","name":"templateParameter","type":"OperationTemplateParameter","redefinedProperty":"ParameterableElement-templateParameter","association":"A_operation_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"Operation-templateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-templateParameter","body":"The OperationTemplateParameter that exposes this element as a formal parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-templateParameter-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-type","$ns":"uml","name":"type","type":"Type","isReadOnly":"true","isDerived":"true","association":"A_type_operation","ownedComment":[{"$type":"Comment","$id":"Operation-type-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-type","body":"The return type of the operation, if present. This information is derived from the return result for this Operation."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-type-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Operation-upper","$ns":"uml","name":"upper","isReadOnly":"true","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Operation-upper-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-upper","body":"The upper multiplicity of the return parameter, if present. This information is derived from the return result for this Operation."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-upper-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Operation-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"Operation-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"Operation-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"Operation-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isConsistentWith","body":"The query isConsistentWith() specifies, for any two Operations in a context in which redefinition is possible, whether redefinition would be consistent. A redefining operation is consistent with a redefined operation if\r\nit has the same number of owned parameters, and for each parameter the following holds:\r\n\r\n- Direction, ordering and uniqueness are the same.\r\n- The corresponding types are covariant, contravariant or invariant.\r\n- The multiplicities are compatible, depending on the parameter direction."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Operation-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (redefiningElement.oclIsKindOf(Operation) and\r\nlet op : Operation = redefiningElement.oclAsType(Operation) in\r\n\tself.ownedParameter->size() = op.ownedParameter->size() and\r\n\tSequence{1..self.ownedParameter->size()}->\r\n\t\tforAll(i |  \r\n\t\t  let redefiningParam : Parameter = op.ownedParameter->at(i),\r\n               redefinedParam : Parameter = self.ownedParameter->at(i) in\r\n                 (redefiningParam.isUnique = redefinedParam.isUnique) and\r\n                 (redefiningParam.isOrdered = redefinedParam. isOrdered) and\r\n                 (redefiningParam.direction = redefinedParam.direction) and\r\n                 (redefiningParam.type.conformsTo(redefinedParam.type) or\r\n                     redefinedParam.type.conformsTo(redefiningParam.type)) and\r\n                 (redefiningParam.direction = ParameterDirectionKind::inout implies\r\n                         (redefinedParam.compatibleWith(redefiningParam) and\r\n                         redefiningParam.compatibleWith(redefinedParam))) and\r\n                 (redefiningParam.direction = ParameterDirectionKind::_'in' implies\r\n                         redefinedParam.compatibleWith(redefiningParam)) and\r\n                 ((redefiningParam.direction = ParameterDirectionKind::out or\r\n                      redefiningParam.direction = ParameterDirectionKind::return) implies\r\n                         redefiningParam.compatibleWith(redefinedParam))\r\n\t\t))"}]},{"$type":"Constraint","$id":"Operation-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"Operation-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Operation-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Operation-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"Operation-isOrdered.1","$ns":"uml","name":"isOrdered","isQuery":"true","bodyCondition":"Operation-isOrdered.1-spec","ownedComment":[{"$type":"Comment","$id":"Operation-isOrdered.1-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isOrdered.1","body":"If this operation has a return parameter, isOrdered equals the value of isOrdered for that parameter. Otherwise isOrdered is false."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-isOrdered.1-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-isOrdered.1 Operation-isOrdered","specification":[{"$type":"OpaqueExpression","$id":"Operation-isOrdered.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if returnResult()->notEmpty() then returnResult()-> exists(isOrdered) else false endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-isOrdered.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Operation-isUnique.1","$ns":"uml","name":"isUnique","isQuery":"true","bodyCondition":"Operation-isUnique.1-spec","ownedComment":[{"$type":"Comment","$id":"Operation-isUnique.1-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-isUnique.1","body":"If this operation has a return parameter, isUnique equals the value of isUnique for that parameter. Otherwise isUnique is true."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-isUnique.1-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-isUnique.1 Operation-isUnique","specification":[{"$type":"OpaqueExpression","$id":"Operation-isUnique.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if returnResult()->notEmpty() then returnResult()->exists(isUnique) else true endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-isUnique.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Operation-lower.1","$ns":"uml","name":"lower","isQuery":"true","bodyCondition":"Operation-lower.1-spec","ownedComment":[{"$type":"Comment","$id":"Operation-lower.1-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-lower.1","body":"If this operation has a return parameter, lower equals the value of lower for that parameter. Otherwise lower has no value."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-lower.1-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-lower.1 Operation-lower","specification":[{"$type":"OpaqueExpression","$id":"Operation-lower.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if returnResult()->notEmpty() then returnResult()->any(true).lower else null endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-lower.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Integer"}]}]},{"$type":"Operation","$id":"Operation-returnResult","$ns":"uml","name":"returnResult","isQuery":"true","bodyCondition":"Operation-returnResult-spec","ownedComment":[{"$type":"Comment","$id":"Operation-returnResult-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-returnResult","body":"The query returnResult() returns the set containing the return parameter of the Operation if one exists, otherwise, it returns an empty set"}],"ownedRule":[{"$type":"Constraint","$id":"Operation-returnResult-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-returnResult","specification":[{"$type":"OpaqueExpression","$id":"Operation-returnResult-spec-_specification","$ns":"uml","language":"OCL","body":"result = (ownedParameter->select (direction = ParameterDirectionKind::return))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-returnResult-result","$ns":"uml","name":"result","type":"Parameter","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Operation-returnResult-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Operation-returnResult-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Operation-type.1","$ns":"uml","name":"type","isQuery":"true","bodyCondition":"Operation-type.1-spec","ownedComment":[{"$type":"Comment","$id":"Operation-type.1-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-type.1","body":"If this operation has a return parameter, type equals the value of type for that parameter. Otherwise type has no value."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-type.1-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-type.1 Operation-type","specification":[{"$type":"OpaqueExpression","$id":"Operation-type.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if returnResult()->notEmpty() then returnResult()->any(true).type else null endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-type.1-result","$ns":"uml","name":"result","type":"Type","direction":"return"}]},{"$type":"Operation","$id":"Operation-upper.1","$ns":"uml","name":"upper","isQuery":"true","bodyCondition":"Operation-upper.1-spec","ownedComment":[{"$type":"Comment","$id":"Operation-upper.1-_ownedComment.0","$ns":"uml","annotatedElement":"Operation-upper.1","body":"If this operation has a return parameter, upper equals the value of upper for that parameter. Otherwise upper has no value."}],"ownedRule":[{"$type":"Constraint","$id":"Operation-upper.1-spec","$ns":"uml","name":"spec","constrainedElement":"Operation-upper.1 Operation-upper","specification":[{"$type":"OpaqueExpression","$id":"Operation-upper.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if returnResult()->notEmpty() then returnResult()->any(true).upper else null endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Operation-upper.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#UnlimitedNatural"}]}]}]},{"$type":"Class","$id":"OperationTemplateParameter","$ns":"uml","name":"OperationTemplateParameter","ownedComment":[{"$type":"Comment","$id":"OperationTemplateParameter-_ownedComment.0","$ns":"uml","annotatedElement":"OperationTemplateParameter","body":"An OperationTemplateParameter exposes an Operation as a formal parameter for a template."}],"ownedRule":[{"$type":"Constraint","$id":"OperationTemplateParameter-match_default_signature","$ns":"uml","name":"match_default_signature","constrainedElement":"OperationTemplateParameter","specification":[{"$type":"OpaqueExpression","$id":"OperationTemplateParameter-match_default_signature-_specification","$ns":"uml","language":"OCL","body":"default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in \r\n    defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and\r\n    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix | \r\n        let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in\r\n          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))","ownedComment":[{"$type":"Comment","$id":"OperationTemplateParameter-match_default_signature-_specification-_ownedComment.0","$ns":"uml","annotatedElement":"OperationTemplateParameter-match_default_signature-_specification","body":"A default for an OperationTemplateParameter must be an Operation with the same Parameter types, directions and multiplicities as the exposed Operation."}]}]}],"generalization":[{"$type":"Generalization","$id":"OperationTemplateParameter-_generalization.0","$ns":"uml","general":"TemplateParameter"}],"ownedAttribute":[{"$type":"Property","$id":"OperationTemplateParameter-parameteredElement","$ns":"uml","name":"parameteredElement","type":"Operation","redefinedProperty":"TemplateParameter-parameteredElement","association":"A_operation_templateParameter_parameteredElement","ownedComment":[{"$type":"Comment","$id":"OperationTemplateParameter-parameteredElement-_ownedComment.0","$ns":"uml","annotatedElement":"OperationTemplateParameter-parameteredElement","body":"The Operation exposed by this OperationTemplateParameter."}]}]},{"$type":"Class","$id":"Parameter","$ns":"uml","name":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter","body":"A Parameter is a specification of an argument used to pass information into or out of an invocation of a BehavioralFeature.  Parameters can be treated as ConnectableElements within Collaborations."}],"ownedRule":[{"$type":"Constraint","$id":"Parameter-in_and_out","$ns":"uml","name":"in_and_out","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-in_and_out-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-in_and_out","body":"Only in and inout Parameters may have a delete effect. Only out, inout, and return Parameters may have a create effect."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-in_and_out-_specification","$ns":"uml","language":"OCL","body":"(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))\r\nand\r\n(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))"}]},{"$type":"Constraint","$id":"Parameter-not_exception","$ns":"uml","name":"not_exception","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-not_exception-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-not_exception","body":"An input Parameter cannot be an exception."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-not_exception-_specification","$ns":"uml","language":"OCL","body":"isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)"}]},{"$type":"Constraint","$id":"Parameter-connector_end","$ns":"uml","name":"connector_end","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-connector_end-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-connector_end","body":"A Parameter may only be associated with a Connector end within the context of a Collaboration."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-connector_end-_specification","$ns":"uml","language":"OCL","body":"end->notEmpty() implies collaboration->notEmpty()"}]},{"$type":"Constraint","$id":"Parameter-reentrant_behaviors","$ns":"uml","name":"reentrant_behaviors","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-reentrant_behaviors-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-reentrant_behaviors","body":"Reentrant behaviors cannot have stream Parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-reentrant_behaviors-_specification","$ns":"uml","language":"OCL","body":"(isStream and behavior <> null) implies not behavior.isReentrant"}]},{"$type":"Constraint","$id":"Parameter-stream_and_exception","$ns":"uml","name":"stream_and_exception","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-stream_and_exception-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-stream_and_exception","body":"A Parameter cannot be a stream and exception at the same time."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-stream_and_exception-_specification","$ns":"uml","language":"OCL","body":"not (isException and isStream)"}]},{"$type":"Constraint","$id":"Parameter-object_effect","$ns":"uml","name":"object_effect","constrainedElement":"Parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-object_effect-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-object_effect","body":"Parameters typed by DataTypes cannot have an effect."}],"specification":[{"$type":"OpaqueExpression","$id":"Parameter-object_effect-_specification","$ns":"uml","language":"OCL","body":"(type.oclIsKindOf(DataType)) implies (effect = null)"}]}],"generalization":[{"$type":"Generalization","$id":"Parameter-_generalization.0","$ns":"uml","general":"MultiplicityElement"},{"$type":"Generalization","$id":"Parameter-_generalization.1","$ns":"uml","general":"ConnectableElement"}],"ownedAttribute":[{"$type":"Property","$id":"Parameter-default","$ns":"uml","name":"default","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Parameter-default-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-default","body":"A String that represents a value to be used when no argument is supplied for the Parameter."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-default-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-defaultValue","$ns":"uml","name":"defaultValue","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_defaultValue_owningParameter","ownedComment":[{"$type":"Comment","$id":"Parameter-defaultValue-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-defaultValue","body":"Specifies a ValueSpecification that represents a value to be used when no argument is supplied for the Parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-defaultValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-direction","$ns":"uml","name":"direction","type":"ParameterDirectionKind","ownedComment":[{"$type":"Comment","$id":"Parameter-direction-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-direction","body":"Indicates whether a parameter is being sent into or out of a behavioral element."}],"defaultValue":[{"$type":"InstanceValue","$id":"Parameter-direction-_defaultValue","$ns":"uml","type":"ParameterDirectionKind","instance":"ParameterDirectionKind-in"}]},{"$type":"Property","$id":"Parameter-effect","$ns":"uml","name":"effect","type":"ParameterEffectKind","ownedComment":[{"$type":"Comment","$id":"Parameter-effect-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-effect","body":"Specifies the effect that executions of the owner of the Parameter have on objects passed in or out of the parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-effect-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-isException","$ns":"uml","name":"isException","ownedComment":[{"$type":"Comment","$id":"Parameter-isException-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-isException","body":"Tells whether an output parameter may emit a value to the exclusion of the other outputs."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Parameter-isException-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-isStream","$ns":"uml","name":"isStream","ownedComment":[{"$type":"Comment","$id":"Parameter-isStream-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-isStream","body":"Tells whether an input parameter may accept values while its behavior is executing, or whether an output parameter may post values while the behavior is executing."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Parameter-isStream-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-operation","$ns":"uml","name":"operation","type":"Operation","subsettedProperty":"A_ownedParameter_ownerFormalParam-ownerFormalParam","association":"A_ownedParameter_operation","ownedComment":[{"$type":"Comment","$id":"Parameter-operation-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-operation","body":"The Operation owning this parameter."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-operation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Parameter-parameterSet","$ns":"uml","name":"parameterSet","type":"ParameterSet","association":"A_parameterSet_parameter","ownedComment":[{"$type":"Comment","$id":"Parameter-parameterSet-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-parameterSet","body":"The ParameterSets containing the parameter. See ParameterSet."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Parameter-parameterSet-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-parameterSet-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Parameter-default.1","$ns":"uml","name":"default","isQuery":"true","bodyCondition":"Parameter-default.1-spec","ownedComment":[{"$type":"Comment","$id":"Parameter-default.1-_ownedComment.0","$ns":"uml","annotatedElement":"Parameter-default.1","body":"Derivation for Parameter::/default"}],"ownedRule":[{"$type":"Constraint","$id":"Parameter-default.1-spec","$ns":"uml","name":"spec","constrainedElement":"Parameter-default.1 Parameter-default","specification":[{"$type":"OpaqueExpression","$id":"Parameter-default.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if self.type = String then defaultValue.stringValue() else null endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Parameter-default.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Parameter-default.1-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ParameterSet","$ns":"uml","name":"ParameterSet","ownedComment":[{"$type":"Comment","$id":"ParameterSet-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet","body":"A ParameterSet designates alternative sets of inputs or outputs that a Behavior may use."}],"ownedRule":[{"$type":"Constraint","$id":"ParameterSet-same_parameterized_entity","$ns":"uml","name":"same_parameterized_entity","constrainedElement":"ParameterSet","ownedComment":[{"$type":"Comment","$id":"ParameterSet-same_parameterized_entity-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet-same_parameterized_entity","body":"The Parameters in a ParameterSet must all be inputs or all be outputs of the same parameterized entity, and the ParameterSet is owned by that entity."}],"specification":[{"$type":"OpaqueExpression","$id":"ParameterSet-same_parameterized_entity-_specification","$ns":"uml","language":"OCL","body":"parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)"}]},{"$type":"Constraint","$id":"ParameterSet-input","$ns":"uml","name":"input","constrainedElement":"ParameterSet","ownedComment":[{"$type":"Comment","$id":"ParameterSet-input-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet-input","body":"If a parameterized entity has input Parameters that are in a ParameterSet, then any inputs that are not in a ParameterSet must be streaming. Same for output Parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"ParameterSet-input-_specification","$ns":"uml","language":"OCL","body":"((parameter->exists(direction = ParameterDirectionKind::_'in')) implies \r\n    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))\r\n    and\r\n((parameter->exists(direction = ParameterDirectionKind::out)) implies \r\n    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))  \r\n"}]},{"$type":"Constraint","$id":"ParameterSet-two_parameter_sets","$ns":"uml","name":"two_parameter_sets","constrainedElement":"ParameterSet","ownedComment":[{"$type":"Comment","$id":"ParameterSet-two_parameter_sets-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet-two_parameter_sets","body":"Two ParameterSets cannot have exactly the same set of Parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"ParameterSet-two_parameter_sets-_specification","$ns":"uml","language":"OCL","body":"parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))"}]}],"generalization":[{"$type":"Generalization","$id":"ParameterSet-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"ParameterSet-condition","$ns":"uml","name":"condition","type":"Constraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_condition_parameterSet","ownedComment":[{"$type":"Comment","$id":"ParameterSet-condition-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet-condition","body":"A constraint that should be satisfied for the owner of the Parameters in an input ParameterSet to start execution using the values provided for those Parameters, or the owner of the Parameters in an output ParameterSet to end execution providing the values for those Parameters, if all preconditions and conditions on input ParameterSets were satisfied."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ParameterSet-condition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ParameterSet-condition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ParameterSet-parameter","$ns":"uml","name":"parameter","type":"Parameter","association":"A_parameterSet_parameter","ownedComment":[{"$type":"Comment","$id":"ParameterSet-parameter-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterSet-parameter","body":"Parameters in the ParameterSet."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ParameterSet-parameter-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"Property","$ns":"uml","name":"Property","ownedComment":[{"$type":"Comment","$id":"Property-_ownedComment.0","$ns":"uml","annotatedElement":"Property","body":"A Property is a StructuralFeature. A Property related by ownedAttribute to a Classifier (other than an association) represents an attribute and might also represent an association end. It relates an instance of the Classifier to a value or set of values of the type of the attribute. A Property related by memberEnd to an Association represents an end of the Association. The type of the Property is the type of the end of the Association. A Property has the capability of being a DeploymentTarget in a Deployment relationship. This enables modeling the deployment to hierarchical nodes that have Properties functioning as internal parts.  Property specializes ParameterableElement to specify that a Property can be exposed as a formal template parameter, and provided as an actual parameter in a binding of a template."}],"ownedRule":[{"$type":"Constraint","$id":"Property-subsetting_context_conforms","$ns":"uml","name":"subsetting_context_conforms","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-subsetting_context_conforms-_ownedComment.0","$ns":"uml","annotatedElement":"Property-subsetting_context_conforms","body":"Subsetting may only occur when the context of the subsetting property conforms to the context of the subsetted property."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-subsetting_context_conforms-_specification","$ns":"uml","language":"OCL","body":"subsettedProperty->notEmpty() implies\n  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |\n    subsettedProperty->forAll(sp |\n      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))"}]},{"$type":"Constraint","$id":"Property-derived_union_is_read_only","$ns":"uml","name":"derived_union_is_read_only","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-derived_union_is_read_only-_ownedComment.0","$ns":"uml","annotatedElement":"Property-derived_union_is_read_only","body":"A derived union is read only."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-derived_union_is_read_only-_specification","$ns":"uml","language":"OCL","body":"isDerivedUnion implies isReadOnly"}]},{"$type":"Constraint","$id":"Property-multiplicity_of_composite","$ns":"uml","name":"multiplicity_of_composite","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-multiplicity_of_composite-_ownedComment.0","$ns":"uml","annotatedElement":"Property-multiplicity_of_composite","body":"A multiplicity on the composing end of a composite aggregation must not have an upper bound greater than 1."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-multiplicity_of_composite-_specification","$ns":"uml","language":"OCL","body":"isComposite and association <> null implies opposite.upperBound() <= 1\r\n\r\n"}]},{"$type":"Constraint","$id":"Property-redefined_property_inherited","$ns":"uml","name":"redefined_property_inherited","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-redefined_property_inherited-_ownedComment.0","$ns":"uml","annotatedElement":"Property-redefined_property_inherited","body":"A redefined Property must be inherited from a more general Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-redefined_property_inherited-_specification","$ns":"uml","language":"OCL","body":"(redefinedProperty->notEmpty()) implies\r\n  (redefinitionContext->notEmpty() and\r\n      redefinedProperty->forAll(rp|\r\n        ((redefinitionContext->collect(fc|\r\n          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))"}]},{"$type":"Constraint","$id":"Property-subsetting_rules","$ns":"uml","name":"subsetting_rules","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-subsetting_rules-_ownedComment.0","$ns":"uml","annotatedElement":"Property-subsetting_rules","body":"A subsetting Property may strengthen the type of the subsetted Property, and its upper bound may be less."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-subsetting_rules-_specification","$ns":"uml","language":"OCL","body":"subsettedProperty->forAll(sp |\n  self.type.conformsTo(sp.type) and\n    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies\n      self.upperBound() <= sp.upperBound() ))"}]},{"$type":"Constraint","$id":"Property-binding_to_attribute","$ns":"uml","name":"binding_to_attribute","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-binding_to_attribute-_ownedComment.0","$ns":"uml","annotatedElement":"Property-binding_to_attribute","body":"A binding of a PropertyTemplateParameter representing an attribute must be to an attribute."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-binding_to_attribute-_specification","$ns":"uml","language":"OCL","body":"(self.isAttribute()\r\nand (templateParameterSubstitution->notEmpty())\r\nimplies (templateParameterSubstitution->forAll(ts |\r\n    ts.formal.oclIsKindOf(Property)\r\n    and ts.formal.oclAsType(Property).isAttribute())))"}]},{"$type":"Constraint","$id":"Property-derived_union_is_derived","$ns":"uml","name":"derived_union_is_derived","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-derived_union_is_derived-_ownedComment.0","$ns":"uml","annotatedElement":"Property-derived_union_is_derived","body":"A derived union is derived."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-derived_union_is_derived-_specification","$ns":"uml","language":"OCL","body":"isDerivedUnion implies isDerived"}]},{"$type":"Constraint","$id":"Property-deployment_target","$ns":"uml","name":"deployment_target","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-deployment_target-_ownedComment.0","$ns":"uml","annotatedElement":"Property-deployment_target","body":"A Property can be a DeploymentTarget if it is a kind of Node and functions as a part in the internal structure of an encompassing Node."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-deployment_target-_specification","$ns":"uml","language":"OCL","body":"deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))"}]},{"$type":"Constraint","$id":"Property-subsetted_property_names","$ns":"uml","name":"subsetted_property_names","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-subsetted_property_names-_ownedComment.0","$ns":"uml","annotatedElement":"Property-subsetted_property_names","body":"A Property may not subset a Property with the same name."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-subsetted_property_names-_specification","$ns":"uml","language":"OCL","body":"subsettedProperty->forAll(sp | sp.name <> name)"}]},{"$type":"Constraint","$id":"Property-type_of_opposite_end","$ns":"uml","name":"type_of_opposite_end","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-type_of_opposite_end-_ownedComment.0","$ns":"uml","annotatedElement":"Property-type_of_opposite_end","body":"If a Property is a classifier-owned end of a binary Association, its owner must be the type of the opposite end."}],"specification":[{"$type":"OpaqueExpression","$id":"Property-type_of_opposite_end-_specification","$ns":"uml","language":"OCL","body":"(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type"}]},{"$type":"Constraint","$id":"Property-qualified_is_association_end","$ns":"uml","name":"qualified_is_association_end","constrainedElement":"Property","ownedComment":[{"$type":"Comment","$id":"Property-qualified_is_association_end-_ownedComment.0","$ns":"uml","annotatedElement":"Property-qualified_is_association_end","body":"All qualified Properties must be Association ends"}],"specification":[{"$type":"OpaqueExpression","$id":"Property-qualified_is_association_end-_specification","$ns":"uml","language":"OCL","body":"qualifier->notEmpty() implies association->notEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Property-_generalization.0","$ns":"uml","general":"ConnectableElement"},{"$type":"Generalization","$id":"Property-_generalization.2","$ns":"uml","general":"DeploymentTarget"},{"$type":"Generalization","$id":"Property-_generalization.1","$ns":"uml","general":"StructuralFeature"}],"ownedAttribute":[{"$type":"Property","$id":"Property-aggregation","$ns":"uml","name":"aggregation","type":"AggregationKind","ownedComment":[{"$type":"Comment","$id":"Property-aggregation-_ownedComment.0","$ns":"uml","annotatedElement":"Property-aggregation","body":"Specifies the kind of aggregation that applies to the Property."}],"defaultValue":[{"$type":"InstanceValue","$id":"Property-aggregation-_defaultValue","$ns":"uml","type":"AggregationKind","instance":"AggregationKind-none"}]},{"$type":"Property","$id":"Property-association","$ns":"uml","name":"association","type":"Association","subsettedProperty":"A_member_memberNamespace-memberNamespace","association":"A_memberEnd_association","ownedComment":[{"$type":"Comment","$id":"Property-association-_ownedComment.0","$ns":"uml","annotatedElement":"Property-association","body":"The Association of which this Property is a member, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-association-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-associationEnd","$ns":"uml","name":"associationEnd","type":"Property","subsettedProperty":"Element-owner","association":"A_qualifier_associationEnd","ownedComment":[{"$type":"Comment","$id":"Property-associationEnd-_ownedComment.0","$ns":"uml","annotatedElement":"Property-associationEnd","body":"Designates the optional association end that owns a qualifier attribute."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-associationEnd-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-class","$ns":"uml","name":"class","type":"Class","subsettedProperty":"A_attribute_classifier-classifier A_ownedAttribute_structuredClassifier-structuredClassifier NamedElement-namespace","association":"A_ownedAttribute_class","ownedComment":[{"$type":"Comment","$id":"Property-class-_ownedComment.0","$ns":"uml","annotatedElement":"Property-class","body":"The Class that owns this Property, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-class-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-datatype","$ns":"uml","name":"datatype","type":"DataType","subsettedProperty":"A_attribute_classifier-classifier NamedElement-namespace","association":"A_ownedAttribute_datatype","ownedComment":[{"$type":"Comment","$id":"Property-datatype-_ownedComment.0","$ns":"uml","annotatedElement":"Property-datatype","body":"The DataType that owns this Property, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-datatype-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-defaultValue","$ns":"uml","name":"defaultValue","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_defaultValue_owningProperty","ownedComment":[{"$type":"Comment","$id":"Property-defaultValue-_ownedComment.0","$ns":"uml","annotatedElement":"Property-defaultValue","body":"A ValueSpecification that is evaluated to give a default value for the Property when an instance of the owning Classifier is instantiated."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-defaultValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-interface","$ns":"uml","name":"interface","type":"Interface","subsettedProperty":"A_attribute_classifier-classifier NamedElement-namespace","association":"A_ownedAttribute_interface","ownedComment":[{"$type":"Comment","$id":"Property-interface-_ownedComment.0","$ns":"uml","annotatedElement":"Property-interface","body":"The Interface that owns this Property, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-interface-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-isComposite","$ns":"uml","name":"isComposite","isDerived":"true","ownedComment":[{"$type":"Comment","$id":"Property-isComposite-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isComposite","body":"If isComposite is true, the object containing the attribute is a container for the object or value contained in the attribute. This is a derived value, indicating whether the aggregation of the Property is composite or not."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Property-isComposite-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-isDerived","$ns":"uml","name":"isDerived","ownedComment":[{"$type":"Comment","$id":"Property-isDerived-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isDerived","body":"Specifies whether the Property is derived, i.e., whether its value or values can be computed from other information."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Property-isDerived-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-isDerivedUnion","$ns":"uml","name":"isDerivedUnion","ownedComment":[{"$type":"Comment","$id":"Property-isDerivedUnion-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isDerivedUnion","body":"Specifies whether the property is derived as the union of all of the Properties that are constrained to subset it."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Property-isDerivedUnion-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-isID","$ns":"uml","name":"isID","ownedComment":[{"$type":"Comment","$id":"Property-isID-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isID","body":"True indicates this property can be used to uniquely identify an instance of the containing Class."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Property-isID-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-opposite","$ns":"uml","name":"opposite","type":"Property","isDerived":"true","association":"A_opposite_property","ownedComment":[{"$type":"Comment","$id":"Property-opposite-_ownedComment.0","$ns":"uml","annotatedElement":"Property-opposite","body":"In the case where the Property is one end of a binary association this gives the other end."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-opposite-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-owningAssociation","$ns":"uml","name":"owningAssociation","type":"Association","subsettedProperty":"Feature-featuringClassifier NamedElement-namespace Property-association RedefinableElement-redefinitionContext","association":"A_ownedEnd_owningAssociation","ownedComment":[{"$type":"Comment","$id":"Property-owningAssociation-_ownedComment.0","$ns":"uml","annotatedElement":"Property-owningAssociation","body":"The owning association of this property, if any."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-owningAssociation-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-qualifier","$ns":"uml","name":"qualifier","type":"Property","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_qualifier_associationEnd","ownedComment":[{"$type":"Comment","$id":"Property-qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"Property-qualifier","body":"An optional list of ordered qualifier attributes for the end."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Property-qualifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-qualifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-redefinedProperty","$ns":"uml","name":"redefinedProperty","type":"Property","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_redefinedProperty_property","ownedComment":[{"$type":"Comment","$id":"Property-redefinedProperty-_ownedComment.0","$ns":"uml","annotatedElement":"Property-redefinedProperty","body":"The properties that are redefined by this property, if any."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Property-redefinedProperty-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-redefinedProperty-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Property-subsettedProperty","$ns":"uml","name":"subsettedProperty","type":"Property","association":"A_subsettedProperty_property","ownedComment":[{"$type":"Comment","$id":"Property-subsettedProperty-_ownedComment.0","$ns":"uml","annotatedElement":"Property-subsettedProperty","body":"The properties of which this Property is constrained to be a subset, if any."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Property-subsettedProperty-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-subsettedProperty-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Property-isAttribute","$ns":"uml","name":"isAttribute","isQuery":"true","bodyCondition":"Property-isAttribute-spec","ownedComment":[{"$type":"Comment","$id":"Property-isAttribute-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isAttribute","body":"The query isAttribute() is true if the Property is defined as an attribute of some Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"Property-isAttribute-spec","$ns":"uml","name":"spec","constrainedElement":"Property-isAttribute","specification":[{"$type":"OpaqueExpression","$id":"Property-isAttribute-spec-_specification","$ns":"uml","language":"OCL","body":"result = (not classifier->isEmpty())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-isAttribute-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Property-isCompatibleWith","$ns":"uml","name":"isCompatibleWith","isQuery":"true","redefinedOperation":"ParameterableElement-isCompatibleWith","bodyCondition":"Property-isCompatibleWith-spec","ownedComment":[{"$type":"Comment","$id":"Property-isCompatibleWith-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isCompatibleWith","body":"The query isCompatibleWith() determines if this Property is compatible with the specified ParameterableElement. This Property is compatible with ParameterableElement p if the kind of this Property is thesame as or a subtype of the kind of p. Further, if p is a TypedElement, then the type of this Property must be conformant with the type of p."}],"ownedRule":[{"$type":"Constraint","$id":"Property-isCompatibleWith-spec","$ns":"uml","name":"spec","constrainedElement":"Property-isCompatibleWith","specification":[{"$type":"OpaqueExpression","$id":"Property-isCompatibleWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.oclIsKindOf(p.oclType()) and (p.oclIsKindOf(TypeElement) implies\r\nself.type.conformsTo(p.oclAsType(TypedElement).type)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-isCompatibleWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Property-isCompatibleWith-p","$ns":"uml","name":"p","type":"ParameterableElement"}]},{"$type":"Operation","$id":"Property-isComposite.1","$ns":"uml","name":"isComposite","isQuery":"true","bodyCondition":"Property-isComposite.1-spec","ownedComment":[{"$type":"Comment","$id":"Property-isComposite.1-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isComposite.1","body":"The value of isComposite is true only if aggregation is composite."}],"ownedRule":[{"$type":"Constraint","$id":"Property-isComposite.1-spec","$ns":"uml","name":"spec","constrainedElement":"Property-isComposite.1 Property-isComposite","specification":[{"$type":"OpaqueExpression","$id":"Property-isComposite.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (aggregation = AggregationKind::composite)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-isComposite.1-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Property-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"Property-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"Property-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"Property-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isConsistentWith","body":"The query isConsistentWith() specifies, for any two Properties in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining Property is consistent with a redefined Property if the type of the redefining Property conforms to the type of the redefined Property, and the multiplicity of the redefining Property (if specified) is contained in the multiplicity of the redefined Property."}],"ownedRule":[{"$type":"Constraint","$id":"Property-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"Property-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Property-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]},{"$type":"Constraint","$id":"Property-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"Property-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"Property-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (redefiningElement.oclIsKindOf(Property) and \n  let prop : Property = redefiningElement.oclAsType(Property) in \n  (prop.type.conformsTo(self.type) and \n  ((prop.lowerBound()->notEmpty() and self.lowerBound()->notEmpty()) implies prop.lowerBound() >= self.lowerBound()) and \n  ((prop.upperBound()->notEmpty() and self.upperBound()->notEmpty()) implies prop.lowerBound() <= self.lowerBound()) and \n  (self.isComposite implies prop.isComposite)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"Property-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"Property-isNavigable","$ns":"uml","name":"isNavigable","isQuery":"true","bodyCondition":"Property-isNavigable-spec","ownedComment":[{"$type":"Comment","$id":"Property-isNavigable-_ownedComment.0","$ns":"uml","annotatedElement":"Property-isNavigable","body":"The query isNavigable() indicates whether it is possible to navigate across the property."}],"ownedRule":[{"$type":"Constraint","$id":"Property-isNavigable-spec","$ns":"uml","name":"spec","constrainedElement":"Property-isNavigable","specification":[{"$type":"OpaqueExpression","$id":"Property-isNavigable-spec-_specification","$ns":"uml","language":"OCL","body":"result = (not classifier->isEmpty() or association.navigableOwnedEnd->includes(self))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-isNavigable-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]}]},{"$type":"Operation","$id":"Property-opposite.1","$ns":"uml","name":"opposite","isQuery":"true","bodyCondition":"Property-opposite.1-spec","ownedComment":[{"$type":"Comment","$id":"Property-opposite.1-_ownedComment.0","$ns":"uml","annotatedElement":"Property-opposite.1","body":"If this property is a memberEnd of a binary association, then opposite gives the other end."}],"ownedRule":[{"$type":"Constraint","$id":"Property-opposite.1-spec","$ns":"uml","name":"spec","constrainedElement":"Property-opposite.1 Property-opposite","specification":[{"$type":"OpaqueExpression","$id":"Property-opposite.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if association <> null and association.memberEnd->size() = 2\nthen\n    association.memberEnd->any(e | e <> self)\nelse\n    null\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-opposite.1-result","$ns":"uml","name":"result","type":"Property","direction":"return"}]},{"$type":"Operation","$id":"Property-subsettingContext","$ns":"uml","name":"subsettingContext","isQuery":"true","bodyCondition":"Property-subsettingContext-spec","ownedComment":[{"$type":"Comment","$id":"Property-subsettingContext-_ownedComment.0","$ns":"uml","annotatedElement":"Property-subsettingContext","body":"The query subsettingContext() gives the context for subsetting a Property. It consists, in the case of an attribute, of the corresponding Classifier, and in the case of an association end, all of the Classifiers at the other ends."}],"ownedRule":[{"$type":"Constraint","$id":"Property-subsettingContext-spec","$ns":"uml","name":"spec","constrainedElement":"Property-subsettingContext","specification":[{"$type":"OpaqueExpression","$id":"Property-subsettingContext-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if association <> null\nthen association.memberEnd->excluding(self)->collect(type)->asSet()\nelse \n  if classifier<>null\n  then classifier->asSet()\n  else Set{} \n  endif\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Property-subsettingContext-result","$ns":"uml","name":"result","type":"Type","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Property-subsettingContext-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Property-subsettingContext-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"RedefinableElement","$ns":"uml","name":"RedefinableElement","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement","body":"A RedefinableElement is an element that, when defined in the context of a Classifier, can be redefined more specifically or differently in the context of another Classifier that specializes (directly or indirectly) the context Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableElement-redefinition_consistent","$ns":"uml","name":"redefinition_consistent","constrainedElement":"RedefinableElement","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-redefinition_consistent-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-redefinition_consistent","body":"A redefining element must be consistent with each redefined element."}],"specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-redefinition_consistent-_specification","$ns":"uml","language":"OCL","body":"redefinedElement->forAll(re | re.isConsistentWith(self))"}]},{"$type":"Constraint","$id":"RedefinableElement-non_leaf_redefinition","$ns":"uml","name":"non_leaf_redefinition","constrainedElement":"RedefinableElement","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-non_leaf_redefinition-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-non_leaf_redefinition","body":"A RedefinableElement can only redefine non-leaf RedefinableElements."}],"specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-non_leaf_redefinition-_specification","$ns":"uml","language":"OCL","body":"redefinedElement->forAll(re | not re.isLeaf)"}]},{"$type":"Constraint","$id":"RedefinableElement-redefinition_context_valid","$ns":"uml","name":"redefinition_context_valid","constrainedElement":"RedefinableElement","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-redefinition_context_valid-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-redefinition_context_valid","body":"At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element."}],"specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-redefinition_context_valid-_specification","$ns":"uml","language":"OCL","body":"redefinedElement->forAll(re | self.isRedefinitionContextValid(re))"}]}],"generalization":[{"$type":"Generalization","$id":"RedefinableElement-_generalization.0","$ns":"uml","general":"NamedElement"}],"ownedAttribute":[{"$type":"Property","$id":"RedefinableElement-isLeaf","$ns":"uml","name":"isLeaf","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-isLeaf-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-isLeaf","body":"Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"RedefinableElement-isLeaf-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"RedefinableElement-redefinedElement","$ns":"uml","name":"redefinedElement","type":"RedefinableElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_redefinedElement_redefinableElement","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-redefinedElement-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-redefinedElement","body":"The RedefinableElement that is being redefined by this element."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"RedefinableElement-redefinedElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"RedefinableElement-redefinedElement-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"RedefinableElement-redefinitionContext","$ns":"uml","name":"redefinitionContext","type":"Classifier","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_redefinitionContext_redefinableElement","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-redefinitionContext-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-redefinitionContext","body":"The contexts that this element may be redefined from."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"RedefinableElement-redefinitionContext-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"RedefinableElement-redefinitionContext-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"RedefinableElement-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"RedefinableElement-isConsistentWith-pre","bodyCondition":"RedefinableElement-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-isConsistentWith","body":"The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions."}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableElement-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"RedefinableElement-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-isConsistentWith-spec-_specification","$ns":"uml","language":"OCL","body":"result = (false)"}]},{"$type":"Constraint","$id":"RedefinableElement-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"RedefinableElement-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"RedefinableElement-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"RedefinableElement-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]},{"$type":"Operation","$id":"RedefinableElement-isRedefinitionContextValid","$ns":"uml","name":"isRedefinitionContextValid","isQuery":"true","bodyCondition":"RedefinableElement-isRedefinitionContextValid-spec","ownedComment":[{"$type":"Comment","$id":"RedefinableElement-isRedefinitionContextValid-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableElement-isRedefinitionContextValid","body":"The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element."}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableElement-isRedefinitionContextValid-spec","$ns":"uml","name":"spec","constrainedElement":"RedefinableElement-isRedefinitionContextValid","specification":[{"$type":"OpaqueExpression","$id":"RedefinableElement-isRedefinitionContextValid-spec-_specification","$ns":"uml","language":"OCL","body":"result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"RedefinableElement-isRedefinitionContextValid-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"RedefinableElement-isRedefinitionContextValid-redefinedElement","$ns":"uml","name":"redefinedElement","type":"RedefinableElement"}]}]},{"$type":"Class","$id":"RedefinableTemplateSignature","$ns":"uml","name":"RedefinableTemplateSignature","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature","body":"A RedefinableTemplateSignature supports the addition of formal template parameters in a specialization of a template classifier."}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableTemplateSignature-redefines_parents","$ns":"uml","name":"redefines_parents","constrainedElement":"RedefinableTemplateSignature","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-redefines_parents-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-redefines_parents","body":"If any of the parent Classifiers are a template, then the extendedSignature must include the signature of that Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"RedefinableTemplateSignature-redefines_parents-_specification","$ns":"uml","language":"OCL","body":"classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))"}]}],"generalization":[{"$type":"Generalization","$id":"RedefinableTemplateSignature-_generalization.0","$ns":"uml","general":"RedefinableElement"},{"$type":"Generalization","$id":"RedefinableTemplateSignature-_generalization.1","$ns":"uml","general":"TemplateSignature"}],"ownedAttribute":[{"$type":"Property","$id":"RedefinableTemplateSignature-classifier","$ns":"uml","name":"classifier","type":"Classifier","redefinedProperty":"TemplateSignature-template","subsettedProperty":"RedefinableElement-redefinitionContext","association":"A_ownedTemplateSignature_classifier","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-classifier","body":"The Classifier that owns this RedefinableTemplateSignature."}]},{"$type":"Property","$id":"RedefinableTemplateSignature-extendedSignature","$ns":"uml","name":"extendedSignature","type":"RedefinableTemplateSignature","subsettedProperty":"RedefinableElement-redefinedElement","association":"A_extendedSignature_redefinableTemplateSignature","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-extendedSignature-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-extendedSignature","body":"The signatures extended by this RedefinableTemplateSignature."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"RedefinableTemplateSignature-extendedSignature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"RedefinableTemplateSignature-extendedSignature-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"RedefinableTemplateSignature-inheritedParameter","$ns":"uml","name":"inheritedParameter","type":"TemplateParameter","isReadOnly":"true","isDerived":"true","subsettedProperty":"TemplateSignature-parameter","association":"A_inheritedParameter_redefinableTemplateSignature","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-inheritedParameter-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-inheritedParameter","body":"The formal template parameters of the extended signatures."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"RedefinableTemplateSignature-inheritedParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"RedefinableTemplateSignature-inheritedParameter-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"RedefinableTemplateSignature-inheritedParameter.1","$ns":"uml","name":"inheritedParameter","isQuery":"true","bodyCondition":"RedefinableTemplateSignature-inheritedParameter.1-spec","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-inheritedParameter.1-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-inheritedParameter.1","body":"Derivation for RedefinableTemplateSignature::/inheritedParameter"}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableTemplateSignature-inheritedParameter.1-spec","$ns":"uml","name":"spec","constrainedElement":"RedefinableTemplateSignature-inheritedParameter.1 RedefinableTemplateSignature-inheritedParameter","specification":[{"$type":"OpaqueExpression","$id":"RedefinableTemplateSignature-inheritedParameter.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"RedefinableTemplateSignature-inheritedParameter.1-result","$ns":"uml","name":"result","type":"TemplateParameter","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"RedefinableTemplateSignature-inheritedParameter.1-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"RedefinableTemplateSignature-inheritedParameter.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"RedefinableTemplateSignature-isConsistentWith","$ns":"uml","name":"isConsistentWith","isQuery":"true","precondition":"RedefinableTemplateSignature-isConsistentWith-pre","redefinedOperation":"RedefinableElement-isConsistentWith","bodyCondition":"RedefinableTemplateSignature-isConsistentWith-spec","ownedComment":[{"$type":"Comment","$id":"RedefinableTemplateSignature-isConsistentWith-_ownedComment.0","$ns":"uml","annotatedElement":"RedefinableTemplateSignature-isConsistentWith","body":"The query isConsistentWith() specifies, for any two RedefinableTemplateSignatures in a context in which redefinition is possible, whether redefinition would be logically consistent. A redefining template signature is always consistent with a redefined template signature, as redefinition only adds new formal parameters."}],"ownedRule":[{"$type":"Constraint","$id":"RedefinableTemplateSignature-isConsistentWith-spec","$ns":"uml","name":"spec","constrainedElement":"RedefinableTemplateSignature-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"RedefinableTemplateSignature-isConsistentWith-spec-spec","$ns":"uml","name":"spec","language":"OCL","body":"result = (redefiningElement.oclIsKindOf(RedefinableTemplateSignature))"}]},{"$type":"Constraint","$id":"RedefinableTemplateSignature-isConsistentWith-pre","$ns":"uml","name":"pre","constrainedElement":"RedefinableTemplateSignature-isConsistentWith","specification":[{"$type":"OpaqueExpression","$id":"RedefinableTemplateSignature-isConsistentWith-pre-_specification","$ns":"uml","language":"OCL","body":"redefiningElement.isRedefinitionContextValid(self)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"RedefinableTemplateSignature-isConsistentWith-result","$ns":"uml","name":"result","direction":"return","type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}]},{"$type":"Parameter","$id":"RedefinableTemplateSignature-isConsistentWith-redefiningElement","$ns":"uml","name":"redefiningElement","type":"RedefinableElement"}]}]},{"$type":"Class","$id":"Slot","$ns":"uml","name":"Slot","ownedComment":[{"$type":"Comment","$id":"Slot-_ownedComment.0","$ns":"uml","annotatedElement":"Slot","body":"A Slot designates that an entity modeled by an InstanceSpecification has a value or values for a specific StructuralFeature."}],"generalization":[{"$type":"Generalization","$id":"Slot-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"Slot-definingFeature","$ns":"uml","name":"definingFeature","type":"StructuralFeature","association":"A_definingFeature_slot","ownedComment":[{"$type":"Comment","$id":"Slot-definingFeature-_ownedComment.0","$ns":"uml","annotatedElement":"Slot-definingFeature","body":"The StructuralFeature that specifies the values that may be held by the Slot."}]},{"$type":"Property","$id":"Slot-owningInstance","$ns":"uml","name":"owningInstance","type":"InstanceSpecification","subsettedProperty":"Element-owner","association":"A_slot_owningInstance","ownedComment":[{"$type":"Comment","$id":"Slot-owningInstance-_ownedComment.0","$ns":"uml","annotatedElement":"Slot-owningInstance","body":"The InstanceSpecification that owns this Slot."}]},{"$type":"Property","$id":"Slot-value","$ns":"uml","name":"value","type":"ValueSpecification","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_value_owningSlot","ownedComment":[{"$type":"Comment","$id":"Slot-value-_ownedComment.0","$ns":"uml","annotatedElement":"Slot-value","body":"The value or values held by the Slot."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Slot-value-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Slot-value-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"StructuralFeature","$ns":"uml","name":"StructuralFeature","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"StructuralFeature-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeature","body":"A StructuralFeature is a typed feature of a Classifier that specifies the structure of instances of the Classifier."}],"generalization":[{"$type":"Generalization","$id":"StructuralFeature-_generalization.0","$ns":"uml","general":"MultiplicityElement"},{"$type":"Generalization","$id":"StructuralFeature-_generalization.1","$ns":"uml","general":"TypedElement"},{"$type":"Generalization","$id":"StructuralFeature-_generalization.2","$ns":"uml","general":"Feature"}],"ownedAttribute":[{"$type":"Property","$id":"StructuralFeature-isReadOnly","$ns":"uml","name":"isReadOnly","ownedComment":[{"$type":"Comment","$id":"StructuralFeature-isReadOnly-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeature-isReadOnly","body":"If isReadOnly is true, the StructuralFeature may not be written to after initialization."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"StructuralFeature-isReadOnly-_defaultValue","$ns":"uml"}]}]},{"$type":"Enumeration","$id":"AggregationKind","$ns":"uml","name":"AggregationKind","ownedComment":[{"$type":"Comment","$id":"AggregationKind-_ownedComment.0","$ns":"uml","annotatedElement":"AggregationKind","body":"AggregationKind is an Enumeration for specifying the kind of aggregation of a Property."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"AggregationKind-none","$ns":"uml","name":"none","ownedComment":[{"$type":"Comment","$id":"AggregationKind-none-_ownedComment.0","$ns":"uml","annotatedElement":"AggregationKind-none","body":"Indicates that the Property has no aggregation."}]},{"$type":"EnumerationLiteral","$id":"AggregationKind-shared","$ns":"uml","name":"shared","ownedComment":[{"$type":"Comment","$id":"AggregationKind-shared-_ownedComment.0","$ns":"uml","annotatedElement":"AggregationKind-shared","body":"Indicates that the Property has shared aggregation."}]},{"$type":"EnumerationLiteral","$id":"AggregationKind-composite","$ns":"uml","name":"composite","ownedComment":[{"$type":"Comment","$id":"AggregationKind-composite-_ownedComment.0","$ns":"uml","annotatedElement":"AggregationKind-composite","body":"Indicates that the Property is aggregated compositely, i.e., the composite object has responsibility for the existence and storage of the composed objects (parts)."}]}]},{"$type":"Enumeration","$id":"CallConcurrencyKind","$ns":"uml","name":"CallConcurrencyKind","ownedComment":[{"$type":"Comment","$id":"CallConcurrencyKind-_ownedComment.0","$ns":"uml","annotatedElement":"CallConcurrencyKind","body":"CallConcurrencyKind is an Enumeration used to specify the semantics of concurrent calls to a BehavioralFeature."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"CallConcurrencyKind-sequential","$ns":"uml","name":"sequential","ownedComment":[{"$type":"Comment","$id":"CallConcurrencyKind-sequential-_ownedComment.0","$ns":"uml","annotatedElement":"CallConcurrencyKind-sequential","body":"No concurrency management mechanism is associated with the BehavioralFeature and, therefore, concurrency conflicts may occur. Instances that invoke a BehavioralFeature need to coordinate so that only one invocation to a target on any BehavioralFeature occurs at once."}]},{"$type":"EnumerationLiteral","$id":"CallConcurrencyKind-guarded","$ns":"uml","name":"guarded","ownedComment":[{"$type":"Comment","$id":"CallConcurrencyKind-guarded-_ownedComment.0","$ns":"uml","annotatedElement":"CallConcurrencyKind-guarded","body":"Multiple invocations of a BehavioralFeature that overlap in time may occur to one instance, but only one is allowed to commence. The others are blocked until the performance of the currently executing BehavioralFeature is complete. It is the responsibility of the system designer to ensure that deadlocks do not occur due to simultaneous blocking."}]},{"$type":"EnumerationLiteral","$id":"CallConcurrencyKind-concurrent","$ns":"uml","name":"concurrent","ownedComment":[{"$type":"Comment","$id":"CallConcurrencyKind-concurrent-_ownedComment.0","$ns":"uml","annotatedElement":"CallConcurrencyKind-concurrent","body":"Multiple invocations of a BehavioralFeature that overlap in time may occur to one instance and all of them may proceed concurrently."}]}]},{"$type":"Enumeration","$id":"ParameterDirectionKind","$ns":"uml","name":"ParameterDirectionKind","ownedComment":[{"$type":"Comment","$id":"ParameterDirectionKind-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterDirectionKind","body":"ParameterDirectionKind is an Enumeration that defines literals used to specify direction of parameters."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"ParameterDirectionKind-in","$ns":"uml","name":"in","ownedComment":[{"$type":"Comment","$id":"ParameterDirectionKind-in-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterDirectionKind-in","body":"Indicates that Parameter values are passed in by the caller. "}]},{"$type":"EnumerationLiteral","$id":"ParameterDirectionKind-inout","$ns":"uml","name":"inout","ownedComment":[{"$type":"Comment","$id":"ParameterDirectionKind-inout-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterDirectionKind-inout","body":"Indicates that Parameter values are passed in by the caller and (possibly different) values passed out to the caller."}]},{"$type":"EnumerationLiteral","$id":"ParameterDirectionKind-out","$ns":"uml","name":"out","ownedComment":[{"$type":"Comment","$id":"ParameterDirectionKind-out-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterDirectionKind-out","body":"Indicates that Parameter values are passed out to the caller."}]},{"$type":"EnumerationLiteral","$id":"ParameterDirectionKind-return","$ns":"uml","name":"return","ownedComment":[{"$type":"Comment","$id":"ParameterDirectionKind-return-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterDirectionKind-return","body":"Indicates that Parameter values are passed as return values back to the caller."}]}]},{"$type":"Enumeration","$id":"ParameterEffectKind","$ns":"uml","name":"ParameterEffectKind","ownedComment":[{"$type":"Comment","$id":"ParameterEffectKind-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterEffectKind","body":"ParameterEffectKind is an Enumeration that indicates the effect of a Behavior on values passed in or out of its parameters."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"ParameterEffectKind-create","$ns":"uml","name":"create","ownedComment":[{"$type":"Comment","$id":"ParameterEffectKind-create-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterEffectKind-create","body":"Indicates that the behavior creates values."}]},{"$type":"EnumerationLiteral","$id":"ParameterEffectKind-read","$ns":"uml","name":"read","ownedComment":[{"$type":"Comment","$id":"ParameterEffectKind-read-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterEffectKind-read","body":"Indicates objects that are values of the parameter have values of their properties, or links in which they participate, or their classifiers retrieved during executions of the behavior."}]},{"$type":"EnumerationLiteral","$id":"ParameterEffectKind-update","$ns":"uml","name":"update","ownedComment":[{"$type":"Comment","$id":"ParameterEffectKind-update-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterEffectKind-update","body":"Indicates objects that are values of the parameter have values of their properties, or links in which they participate, or their classification changed during executions of the behavior."}]},{"$type":"EnumerationLiteral","$id":"ParameterEffectKind-delete","$ns":"uml","name":"delete","ownedComment":[{"$type":"Comment","$id":"ParameterEffectKind-delete-_ownedComment.0","$ns":"uml","annotatedElement":"ParameterEffectKind-delete","body":"Indicates objects that are values of the parameter do not exist after executions of the behavior are finished."}]}]},{"$type":"Association","$id":"A_definingFeature_slot","$ns":"uml","name":"A_definingFeature_slot","memberEnd":"Slot-definingFeature A_definingFeature_slot-slot","ownedEnd":[{"$type":"Property","$id":"A_definingFeature_slot-slot","$ns":"uml","name":"slot","type":"Slot","association":"A_definingFeature_slot","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_definingFeature_slot-slot-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_definingFeature_slot-slot-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_owningSlot","$ns":"uml","name":"A_value_owningSlot","memberEnd":"Slot-value A_value_owningSlot-owningSlot","ownedEnd":[{"$type":"Property","$id":"A_value_owningSlot-owningSlot","$ns":"uml","name":"owningSlot","type":"Slot","subsettedProperty":"Element-owner","association":"A_value_owningSlot","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_owningSlot-owningSlot-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_extendedSignature_redefinableTemplateSignature","$ns":"uml","name":"A_extendedSignature_redefinableTemplateSignature","memberEnd":"RedefinableTemplateSignature-extendedSignature A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature","ownedEnd":[{"$type":"Property","$id":"A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature","$ns":"uml","name":"redefinableTemplateSignature","type":"RedefinableTemplateSignature","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_extendedSignature_redefinableTemplateSignature","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_extendedSignature_redefinableTemplateSignature-redefinableTemplateSignature-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inheritedParameter_redefinableTemplateSignature","$ns":"uml","name":"A_inheritedParameter_redefinableTemplateSignature","memberEnd":"RedefinableTemplateSignature-inheritedParameter A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature","$ns":"uml","name":"redefinableTemplateSignature","type":"RedefinableTemplateSignature","subsettedProperty":"A_parameter_templateSignature-templateSignature","association":"A_inheritedParameter_redefinableTemplateSignature","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_inheritedParameter_redefinableTemplateSignature-redefinableTemplateSignature-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinitionContext_redefinableElement","$ns":"uml","name":"A_redefinitionContext_redefinableElement","memberEnd":"RedefinableElement-redefinitionContext A_redefinitionContext_redefinableElement-redefinableElement","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_redefinitionContext_redefinableElement-redefinableElement","$ns":"uml","name":"redefinableElement","type":"RedefinableElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_redefinitionContext_redefinableElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinitionContext_redefinableElement-redefinableElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinitionContext_redefinableElement-redefinableElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedElement_redefinableElement","$ns":"uml","name":"A_redefinedElement_redefinableElement","memberEnd":"RedefinableElement-redefinedElement A_redefinedElement_redefinableElement-redefinableElement","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_redefinedElement_redefinableElement-redefinableElement","$ns":"uml","name":"redefinableElement","type":"RedefinableElement","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","association":"A_redefinedElement_redefinableElement","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedElement_redefinableElement-redefinableElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedElement_redefinableElement-redefinableElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_qualifier_associationEnd","$ns":"uml","name":"A_qualifier_associationEnd","memberEnd":"Property-qualifier Property-associationEnd"},{"$type":"Association","$id":"A_redefinedProperty_property","$ns":"uml","name":"A_redefinedProperty_property","memberEnd":"Property-redefinedProperty A_redefinedProperty_property-property","ownedEnd":[{"$type":"Property","$id":"A_redefinedProperty_property-property","$ns":"uml","name":"property","type":"Property","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedProperty_property","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedProperty_property-property-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedProperty_property-property-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_defaultValue_owningProperty","$ns":"uml","name":"A_defaultValue_owningProperty","memberEnd":"Property-defaultValue A_defaultValue_owningProperty-owningProperty","ownedEnd":[{"$type":"Property","$id":"A_defaultValue_owningProperty-owningProperty","$ns":"uml","name":"owningProperty","type":"Property","subsettedProperty":"Element-owner","association":"A_defaultValue_owningProperty","lowerValue":[{"$type":"LiteralInteger","$id":"A_defaultValue_owningProperty-owningProperty-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_opposite_property","$ns":"uml","name":"A_opposite_property","memberEnd":"Property-opposite A_opposite_property-property","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_opposite_property-property","$ns":"uml","name":"property","type":"Property","association":"A_opposite_property","lowerValue":[{"$type":"LiteralInteger","$id":"A_opposite_property-property-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_subsettedProperty_property","$ns":"uml","name":"A_subsettedProperty_property","memberEnd":"Property-subsettedProperty A_subsettedProperty_property-property","ownedEnd":[{"$type":"Property","$id":"A_subsettedProperty_property-property","$ns":"uml","name":"property","type":"Property","association":"A_subsettedProperty_property","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_subsettedProperty_property-property-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_subsettedProperty_property-property-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_condition_parameterSet","$ns":"uml","name":"A_condition_parameterSet","memberEnd":"ParameterSet-condition A_condition_parameterSet-parameterSet","ownedEnd":[{"$type":"Property","$id":"A_condition_parameterSet-parameterSet","$ns":"uml","name":"parameterSet","type":"ParameterSet","subsettedProperty":"Element-owner","association":"A_condition_parameterSet","lowerValue":[{"$type":"LiteralInteger","$id":"A_condition_parameterSet-parameterSet-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_parameterSet_parameter","$ns":"uml","name":"A_parameterSet_parameter","memberEnd":"Parameter-parameterSet ParameterSet-parameter"},{"$type":"Association","$id":"A_defaultValue_owningParameter","$ns":"uml","name":"A_defaultValue_owningParameter","memberEnd":"Parameter-defaultValue A_defaultValue_owningParameter-owningParameter","ownedEnd":[{"$type":"Property","$id":"A_defaultValue_owningParameter-owningParameter","$ns":"uml","name":"owningParameter","type":"Parameter","subsettedProperty":"Element-owner","association":"A_defaultValue_owningParameter","lowerValue":[{"$type":"LiteralInteger","$id":"A_defaultValue_owningParameter-owningParameter-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_type_operation","$ns":"uml","name":"A_type_operation","memberEnd":"Operation-type A_type_operation-operation","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_type_operation-operation","$ns":"uml","name":"operation","type":"Operation","association":"A_type_operation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_type_operation-operation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_type_operation-operation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_operation_templateParameter_parameteredElement","$ns":"uml","name":"A_operation_templateParameter_parameteredElement","memberEnd":"Operation-templateParameter OperationTemplateParameter-parameteredElement"},{"$type":"Association","$id":"A_bodyCondition_bodyContext","$ns":"uml","name":"A_bodyCondition_bodyContext","memberEnd":"Operation-bodyCondition A_bodyCondition_bodyContext-bodyContext","ownedEnd":[{"$type":"Property","$id":"A_bodyCondition_bodyContext-bodyContext","$ns":"uml","name":"bodyContext","type":"Operation","subsettedProperty":"Constraint-context","association":"A_bodyCondition_bodyContext","lowerValue":[{"$type":"LiteralInteger","$id":"A_bodyCondition_bodyContext-bodyContext-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_postcondition_postContext","$ns":"uml","name":"A_postcondition_postContext","memberEnd":"Operation-postcondition A_postcondition_postContext-postContext","ownedEnd":[{"$type":"Property","$id":"A_postcondition_postContext-postContext","$ns":"uml","name":"postContext","type":"Operation","subsettedProperty":"Constraint-context","association":"A_postcondition_postContext","lowerValue":[{"$type":"LiteralInteger","$id":"A_postcondition_postContext-postContext-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedOperation_operation","$ns":"uml","name":"A_redefinedOperation_operation","memberEnd":"Operation-redefinedOperation A_redefinedOperation_operation-operation","ownedEnd":[{"$type":"Property","$id":"A_redefinedOperation_operation-operation","$ns":"uml","name":"operation","type":"Operation","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedOperation_operation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedOperation_operation-operation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedOperation_operation-operation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_raisedException_operation","$ns":"uml","name":"A_raisedException_operation","memberEnd":"Operation-raisedException A_raisedException_operation-operation","ownedEnd":[{"$type":"Property","$id":"A_raisedException_operation-operation","$ns":"uml","name":"operation","type":"Operation","subsettedProperty":"A_raisedException_behavioralFeature-behavioralFeature","association":"A_raisedException_operation","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_raisedException_operation-operation-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_raisedException_operation-operation-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_precondition_preContext","$ns":"uml","name":"A_precondition_preContext","memberEnd":"Operation-precondition A_precondition_preContext-preContext","ownedEnd":[{"$type":"Property","$id":"A_precondition_preContext-preContext","$ns":"uml","name":"preContext","type":"Operation","subsettedProperty":"Constraint-context","association":"A_precondition_preContext","lowerValue":[{"$type":"LiteralInteger","$id":"A_precondition_preContext-preContext-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameter_operation","$ns":"uml","name":"A_ownedParameter_operation","memberEnd":"Operation-ownedParameter Parameter-operation"},{"$type":"Association","$id":"A_instance_instanceValue","$ns":"uml","name":"A_instance_instanceValue","memberEnd":"InstanceValue-instance A_instance_instanceValue-instanceValue","ownedEnd":[{"$type":"Property","$id":"A_instance_instanceValue-instanceValue","$ns":"uml","name":"instanceValue","type":"InstanceValue","association":"A_instance_instanceValue","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_instance_instanceValue-instanceValue-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_instance_instanceValue-instanceValue-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_classifier_instanceSpecification","$ns":"uml","name":"A_classifier_instanceSpecification","memberEnd":"InstanceSpecification-classifier A_classifier_instanceSpecification-instanceSpecification","ownedEnd":[{"$type":"Property","$id":"A_classifier_instanceSpecification-instanceSpecification","$ns":"uml","name":"instanceSpecification","type":"InstanceSpecification","association":"A_classifier_instanceSpecification","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_classifier_instanceSpecification-instanceSpecification-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_classifier_instanceSpecification-instanceSpecification-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_slot_owningInstance","$ns":"uml","name":"A_slot_owningInstance","memberEnd":"InstanceSpecification-slot Slot-owningInstance"},{"$type":"Association","$id":"A_specification_owningInstanceSpec","$ns":"uml","name":"A_specification_owningInstanceSpec","memberEnd":"InstanceSpecification-specification A_specification_owningInstanceSpec-owningInstanceSpec","ownedEnd":[{"$type":"Property","$id":"A_specification_owningInstanceSpec-owningInstanceSpec","$ns":"uml","name":"owningInstanceSpec","type":"InstanceSpecification","subsettedProperty":"Element-owner","association":"A_specification_owningInstanceSpec","lowerValue":[{"$type":"LiteralInteger","$id":"A_specification_owningInstanceSpec-owningInstanceSpec-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_generalizationSet_generalization","$ns":"uml","name":"A_generalizationSet_generalization","memberEnd":"Generalization-generalizationSet GeneralizationSet-generalization"},{"$type":"Association","$id":"A_general_generalization","$ns":"uml","name":"A_general_generalization","memberEnd":"Generalization-general A_general_generalization-generalization","ownedEnd":[{"$type":"Property","$id":"A_general_generalization-generalization","$ns":"uml","name":"generalization","type":"Generalization","subsettedProperty":"A_target_directedRelationship-directedRelationship","association":"A_general_generalization","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_general_generalization-generalization-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_general_generalization-generalization-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_constrainingClassifier_classifierTemplateParameter","$ns":"uml","name":"A_constrainingClassifier_classifierTemplateParameter","memberEnd":"ClassifierTemplateParameter-constrainingClassifier A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter","ownedEnd":[{"$type":"Property","$id":"A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter","$ns":"uml","name":"classifierTemplateParameter","type":"ClassifierTemplateParameter","association":"A_constrainingClassifier_classifierTemplateParameter","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_constrainingClassifier_classifierTemplateParameter-classifierTemplateParameter-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_classifier_templateParameter_parameteredElement","$ns":"uml","name":"A_classifier_templateParameter_parameteredElement","memberEnd":"Classifier-templateParameter ClassifierTemplateParameter-parameteredElement"},{"$type":"Association","$id":"A_powertypeExtent_powertype","$ns":"uml","name":"A_powertypeExtent_powertype","memberEnd":"Classifier-powertypeExtent GeneralizationSet-powertype"},{"$type":"Association","$id":"A_generalization_specific","$ns":"uml","name":"A_generalization_specific","memberEnd":"Classifier-generalization Generalization-specific"},{"$type":"Association","$id":"A_general_classifier","$ns":"uml","name":"A_general_classifier","memberEnd":"Classifier-general A_general_classifier-classifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_general_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","association":"A_general_classifier","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_general_classifier-classifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_general_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_feature_featuringClassifier","$ns":"uml","name":"A_feature_featuringClassifier","memberEnd":"Classifier-feature Feature-featuringClassifier","isDerived":"true"},{"$type":"Association","$id":"A_substitution_substitutingClassifier","$ns":"uml","name":"A_substitution_substitutingClassifier","memberEnd":"Classifier-substitution Substitution-substitutingClassifier"},{"$type":"Association","$id":"A_representation_classifier","$ns":"uml","name":"A_representation_classifier","memberEnd":"Classifier-representation A_representation_classifier-classifier","generalization":[{"$type":"Generalization","$id":"A_representation_classifier-_generalization.0","$ns":"uml","general":"A_collaborationUse_classifier"}],"ownedEnd":[{"$type":"Property","$id":"A_representation_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","redefinedProperty":"A_collaborationUse_classifier-classifier","association":"A_representation_classifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_representation_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedTemplateSignature_classifier","$ns":"uml","name":"A_ownedTemplateSignature_classifier","memberEnd":"Classifier-ownedTemplateSignature RedefinableTemplateSignature-classifier"},{"$type":"Association","$id":"A_inheritedMember_inheritingClassifier","$ns":"uml","name":"A_inheritedMember_inheritingClassifier","memberEnd":"Classifier-inheritedMember A_inheritedMember_inheritingClassifier-inheritingClassifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_inheritedMember_inheritingClassifier-inheritingClassifier","$ns":"uml","name":"inheritingClassifier","type":"Classifier","subsettedProperty":"A_member_memberNamespace-memberNamespace","association":"A_inheritedMember_inheritingClassifier","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_inheritedMember_inheritingClassifier-inheritingClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_inheritedMember_inheritingClassifier-inheritingClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_redefinedClassifier_classifier","$ns":"uml","name":"A_redefinedClassifier_classifier","memberEnd":"Classifier-redefinedClassifier A_redefinedClassifier_classifier-classifier","ownedEnd":[{"$type":"Property","$id":"A_redefinedClassifier_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","subsettedProperty":"A_redefinedElement_redefinableElement-redefinableElement","association":"A_redefinedClassifier_classifier","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_redefinedClassifier_classifier-classifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_redefinedClassifier_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_collaborationUse_classifier","$ns":"uml","name":"A_collaborationUse_classifier","memberEnd":"Classifier-collaborationUse A_collaborationUse_classifier-classifier","ownedEnd":[{"$type":"Property","$id":"A_collaborationUse_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","subsettedProperty":"Element-owner","association":"A_collaborationUse_classifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_collaborationUse_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_attribute_classifier","$ns":"uml","name":"A_attribute_classifier","memberEnd":"Classifier-attribute A_attribute_classifier-classifier","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_attribute_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Feature-featuringClassifier RedefinableElement-redefinitionContext","association":"A_attribute_classifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_attribute_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedUseCase_classifier","$ns":"uml","name":"A_ownedUseCase_classifier","memberEnd":"Classifier-ownedUseCase A_ownedUseCase_classifier-classifier","ownedEnd":[{"$type":"Property","$id":"A_ownedUseCase_classifier-classifier","$ns":"uml","name":"classifier","type":"Classifier","subsettedProperty":"NamedElement-namespace","association":"A_ownedUseCase_classifier","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedUseCase_classifier-classifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameter_ownerFormalParam","$ns":"uml","name":"A_ownedParameter_ownerFormalParam","memberEnd":"BehavioralFeature-ownedParameter A_ownedParameter_ownerFormalParam-ownerFormalParam","ownedEnd":[{"$type":"Property","$id":"A_ownedParameter_ownerFormalParam-ownerFormalParam","$ns":"uml","name":"ownerFormalParam","type":"BehavioralFeature","subsettedProperty":"NamedElement-namespace","association":"A_ownedParameter_ownerFormalParam","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedParameter_ownerFormalParam-ownerFormalParam-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_raisedException_behavioralFeature","$ns":"uml","name":"A_raisedException_behavioralFeature","memberEnd":"BehavioralFeature-raisedException A_raisedException_behavioralFeature-behavioralFeature","ownedEnd":[{"$type":"Property","$id":"A_raisedException_behavioralFeature-behavioralFeature","$ns":"uml","name":"behavioralFeature","type":"BehavioralFeature","association":"A_raisedException_behavioralFeature","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_raisedException_behavioralFeature-behavioralFeature-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_raisedException_behavioralFeature-behavioralFeature-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_ownedParameterSet_behavioralFeature","$ns":"uml","name":"A_ownedParameterSet_behavioralFeature","memberEnd":"BehavioralFeature-ownedParameterSet A_ownedParameterSet_behavioralFeature-behavioralFeature","ownedEnd":[{"$type":"Property","$id":"A_ownedParameterSet_behavioralFeature-behavioralFeature","$ns":"uml","name":"behavioralFeature","type":"BehavioralFeature","subsettedProperty":"NamedElement-namespace","association":"A_ownedParameterSet_behavioralFeature","lowerValue":[{"$type":"LiteralInteger","$id":"A_ownedParameterSet_behavioralFeature-behavioralFeature-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_method_specification","$ns":"uml","name":"A_method_specification","memberEnd":"BehavioralFeature-method Behavior-specification"},{"$type":"Association","$id":"A_contract_substitution","$ns":"uml","name":"A_contract_substitution","memberEnd":"Substitution-contract A_contract_substitution-substitution","ownedEnd":[{"$type":"Property","$id":"A_contract_substitution-substitution","$ns":"uml","name":"substitution","type":"Substitution","subsettedProperty":"A_supplier_supplierDependency-supplierDependency","association":"A_contract_substitution","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_contract_substitution-substitution-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_contract_substitution-substitution-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Package","$id":"Actions","$ns":"uml","name":"Actions","packageImport":[{"$type":"PackageImport","$id":"_packageImport.0","$ns":"uml","importedPackage":"Classification"},{"$type":"PackageImport","$id":"_packageImport.1","$ns":"uml","importedPackage":"StructuredClassifiers"},{"$type":"PackageImport","$id":"_packageImport.2","$ns":"uml","importedPackage":"CommonStructure"},{"$type":"PackageImport","$id":"_packageImport.3","$ns":"uml","importedPackage":"Activities"},{"$type":"PackageImport","$id":"_packageImport.4","$ns":"uml","importedPackage":"CommonBehavior"}],"packagedElement":[{"$type":"Class","$id":"ValueSpecificationAction","$ns":"uml","name":"ValueSpecificationAction","ownedComment":[{"$type":"Comment","$id":"ValueSpecificationAction-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecificationAction","body":"A ValueSpecificationAction is an Action that evaluates a ValueSpecification and provides a result."}],"ownedRule":[{"$type":"Constraint","$id":"ValueSpecificationAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ValueSpecificationAction","ownedComment":[{"$type":"Comment","$id":"ValueSpecificationAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecificationAction-multiplicity","body":"The multiplicity of the result OutputPin is 1..1"}],"specification":[{"$type":"OpaqueExpression","$id":"ValueSpecificationAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"ValueSpecificationAction-compatible_type","$ns":"uml","name":"compatible_type","constrainedElement":"ValueSpecificationAction","ownedComment":[{"$type":"Comment","$id":"ValueSpecificationAction-compatible_type-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecificationAction-compatible_type","body":"The type of the value ValueSpecification must conform to the type of the result OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ValueSpecificationAction-compatible_type-_specification","$ns":"uml","language":"OCL","body":"value.type.conformsTo(result.type)"}]}],"generalization":[{"$type":"Generalization","$id":"ValueSpecificationAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ValueSpecificationAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_valueSpecificationAction","ownedComment":[{"$type":"Comment","$id":"ValueSpecificationAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecificationAction-result","body":"The OutputPin on which the result value is placed."}]},{"$type":"Property","$id":"ValueSpecificationAction-value","$ns":"uml","name":"value","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_value_valueSpecificationAction","ownedComment":[{"$type":"Comment","$id":"ValueSpecificationAction-value-_ownedComment.0","$ns":"uml","annotatedElement":"ValueSpecificationAction-value","body":"The ValueSpecification to be evaluated."}]}]},{"$type":"Class","$id":"VariableAction","$ns":"uml","name":"VariableAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"VariableAction-_ownedComment.0","$ns":"uml","annotatedElement":"VariableAction","body":"VariableAction is an abstract class for Actions that operate on a specified Variable."}],"ownedRule":[{"$type":"Constraint","$id":"VariableAction-scope_of_variable","$ns":"uml","name":"scope_of_variable","constrainedElement":"VariableAction","ownedComment":[{"$type":"Comment","$id":"VariableAction-scope_of_variable-_ownedComment.0","$ns":"uml","annotatedElement":"VariableAction-scope_of_variable","body":"The VariableAction must be in the scope of the variable."}],"specification":[{"$type":"OpaqueExpression","$id":"VariableAction-scope_of_variable-_specification","$ns":"uml","language":"OCL","body":"variable.isAccessibleBy(self)"}]}],"generalization":[{"$type":"Generalization","$id":"VariableAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"VariableAction-variable","$ns":"uml","name":"variable","type":"Variable","association":"A_variable_variableAction","ownedComment":[{"$type":"Comment","$id":"VariableAction-variable-_ownedComment.0","$ns":"uml","annotatedElement":"VariableAction-variable","body":"The Variable to be read or written."}]}]},{"$type":"Class","$id":"WriteLinkAction","$ns":"uml","name":"WriteLinkAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"WriteLinkAction-_ownedComment.0","$ns":"uml","annotatedElement":"WriteLinkAction","body":"WriteLinkAction is an abstract class for LinkActions that create and destroy links."}],"ownedRule":[{"$type":"Constraint","$id":"WriteLinkAction-allow_access","$ns":"uml","name":"allow_access","constrainedElement":"WriteLinkAction","ownedComment":[{"$type":"Comment","$id":"WriteLinkAction-allow_access-_ownedComment.0","$ns":"uml","annotatedElement":"WriteLinkAction-allow_access","body":"The visibility of at least one end must allow access from the context Classifier of the WriteLinkAction."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteLinkAction-allow_access-_specification","$ns":"uml","language":"OCL","body":"endData.end->exists(end |\r\n  end.type=_'context' or\r\n  end.visibility=VisibilityKind::public or \r\n  end.visibility=VisibilityKind::protected and\r\n  endData.end->exists(other | \r\n    other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"WriteLinkAction-_generalization.0","$ns":"uml","general":"LinkAction"}]},{"$type":"Class","$id":"WriteStructuralFeatureAction","$ns":"uml","name":"WriteStructuralFeatureAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction","body":"WriteStructuralFeatureAction is an abstract class for StructuralFeatureActions that change StructuralFeature values."}],"ownedRule":[{"$type":"Constraint","$id":"WriteStructuralFeatureAction-multiplicity_of_result","$ns":"uml","name":"multiplicity_of_result","constrainedElement":"WriteStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-multiplicity_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-multiplicity_of_result","body":"The multiplicity of the result OutputPin must be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteStructuralFeatureAction-multiplicity_of_result-_specification","$ns":"uml","language":"OCL","body":"result <> null implies result.is(1,1)"}]},{"$type":"Constraint","$id":"WriteStructuralFeatureAction-type_of_value","$ns":"uml","name":"type_of_value","constrainedElement":"WriteStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-type_of_value-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-type_of_value","body":"The type of the value InputPin must conform to the type of the structuralFeature."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteStructuralFeatureAction-type_of_value-_specification","$ns":"uml","language":"OCL","body":"value <> null implies value.type.conformsTo(structuralFeature.type)"}]},{"$type":"Constraint","$id":"WriteStructuralFeatureAction-multiplicity_of_value","$ns":"uml","name":"multiplicity_of_value","constrainedElement":"WriteStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-multiplicity_of_value-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-multiplicity_of_value","body":"The multiplicity of the value InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteStructuralFeatureAction-multiplicity_of_value-_specification","$ns":"uml","language":"OCL","body":"value<>null implies value.is(1,1)"}]},{"$type":"Constraint","$id":"WriteStructuralFeatureAction-type_of_result","$ns":"uml","name":"type_of_result","constrainedElement":"WriteStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-type_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-type_of_result","body":"The type of the result OutputPin is the same as the type of the inherited object InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteStructuralFeatureAction-type_of_result-_specification","$ns":"uml","language":"OCL","body":"result <> null implies result.type = object.type"}]}],"generalization":[{"$type":"Generalization","$id":"WriteStructuralFeatureAction-_generalization.0","$ns":"uml","general":"StructuralFeatureAction"}],"ownedAttribute":[{"$type":"Property","$id":"WriteStructuralFeatureAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_writeStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-result","body":"The OutputPin on which is put the input object as modified by the WriteStructuralFeatureAction."}],"lowerValue":[{"$type":"LiteralInteger","$id":"WriteStructuralFeatureAction-result-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"WriteStructuralFeatureAction-value","$ns":"uml","name":"value","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_value_writeStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"WriteStructuralFeatureAction-value-_ownedComment.0","$ns":"uml","annotatedElement":"WriteStructuralFeatureAction-value","body":"The InputPin that provides the value to be added or removed from the StructuralFeature."}],"lowerValue":[{"$type":"LiteralInteger","$id":"WriteStructuralFeatureAction-value-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"WriteVariableAction","$ns":"uml","name":"WriteVariableAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"WriteVariableAction-_ownedComment.0","$ns":"uml","annotatedElement":"WriteVariableAction","body":"WriteVariableAction is an abstract class for VariableActions that change Variable values."}],"ownedRule":[{"$type":"Constraint","$id":"WriteVariableAction-value_type","$ns":"uml","name":"value_type","constrainedElement":"WriteVariableAction","ownedComment":[{"$type":"Comment","$id":"WriteVariableAction-value_type-_ownedComment.0","$ns":"uml","annotatedElement":"WriteVariableAction-value_type","body":"The type of the value InputPin must conform to the type of the variable."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteVariableAction-value_type-_specification","$ns":"uml","language":"OCL","body":"value <> null implies value.type.conformsTo(variable.type)"}]},{"$type":"Constraint","$id":"WriteVariableAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"WriteVariableAction","ownedComment":[{"$type":"Comment","$id":"WriteVariableAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"WriteVariableAction-multiplicity","body":"The multiplicity of the value InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"WriteVariableAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"value<>null implies value.is(1,1)"}]}],"generalization":[{"$type":"Generalization","$id":"WriteVariableAction-_generalization.0","$ns":"uml","general":"VariableAction"}],"ownedAttribute":[{"$type":"Property","$id":"WriteVariableAction-value","$ns":"uml","name":"value","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_value_writeVariableAction","ownedComment":[{"$type":"Comment","$id":"WriteVariableAction-value-_ownedComment.0","$ns":"uml","annotatedElement":"WriteVariableAction-value","body":"The InputPin that gives the value to be added or removed from the Variable."}],"lowerValue":[{"$type":"LiteralInteger","$id":"WriteVariableAction-value-_lowerValue","$ns":"uml"}]}]},{"$type":"Enumeration","$id":"ExpansionKind","$ns":"uml","name":"ExpansionKind","ownedComment":[{"$type":"Comment","$id":"ExpansionKind-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionKind","body":"ExpansionKind is an enumeration type used to specify how an ExpansionRegion executes its contents."}],"ownedLiteral":[{"$type":"EnumerationLiteral","$id":"ExpansionKind-parallel","$ns":"uml","name":"parallel","ownedComment":[{"$type":"Comment","$id":"ExpansionKind-parallel-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionKind-parallel","body":"The content of the ExpansionRegion is executed concurrently for the elements of the input collections."}]},{"$type":"EnumerationLiteral","$id":"ExpansionKind-iterative","$ns":"uml","name":"iterative","ownedComment":[{"$type":"Comment","$id":"ExpansionKind-iterative-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionKind-iterative","body":"The content of the ExpansionRegion is executed iteratively for the elements of the input collections, in the order of the input elements, if the collections are ordered."}]},{"$type":"EnumerationLiteral","$id":"ExpansionKind-stream","$ns":"uml","name":"stream","ownedComment":[{"$type":"Comment","$id":"ExpansionKind-stream-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionKind-stream","body":"A stream of input collection elements flows into a single execution of the content of the ExpansionRegion, in the order of the collection elements if the input collections are ordered."}]}]},{"$type":"Class","$id":"AcceptCallAction","$ns":"uml","name":"AcceptCallAction","ownedComment":[{"$type":"Comment","$id":"AcceptCallAction-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptCallAction","body":"An AcceptCallAction is an AcceptEventAction that handles the receipt of a synchronous call request. In addition to the values from the Operation input parameters, the Action produces an output that is needed later to supply the information to the ReplyAction necessary to return control to the caller. An AcceptCallAction is for synchronous calls. If it is used to handle an asynchronous call, execution of the subsequent ReplyAction will complete immediately with no effect."}],"ownedRule":[{"$type":"Constraint","$id":"AcceptCallAction-result_pins","$ns":"uml","name":"result_pins","constrainedElement":"AcceptCallAction","ownedComment":[{"$type":"Comment","$id":"AcceptCallAction-result_pins-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptCallAction-result_pins","body":"The number of result OutputPins must be the same as the number of input (in and inout) ownedParameters of the Operation specified by the trigger Event. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptCallAction-result_pins-_specification","$ns":"uml","language":"OCL","body":"let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in\r\nresult->size() = parameter->size() and\r\nSequence{1..result->size()}->forAll(i | \r\n\tparameter->at(i).type.conformsTo(result->at(i).type) and \r\n\tparameter->at(i).isOrdered = result->at(i).isOrdered and\r\n\tparameter->at(i).compatibleWith(result->at(i)))"}]},{"$type":"Constraint","$id":"AcceptCallAction-trigger_call_event","$ns":"uml","name":"trigger_call_event","constrainedElement":"AcceptCallAction","ownedComment":[{"$type":"Comment","$id":"AcceptCallAction-trigger_call_event-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptCallAction-trigger_call_event","body":"The action must have exactly one trigger, which must be for a CallEvent."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptCallAction-trigger_call_event-_specification","$ns":"uml","language":"OCL","body":"trigger->size()=1 and\r\ntrigger->asSequence()->first().event.oclIsKindOf(CallEvent)\r\n"}]},{"$type":"Constraint","$id":"AcceptCallAction-unmarshall","$ns":"uml","name":"unmarshall","constrainedElement":"AcceptCallAction","ownedComment":[{"$type":"Comment","$id":"AcceptCallAction-unmarshall-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptCallAction-unmarshall","body":"isUnmrashall must be true for an AcceptCallAction."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptCallAction-unmarshall-_specification","$ns":"uml","language":"OCL","body":"isUnmarshall = true"}]}],"generalization":[{"$type":"Generalization","$id":"AcceptCallAction-_generalization.0","$ns":"uml","general":"AcceptEventAction"}],"ownedAttribute":[{"$type":"Property","$id":"AcceptCallAction-returnInformation","$ns":"uml","name":"returnInformation","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_returnInformation_acceptCallAction","ownedComment":[{"$type":"Comment","$id":"AcceptCallAction-returnInformation-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptCallAction-returnInformation","body":"An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model."}]}]},{"$type":"Class","$id":"AcceptEventAction","$ns":"uml","name":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction","body":"An AcceptEventAction is an Action that waits for the occurrence of one or more specific Events."}],"ownedRule":[{"$type":"Constraint","$id":"AcceptEventAction-one_output_pin","$ns":"uml","name":"one_output_pin","constrainedElement":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-one_output_pin-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-one_output_pin","body":"If isUnmarshall=false and any of the triggers are for SignalEvents or TimeEvents, there must be exactly one result OutputPin with multiplicity 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptEventAction-one_output_pin-_specification","$ns":"uml","language":"OCL","body":"not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies \r\n\toutput->size() = 1 and output->first().is(1,1)"}]},{"$type":"Constraint","$id":"AcceptEventAction-no_input_pins","$ns":"uml","name":"no_input_pins","constrainedElement":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-no_input_pins-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-no_input_pins","body":"AcceptEventActions may have no input pins."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptEventAction-no_input_pins-_specification","$ns":"uml","language":"OCL","body":"input->size() = 0"}]},{"$type":"Constraint","$id":"AcceptEventAction-no_output_pins","$ns":"uml","name":"no_output_pins","constrainedElement":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-no_output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-no_output_pins","body":"There are no OutputPins if the trigger events are only ChangeEvents and/or CallEvents when this action is an instance of AcceptEventAction and not an instance of a descendant of AcceptEventAction (such as AcceptCallAction)."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptEventAction-no_output_pins-_specification","$ns":"uml","language":"OCL","body":"(self.oclIsTypeOf(AcceptEventAction) and\r\n   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or  \r\n                             event.oclIsKindOf(CallEvent))))\r\nimplies output->size() = 0"}]},{"$type":"Constraint","$id":"AcceptEventAction-unmarshall_signal_events","$ns":"uml","name":"unmarshall_signal_events","constrainedElement":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-unmarshall_signal_events-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-unmarshall_signal_events","body":"If isUnmarshall is true (and this is not an AcceptCallAction), there must be exactly one trigger, which is for a SignalEvent. The number of result output pins must be the same as the number of attributes of the signal. The type and ordering of each result output pin must be the same as the corresponding attribute of the signal. The multiplicity of each result output pin must be compatible with the multiplicity of the corresponding attribute."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptEventAction-unmarshall_signal_events-_specification","$ns":"uml","language":"OCL","body":"isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies\r\n\ttrigger->size()=1 and\r\n\ttrigger->asSequence()->first().event.oclIsKindOf(SignalEvent) and\r\n\tlet attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() in\r\n\tattribute->size()>0 and result->size() = attribute->size() and\r\n\tSequence{1..result->size()}->forAll(i | \r\n\t\tresult->at(i).type = attribute->at(i).type and \r\n\t\tresult->at(i).isOrdered = attribute->at(i).isOrdered and\r\n\t\tresult->at(i).includesMultiplicity(attribute->at(i)))"}]},{"$type":"Constraint","$id":"AcceptEventAction-conforming_type","$ns":"uml","name":"conforming_type","constrainedElement":"AcceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-conforming_type-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-conforming_type","body":"If isUnmarshall=false and all the triggers are for SignalEvents, then the type of the single result OutputPin must either be null or all the signals must conform to it."}],"specification":[{"$type":"OpaqueExpression","$id":"AcceptEventAction-conforming_type-_specification","$ns":"uml","language":"OCL","body":"not isUnmarshall implies \r\n\tresult->isEmpty() or\r\n\tlet type: Type = result->first().type in\r\n\ttype=null or \r\n\t\t(trigger->forAll(event.oclIsKindOf(SignalEvent)) and \r\n\t\t trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))"}]}],"generalization":[{"$type":"Generalization","$id":"AcceptEventAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"AcceptEventAction-isUnmarshall","$ns":"uml","name":"isUnmarshall","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-isUnmarshall-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-isUnmarshall","body":"Indicates whether there is a single OutputPin for a SignalEvent occurrence, or multiple OutputPins for attribute values of the instance of the Signal associated with a SignalEvent occurrence."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"AcceptEventAction-isUnmarshall-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"AcceptEventAction-result","$ns":"uml","name":"result","type":"OutputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_acceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-result","body":"OutputPins holding the values received from an Event occurrence."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"AcceptEventAction-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"AcceptEventAction-result-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"AcceptEventAction-trigger","$ns":"uml","name":"trigger","type":"Trigger","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_trigger_acceptEventAction","ownedComment":[{"$type":"Comment","$id":"AcceptEventAction-trigger-_ownedComment.0","$ns":"uml","annotatedElement":"AcceptEventAction-trigger","body":"The Triggers specifying the Events of which the AcceptEventAction waits for occurrences."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"AcceptEventAction-trigger-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"Action","$ns":"uml","name":"Action","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Action-_ownedComment.0","$ns":"uml","annotatedElement":"Action","body":"An Action is the fundamental unit of executable functionality. The execution of an Action represents some transformation or processing in the modeled system. Actions provide the ExecutableNodes within Activities and may also be used within Interactions."}],"generalization":[{"$type":"Generalization","$id":"Action-_generalization.0","$ns":"uml","general":"ExecutableNode"}],"ownedAttribute":[{"$type":"Property","$id":"Action-context","$ns":"uml","name":"context","type":"Classifier","isReadOnly":"true","isDerived":"true","association":"A_context_action","ownedComment":[{"$type":"Comment","$id":"Action-context-_ownedComment.0","$ns":"uml","annotatedElement":"Action-context","body":"The context Classifier of the Behavior that contains this Action, or the Behavior itself if it has no context."}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-context-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Action-input","$ns":"uml","name":"input","type":"InputPin","isOrdered":"true","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_input_action","ownedComment":[{"$type":"Comment","$id":"Action-input-_ownedComment.0","$ns":"uml","annotatedElement":"Action-input","body":"The ordered set of InputPins representing the inputs to the Action."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-input-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-input-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Action-isLocallyReentrant","$ns":"uml","name":"isLocallyReentrant","ownedComment":[{"$type":"Comment","$id":"Action-isLocallyReentrant-_ownedComment.0","$ns":"uml","annotatedElement":"Action-isLocallyReentrant","body":"If true, the Action can begin a new, concurrent execution, even if there is already another execution of the Action ongoing. If false, the Action cannot begin a new execution until any previous execution has completed."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Action-isLocallyReentrant-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"Action-localPostcondition","$ns":"uml","name":"localPostcondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_localPostcondition_action","ownedComment":[{"$type":"Comment","$id":"Action-localPostcondition-_ownedComment.0","$ns":"uml","annotatedElement":"Action-localPostcondition","body":"A Constraint that must be satisfied when execution of the Action is completed."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-localPostcondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-localPostcondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Action-localPrecondition","$ns":"uml","name":"localPrecondition","type":"Constraint","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_localPrecondition_action","ownedComment":[{"$type":"Comment","$id":"Action-localPrecondition-_ownedComment.0","$ns":"uml","annotatedElement":"Action-localPrecondition","body":"A Constraint that must be satisfied when execution of the Action is started."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-localPrecondition-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-localPrecondition-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Action-output","$ns":"uml","name":"output","type":"OutputPin","isOrdered":"true","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_output_action","ownedComment":[{"$type":"Comment","$id":"Action-output-_ownedComment.0","$ns":"uml","annotatedElement":"Action-output","body":"The ordered set of OutputPins representing outputs from the Action."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-output-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-output-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"Action-context.1","$ns":"uml","name":"context","isQuery":"true","bodyCondition":"Action-context.1-spec","ownedComment":[{"$type":"Comment","$id":"Action-context.1-_ownedComment.0","$ns":"uml","annotatedElement":"Action-context.1","body":"The derivation for the context property."}],"ownedRule":[{"$type":"Constraint","$id":"Action-context.1-spec","$ns":"uml","name":"spec","constrainedElement":"Action-context.1 Action-context","specification":[{"$type":"OpaqueExpression","$id":"Action-context.1-spec-_specification","$ns":"uml","language":"OCL","body":"result = (let behavior: Behavior = self.containingBehavior() in\r\nif behavior=null then null\r\nelse if behavior._'context' = null then behavior\r\nelse behavior._'context'\r\nendif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Action-context.1-result","$ns":"uml","name":"result","type":"Classifier","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"Action-context.1-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Action-allActions","$ns":"uml","name":"allActions","isQuery":"true","bodyCondition":"Action-allActions-spec","ownedComment":[{"$type":"Comment","$id":"Action-allActions-_ownedComment.0","$ns":"uml","annotatedElement":"Action-allActions","body":"Return this Action and all Actions contained directly or indirectly in it. By default only the Action itself is returned, but the operation is overridden for StructuredActivityNodes."}],"ownedRule":[{"$type":"Constraint","$id":"Action-allActions-spec","$ns":"uml","name":"spec","constrainedElement":"Action-allActions","specification":[{"$type":"OpaqueExpression","$id":"Action-allActions-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Action-allActions-result","$ns":"uml","name":"result","type":"Action","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-allActions-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-allActions-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Action-allOwnedNodes","$ns":"uml","name":"allOwnedNodes","isQuery":"true","bodyCondition":"Action-allOwnedNodes-spec","ownedComment":[{"$type":"Comment","$id":"Action-allOwnedNodes-_ownedComment.0","$ns":"uml","annotatedElement":"Action-allOwnedNodes","body":"Returns all the ActivityNodes directly or indirectly owned by this Action. This includes at least all the Pins of the Action."}],"ownedRule":[{"$type":"Constraint","$id":"Action-allOwnedNodes-spec","$ns":"uml","name":"spec","constrainedElement":"Action-allOwnedNodes","specification":[{"$type":"OpaqueExpression","$id":"Action-allOwnedNodes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (input.oclAsType(Pin)->asSet()->union(output->asSet()))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Action-allOwnedNodes-result","$ns":"uml","name":"result","type":"ActivityNode","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Action-allOwnedNodes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Action-allOwnedNodes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"Action-containingBehavior","$ns":"uml","name":"containingBehavior","isQuery":"true","bodyCondition":"Action-containingBehavior-spec","ownedRule":[{"$type":"Constraint","$id":"Action-containingBehavior-spec","$ns":"uml","name":"spec","constrainedElement":"Action-containingBehavior","specification":[{"$type":"OpaqueExpression","$id":"Action-containingBehavior-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if inStructuredNode<>null then inStructuredNode.containingBehavior() \r\nelse if activity<>null then activity\r\nelse interaction \r\nendif\r\nendif\r\n)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"Action-containingBehavior-result","$ns":"uml","name":"result","type":"Behavior","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"Action-containingBehavior-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ActionInputPin","$ns":"uml","name":"ActionInputPin","ownedComment":[{"$type":"Comment","$id":"ActionInputPin-_ownedComment.0","$ns":"uml","annotatedElement":"ActionInputPin","body":"An ActionInputPin is a kind of InputPin that executes an Action to determine the values to input to another Action."}],"ownedRule":[{"$type":"Constraint","$id":"ActionInputPin-input_pin","$ns":"uml","name":"input_pin","constrainedElement":"ActionInputPin","ownedComment":[{"$type":"Comment","$id":"ActionInputPin-input_pin-_ownedComment.0","$ns":"uml","annotatedElement":"ActionInputPin-input_pin","body":"The fromAction of an ActionInputPin must only have ActionInputPins as InputPins."}],"specification":[{"$type":"OpaqueExpression","$id":"ActionInputPin-input_pin-_specification","$ns":"uml","language":"OCL","body":"fromAction.input->forAll(oclIsKindOf(ActionInputPin))"}]},{"$type":"Constraint","$id":"ActionInputPin-one_output_pin","$ns":"uml","name":"one_output_pin","constrainedElement":"ActionInputPin","ownedComment":[{"$type":"Comment","$id":"ActionInputPin-one_output_pin-_ownedComment.0","$ns":"uml","annotatedElement":"ActionInputPin-one_output_pin","body":"The fromAction of an ActionInputPin must have exactly one OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ActionInputPin-one_output_pin-_specification","$ns":"uml","language":"OCL","body":"fromAction.output->size() = 1"}]},{"$type":"Constraint","$id":"ActionInputPin-no_control_or_object_flow","$ns":"uml","name":"no_control_or_object_flow","constrainedElement":"ActionInputPin","ownedComment":[{"$type":"Comment","$id":"ActionInputPin-no_control_or_object_flow-_ownedComment.0","$ns":"uml","annotatedElement":"ActionInputPin-no_control_or_object_flow","body":"The fromAction of an ActionInputPin cannot have ActivityEdges coming into or out of it or its Pins."}],"specification":[{"$type":"OpaqueExpression","$id":"ActionInputPin-no_control_or_object_flow-_specification","$ns":"uml","language":"OCL","body":"fromAction.incoming->union(outgoing)->isEmpty() and\r\nfromAction.input.incoming->isEmpty() and\r\nfromAction.output.outgoing->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"ActionInputPin-_generalization.0","$ns":"uml","general":"InputPin"}],"ownedAttribute":[{"$type":"Property","$id":"ActionInputPin-fromAction","$ns":"uml","name":"fromAction","type":"Action","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_fromAction_actionInputPin","ownedComment":[{"$type":"Comment","$id":"ActionInputPin-fromAction-_ownedComment.0","$ns":"uml","annotatedElement":"ActionInputPin-fromAction","body":"The Action used to provide the values of the ActionInputPin."}]}]},{"$type":"Class","$id":"AddStructuralFeatureValueAction","$ns":"uml","name":"AddStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"AddStructuralFeatureValueAction-_ownedComment.0","$ns":"uml","annotatedElement":"AddStructuralFeatureValueAction","body":"An AddStructuralFeatureValueAction is a WriteStructuralFeatureAction for adding values to a StructuralFeature."}],"ownedRule":[{"$type":"Constraint","$id":"AddStructuralFeatureValueAction-required_value","$ns":"uml","name":"required_value","constrainedElement":"AddStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"AddStructuralFeatureValueAction-required_value-_ownedComment.0","$ns":"uml","annotatedElement":"AddStructuralFeatureValueAction-required_value","body":"A value InputPin is required."}],"specification":[{"$type":"OpaqueExpression","$id":"AddStructuralFeatureValueAction-required_value-_specification","$ns":"uml","language":"OCL","body":"value<>null"}]},{"$type":"Constraint","$id":"AddStructuralFeatureValueAction-insertAt_pin","$ns":"uml","name":"insertAt_pin","constrainedElement":"AddStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"AddStructuralFeatureValueAction-insertAt_pin-_ownedComment.0","$ns":"uml","annotatedElement":"AddStructuralFeatureValueAction-insertAt_pin","body":"AddStructuralFeatureActions adding a value to ordered StructuralFeatures must have a single InputPin for the insertion point with type UnlimitedNatural and multiplicity of 1..1 if isReplaceAll=false, and must have no Input Pin for the insertion point when the StructuralFeature is unordered."}],"specification":[{"$type":"OpaqueExpression","$id":"AddStructuralFeatureValueAction-insertAt_pin-_specification","$ns":"uml","language":"OCL","body":"if not structuralFeature.isOrdered then insertAt = null\nelse \n  not isReplaceAll implies\n  \tinsertAt<>null and \n  \tinsertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))\nendif\n"}]}],"generalization":[{"$type":"Generalization","$id":"AddStructuralFeatureValueAction-_generalization.0","$ns":"uml","general":"WriteStructuralFeatureAction"}],"ownedAttribute":[{"$type":"Property","$id":"AddStructuralFeatureValueAction-insertAt","$ns":"uml","name":"insertAt","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_insertAt_addStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"AddStructuralFeatureValueAction-insertAt-_ownedComment.0","$ns":"uml","annotatedElement":"AddStructuralFeatureValueAction-insertAt","body":"The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures."}],"lowerValue":[{"$type":"LiteralInteger","$id":"AddStructuralFeatureValueAction-insertAt-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"AddStructuralFeatureValueAction-isReplaceAll","$ns":"uml","name":"isReplaceAll","ownedComment":[{"$type":"Comment","$id":"AddStructuralFeatureValueAction-isReplaceAll-_ownedComment.0","$ns":"uml","annotatedElement":"AddStructuralFeatureValueAction-isReplaceAll","body":"Specifies whether existing values of the StructuralFeature should be removed before adding the new value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"AddStructuralFeatureValueAction-isReplaceAll-_defaultValue","$ns":"uml"}]}]},{"$type":"Class","$id":"AddVariableValueAction","$ns":"uml","name":"AddVariableValueAction","ownedComment":[{"$type":"Comment","$id":"AddVariableValueAction-_ownedComment.0","$ns":"uml","annotatedElement":"AddVariableValueAction","body":"An AddVariableValueAction is a WriteVariableAction for adding values to a Variable."}],"ownedRule":[{"$type":"Constraint","$id":"AddVariableValueAction-required_value","$ns":"uml","name":"required_value","constrainedElement":"AddVariableValueAction","ownedComment":[{"$type":"Comment","$id":"AddVariableValueAction-required_value-_ownedComment.0","$ns":"uml","annotatedElement":"AddVariableValueAction-required_value","body":"A value InputPin is required."}],"specification":[{"$type":"OpaqueExpression","$id":"AddVariableValueAction-required_value-_specification","$ns":"uml","language":"OCL","body":"value <> null"}]},{"$type":"Constraint","$id":"AddVariableValueAction-insertAt_pin","$ns":"uml","name":"insertAt_pin","constrainedElement":"AddVariableValueAction","ownedComment":[{"$type":"Comment","$id":"AddVariableValueAction-insertAt_pin-_ownedComment.0","$ns":"uml","annotatedElement":"AddVariableValueAction-insertAt_pin","body":"AddVariableValueActions for ordered Variables must have a single InputPin for the insertion point with type UnlimtedNatural and multiplicity of 1..1 if isReplaceAll=false, otherwise the Action has no InputPin for the insertion point."}],"specification":[{"$type":"OpaqueExpression","$id":"AddVariableValueAction-insertAt_pin-_specification","$ns":"uml","language":"OCL","body":"if not variable.isOrdered then insertAt = null\nelse \n  not isReplaceAll implies\n  \tinsertAt<>null and \n  \tinsertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))\nendif\n"}]}],"generalization":[{"$type":"Generalization","$id":"AddVariableValueAction-_generalization.0","$ns":"uml","general":"WriteVariableAction"}],"ownedAttribute":[{"$type":"Property","$id":"AddVariableValueAction-insertAt","$ns":"uml","name":"insertAt","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_insertAt_addVariableValueAction","ownedComment":[{"$type":"Comment","$id":"AddVariableValueAction-insertAt-_ownedComment.0","$ns":"uml","annotatedElement":"AddVariableValueAction-insertAt","body":"The InputPin that gives the position at which to insert a new value or move an existing value in ordered Variables. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered Variables."}],"lowerValue":[{"$type":"LiteralInteger","$id":"AddVariableValueAction-insertAt-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"AddVariableValueAction-isReplaceAll","$ns":"uml","name":"isReplaceAll","ownedComment":[{"$type":"Comment","$id":"AddVariableValueAction-isReplaceAll-_ownedComment.0","$ns":"uml","annotatedElement":"AddVariableValueAction-isReplaceAll","body":"Specifies whether existing values of the Variable should be removed before adding the new value."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"AddVariableValueAction-isReplaceAll-_defaultValue","$ns":"uml"}]}]},{"$type":"Class","$id":"BroadcastSignalAction","$ns":"uml","name":"BroadcastSignalAction","ownedComment":[{"$type":"Comment","$id":"BroadcastSignalAction-_ownedComment.0","$ns":"uml","annotatedElement":"BroadcastSignalAction","body":"A BroadcastSignalAction is an InvocationAction that transmits a Signal instance to all the potential target objects in the system. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instances are sent out and cannot receive reply values."}],"ownedRule":[{"$type":"Constraint","$id":"BroadcastSignalAction-number_of_arguments","$ns":"uml","name":"number_of_arguments","constrainedElement":"BroadcastSignalAction","ownedComment":[{"$type":"Comment","$id":"BroadcastSignalAction-number_of_arguments-_ownedComment.0","$ns":"uml","annotatedElement":"BroadcastSignalAction-number_of_arguments","body":"The number of argument InputPins must be the same as the number of attributes in the signal."}],"specification":[{"$type":"OpaqueExpression","$id":"BroadcastSignalAction-number_of_arguments-_specification","$ns":"uml","language":"OCL","body":"argument->size() = signal.allAttributes()->size()"}]},{"$type":"Constraint","$id":"BroadcastSignalAction-type_ordering_multiplicity","$ns":"uml","name":"type_ordering_multiplicity","constrainedElement":"BroadcastSignalAction","ownedComment":[{"$type":"Comment","$id":"BroadcastSignalAction-type_ordering_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"BroadcastSignalAction-type_ordering_multiplicity","body":"The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal."}],"specification":[{"$type":"OpaqueExpression","$id":"BroadcastSignalAction-type_ordering_multiplicity-_specification","$ns":"uml","language":"OCL","body":"let attribute: OrderedSet(Property) = signal.allAttributes() in\r\nSequence{1..argument->size()}->forAll(i | \r\n\targument->at(i).type.conformsTo(attribute->at(i).type) and \r\n\targument->at(i).isOrdered = attribute->at(i).isOrdered and\r\n\targument->at(i).compatibleWith(attribute->at(i)))"}]},{"$type":"Constraint","$id":"BroadcastSignalAction-no_onport","$ns":"uml","name":"no_onport","constrainedElement":"BroadcastSignalAction","ownedComment":[{"$type":"Comment","$id":"BroadcastSignalAction-no_onport-_ownedComment.0","$ns":"uml","annotatedElement":"BroadcastSignalAction-no_onport","body":"A BroadcaseSignalAction may not specify onPort."}],"specification":[{"$type":"OpaqueExpression","$id":"BroadcastSignalAction-no_onport-_specification","$ns":"uml","language":"OCL","body":"onPort=null"}]}],"generalization":[{"$type":"Generalization","$id":"BroadcastSignalAction-_generalization.0","$ns":"uml","general":"InvocationAction"}],"ownedAttribute":[{"$type":"Property","$id":"BroadcastSignalAction-signal","$ns":"uml","name":"signal","type":"Signal","association":"A_signal_broadcastSignalAction","ownedComment":[{"$type":"Comment","$id":"BroadcastSignalAction-signal-_ownedComment.0","$ns":"uml","annotatedElement":"BroadcastSignalAction-signal","body":"The Signal whose instances are to be sent."}]}]},{"$type":"Class","$id":"CallAction","$ns":"uml","name":"CallAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"CallAction-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction","body":"CallAction is an abstract class for Actions that invoke a Behavior with given argument values and (if the invocation is synchronous) receive reply values."}],"ownedRule":[{"$type":"Constraint","$id":"CallAction-argument_pins","$ns":"uml","name":"argument_pins","constrainedElement":"CallAction","ownedComment":[{"$type":"Comment","$id":"CallAction-argument_pins-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-argument_pins","body":"The number of argument InputPins must be the same as the number of input (in and inout) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each argument InputPin must be consistent with the corresponding input Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"CallAction-argument_pins-_specification","$ns":"uml","language":"OCL","body":"let parameter: OrderedSet(Parameter) = self.inputParameters() in\r\nargument->size() = parameter->size() and\r\nSequence{1..argument->size()}->forAll(i | \r\n\targument->at(i).type.conformsTo(parameter->at(i).type) and \r\n\targument->at(i).isOrdered = parameter->at(i).isOrdered and\r\n\targument->at(i).compatibleWith(parameter->at(i)))"}]},{"$type":"Constraint","$id":"CallAction-result_pins","$ns":"uml","name":"result_pins","constrainedElement":"CallAction","ownedComment":[{"$type":"Comment","$id":"CallAction-result_pins-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-result_pins","body":"The number of result OutputPins must be the same as the number of output (inout, out and return) ownedParameters of the called Behavior or Operation. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter."}],"specification":[{"$type":"OpaqueExpression","$id":"CallAction-result_pins-_specification","$ns":"uml","language":"OCL","body":"let parameter: OrderedSet(Parameter) = self.outputParameters() in\r\nresult->size() = parameter->size() and\r\nSequence{1..result->size()}->forAll(i | \r\n\tparameter->at(i).type.conformsTo(result->at(i).type) and \r\n\tparameter->at(i).isOrdered = result->at(i).isOrdered and\r\n\tparameter->at(i).compatibleWith(result->at(i)))"}]},{"$type":"Constraint","$id":"CallAction-synchronous_call","$ns":"uml","name":"synchronous_call","constrainedElement":"CallAction","ownedComment":[{"$type":"Comment","$id":"CallAction-synchronous_call-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-synchronous_call","body":"Only synchronous CallActions can have result OutputPins."}],"specification":[{"$type":"OpaqueExpression","$id":"CallAction-synchronous_call-_specification","$ns":"uml","language":"OCL","body":"result->notEmpty() implies isSynchronous"}]}],"generalization":[{"$type":"Generalization","$id":"CallAction-_generalization.0","$ns":"uml","general":"InvocationAction"}],"ownedAttribute":[{"$type":"Property","$id":"CallAction-isSynchronous","$ns":"uml","name":"isSynchronous","ownedComment":[{"$type":"Comment","$id":"CallAction-isSynchronous-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-isSynchronous","body":"If true, the call is synchronous and the caller waits for completion of the invoked Behavior. If false, the call is asynchronous and the caller proceeds immediately and cannot receive return values."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"CallAction-isSynchronous-_defaultValue","$ns":"uml","value":"true"}]},{"$type":"Property","$id":"CallAction-result","$ns":"uml","name":"result","type":"OutputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_callAction","ownedComment":[{"$type":"Comment","$id":"CallAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-result","body":"The OutputPins on which the reply values from the invocation are placed (if the call is synchronous)."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallAction-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallAction-result-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"CallAction-inputParameters","$ns":"uml","name":"inputParameters","isAbstract":"true","isQuery":"true","ownedComment":[{"$type":"Comment","$id":"CallAction-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-inputParameters","body":"Return the in and inout ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)"}],"ownedParameter":[{"$type":"Parameter","$id":"CallAction-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallAction-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallAction-inputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"CallAction-outputParameters","$ns":"uml","name":"outputParameters","isAbstract":"true","isQuery":"true","ownedComment":[{"$type":"Comment","$id":"CallAction-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallAction-outputParameters","body":"Return the inout, out and return ownedParameters of the Behavior or Operation being called. (This operation is abstract and should be overridden by subclasses of CallAction.)"}],"ownedParameter":[{"$type":"Parameter","$id":"CallAction-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallAction-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallAction-outputParameters-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"CallBehaviorAction","$ns":"uml","name":"CallBehaviorAction","ownedComment":[{"$type":"Comment","$id":"CallBehaviorAction-_ownedComment.0","$ns":"uml","annotatedElement":"CallBehaviorAction","body":"A CallBehaviorAction is a CallAction that invokes a Behavior directly. The argument values of the CallBehaviorAction are passed on the input Parameters of the invoked Behavior. If the call is synchronous, the execution of the CallBehaviorAction waits until the execution of the invoked Behavior completes and the values of output Parameters of the Behavior are placed on the result OutputPins. If the call is asynchronous, the CallBehaviorAction completes immediately and no results values can be provided."}],"ownedRule":[{"$type":"Constraint","$id":"CallBehaviorAction-no_onport","$ns":"uml","name":"no_onport","constrainedElement":"CallBehaviorAction","ownedComment":[{"$type":"Comment","$id":"CallBehaviorAction-no_onport-_ownedComment.0","$ns":"uml","annotatedElement":"CallBehaviorAction-no_onport","body":"A CallBehaviorAction may not specify onPort."}],"specification":[{"$type":"OpaqueExpression","$id":"CallBehaviorAction-no_onport-_specification","$ns":"uml","language":"OCL","body":"onPort=null"}]}],"generalization":[{"$type":"Generalization","$id":"CallBehaviorAction-_generalization.0","$ns":"uml","general":"CallAction"}],"ownedAttribute":[{"$type":"Property","$id":"CallBehaviorAction-behavior","$ns":"uml","name":"behavior","type":"Behavior","association":"A_behavior_callBehaviorAction","ownedComment":[{"$type":"Comment","$id":"CallBehaviorAction-behavior-_ownedComment.0","$ns":"uml","annotatedElement":"CallBehaviorAction-behavior","body":"The Behavior being invoked."}]}],"ownedOperation":[{"$type":"Operation","$id":"CallBehaviorAction-outputParameters","$ns":"uml","name":"outputParameters","isQuery":"true","redefinedOperation":"CallAction-outputParameters","bodyCondition":"CallBehaviorAction-outputParameters-spec","ownedComment":[{"$type":"Comment","$id":"CallBehaviorAction-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallBehaviorAction-outputParameters","body":"Return the inout, out and return ownedParameters of the Behavior being called."}],"ownedRule":[{"$type":"Constraint","$id":"CallBehaviorAction-outputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"CallBehaviorAction-outputParameters","specification":[{"$type":"OpaqueExpression","$id":"CallBehaviorAction-outputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (behavior.outputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"CallBehaviorAction-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallBehaviorAction-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallBehaviorAction-outputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"CallBehaviorAction-inputParameters","$ns":"uml","name":"inputParameters","isQuery":"true","redefinedOperation":"CallAction-inputParameters","bodyCondition":"CallBehaviorAction-inputParameters-spec","ownedComment":[{"$type":"Comment","$id":"CallBehaviorAction-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallBehaviorAction-inputParameters","body":"Return the in and inout ownedParameters of the Behavior being called."}],"ownedRule":[{"$type":"Constraint","$id":"CallBehaviorAction-inputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"CallBehaviorAction-inputParameters","specification":[{"$type":"OpaqueExpression","$id":"CallBehaviorAction-inputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (behavior.inputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"CallBehaviorAction-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallBehaviorAction-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallBehaviorAction-inputParameters-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"CallOperationAction","$ns":"uml","name":"CallOperationAction","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction","body":"A CallOperationAction is a CallAction that transmits an Operation call request to the target object, where it may cause the invocation of associated Behavior. The argument values of the CallOperationAction are passed on the input Parameters of the Operation. If call is synchronous, the execution of the CallOperationAction waits until the execution of the invoked Operation completes and the values of output Parameters of the Operation are placed on the result OutputPins. If the call is asynchronous, the CallOperationAction completes immediately and no results values can be provided."}],"ownedRule":[{"$type":"Constraint","$id":"CallOperationAction-type_target_pin","$ns":"uml","name":"type_target_pin","constrainedElement":"CallOperationAction","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-type_target_pin-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction-type_target_pin","body":"If onPort has no value, the operation must be an owned or inherited feature of the type of the target InputPin, otherwise the Port given by onPort must be an owned or inherited feature of the type of the target InputPin, and the Port must have a required or provided Interface with the operation as an owned or inherited feature."}],"specification":[{"$type":"OpaqueExpression","$id":"CallOperationAction-type_target_pin-_specification","$ns":"uml","language":"OCL","body":"if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)\r\nelse target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)\r\nendif"}]}],"generalization":[{"$type":"Generalization","$id":"CallOperationAction-_generalization.0","$ns":"uml","general":"CallAction"}],"ownedAttribute":[{"$type":"Property","$id":"CallOperationAction-operation","$ns":"uml","name":"operation","type":"Operation","association":"A_operation_callOperationAction","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-operation-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction-operation","body":"The Operation being invoked."}]},{"$type":"Property","$id":"CallOperationAction-target","$ns":"uml","name":"target","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_target_callOperationAction","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-target-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction-target","body":"The InputPin that provides the target object to which the Operation call request is sent."}]}],"ownedOperation":[{"$type":"Operation","$id":"CallOperationAction-outputParameters","$ns":"uml","name":"outputParameters","isQuery":"true","redefinedOperation":"CallAction-outputParameters","bodyCondition":"CallOperationAction-outputParameters-spec","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction-outputParameters","body":"Return the inout, out and return ownedParameters of the Operation being called."}],"ownedRule":[{"$type":"Constraint","$id":"CallOperationAction-outputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"CallOperationAction-outputParameters","specification":[{"$type":"OpaqueExpression","$id":"CallOperationAction-outputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (operation.outputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"CallOperationAction-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallOperationAction-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallOperationAction-outputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"CallOperationAction-inputParameters","$ns":"uml","name":"inputParameters","isQuery":"true","redefinedOperation":"CallAction-inputParameters","bodyCondition":"CallOperationAction-inputParameters-spec","ownedComment":[{"$type":"Comment","$id":"CallOperationAction-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"CallOperationAction-inputParameters","body":"Return the in and inout ownedParameters of the Operation being called."}],"ownedRule":[{"$type":"Constraint","$id":"CallOperationAction-inputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"CallOperationAction-inputParameters","specification":[{"$type":"OpaqueExpression","$id":"CallOperationAction-inputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (operation.inputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"CallOperationAction-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CallOperationAction-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CallOperationAction-inputParameters-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"Clause","$ns":"uml","name":"Clause","ownedComment":[{"$type":"Comment","$id":"Clause-_ownedComment.0","$ns":"uml","annotatedElement":"Clause","body":"A Clause is an Element that represents a single branch of a ConditionalNode, including a test and a body section. The body section is executed only if (but not necessarily if) the test section evaluates to true."}],"ownedRule":[{"$type":"Constraint","$id":"Clause-body_output_pins","$ns":"uml","name":"body_output_pins","constrainedElement":"Clause","ownedComment":[{"$type":"Comment","$id":"Clause-body_output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-body_output_pins","body":"The bodyOutput Pins are OutputPins on Actions in the body of the Clause."}],"specification":[{"$type":"OpaqueExpression","$id":"Clause-body_output_pins-_specification","$ns":"uml","language":"OCL","body":"_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)"}]},{"$type":"Constraint","$id":"Clause-decider_output","$ns":"uml","name":"decider_output","constrainedElement":"Clause","ownedComment":[{"$type":"Comment","$id":"Clause-decider_output-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-decider_output","body":"The decider Pin must be on an Action in the test section of the Clause and must be of type Boolean with multiplicity 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"Clause-decider_output-_specification","$ns":"uml","language":"OCL","body":"test.oclAsType(Action).allActions().output->includes(decider) and\r\ndecider.type = Boolean and\r\ndecider.is(1,1)"}]},{"$type":"Constraint","$id":"Clause-test_and_body","$ns":"uml","name":"test_and_body","constrainedElement":"Clause","ownedComment":[{"$type":"Comment","$id":"Clause-test_and_body-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-test_and_body","body":"The test and body parts of a ConditionalNode must be disjoint with each other."}],"specification":[{"$type":"OpaqueExpression","$id":"Clause-test_and_body-_specification","$ns":"uml","language":"OCL","body":"test->intersection(_'body')->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"Clause-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"Clause-body","$ns":"uml","name":"body","type":"ExecutableNode","association":"A_body_clause","ownedComment":[{"$type":"Comment","$id":"Clause-body-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-body","body":"The set of ExecutableNodes that are executed if the test evaluates to true and the Clause is chosen over other Clauses within the ConditionalNode that also have tests that evaluate to true."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Clause-body-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Clause-body-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Clause-bodyOutput","$ns":"uml","name":"bodyOutput","type":"OutputPin","isOrdered":"true","association":"A_bodyOutput_clause","ownedComment":[{"$type":"Comment","$id":"Clause-bodyOutput-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-bodyOutput","body":"The OutputPins on Actions within the body section whose values are moved to the result OutputPins of the containing ConditionalNode after execution of the body."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Clause-bodyOutput-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Clause-bodyOutput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Clause-decider","$ns":"uml","name":"decider","type":"OutputPin","association":"A_decider_clause","ownedComment":[{"$type":"Comment","$id":"Clause-decider-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-decider","body":"An OutputPin on an Action in the test section whose Boolean value determines the result of the test."}]},{"$type":"Property","$id":"Clause-predecessorClause","$ns":"uml","name":"predecessorClause","type":"Clause","association":"A_predecessorClause_successorClause","ownedComment":[{"$type":"Comment","$id":"Clause-predecessorClause-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-predecessorClause","body":"A set of Clauses whose tests must all evaluate to false before this Clause can evaluate its test."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Clause-predecessorClause-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Clause-predecessorClause-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Clause-successorClause","$ns":"uml","name":"successorClause","type":"Clause","association":"A_predecessorClause_successorClause","ownedComment":[{"$type":"Comment","$id":"Clause-successorClause-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-successorClause","body":"A set of Clauses that may not evaluate their tests unless the test for this Clause evaluates to false."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Clause-successorClause-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"Clause-successorClause-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"Clause-test","$ns":"uml","name":"test","type":"ExecutableNode","association":"A_test_clause","ownedComment":[{"$type":"Comment","$id":"Clause-test-_ownedComment.0","$ns":"uml","annotatedElement":"Clause-test","body":"The set of ExecutableNodes that are executed in order to provide a test result for the Clause."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"Clause-test-_upperValue","$ns":"uml","value":"*"}]}]},{"$type":"Class","$id":"ClearAssociationAction","$ns":"uml","name":"ClearAssociationAction","ownedComment":[{"$type":"Comment","$id":"ClearAssociationAction-_ownedComment.0","$ns":"uml","annotatedElement":"ClearAssociationAction","body":"A ClearAssociationAction is an Action that destroys all links of an Association in which a particular object participates."}],"ownedRule":[{"$type":"Constraint","$id":"ClearAssociationAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ClearAssociationAction","ownedComment":[{"$type":"Comment","$id":"ClearAssociationAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ClearAssociationAction-multiplicity","body":"The multiplicity of the object InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ClearAssociationAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"ClearAssociationAction-same_type","$ns":"uml","name":"same_type","constrainedElement":"ClearAssociationAction","ownedComment":[{"$type":"Comment","$id":"ClearAssociationAction-same_type-_ownedComment.0","$ns":"uml","annotatedElement":"ClearAssociationAction-same_type","body":"The type of the InputPin must conform to the type of at least one of the memberEnds of the association."}],"specification":[{"$type":"OpaqueExpression","$id":"ClearAssociationAction-same_type-_specification","$ns":"uml","language":"OCL","body":"association.memberEnd->exists(self.object.type.conformsTo(type))"}]}],"generalization":[{"$type":"Generalization","$id":"ClearAssociationAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ClearAssociationAction-association","$ns":"uml","name":"association","type":"Association","association":"A_association_clearAssociationAction","ownedComment":[{"$type":"Comment","$id":"ClearAssociationAction-association-_ownedComment.0","$ns":"uml","annotatedElement":"ClearAssociationAction-association","body":"The Association to be cleared."}]},{"$type":"Property","$id":"ClearAssociationAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_clearAssociationAction","ownedComment":[{"$type":"Comment","$id":"ClearAssociationAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"ClearAssociationAction-object","body":"The InputPin that gives the object whose participation in the Association is to be cleared."}]}]},{"$type":"Class","$id":"ClearStructuralFeatureAction","$ns":"uml","name":"ClearStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ClearStructuralFeatureAction-_ownedComment.0","$ns":"uml","annotatedElement":"ClearStructuralFeatureAction","body":"A ClearStructuralFeatureAction is a StructuralFeatureAction that removes all values of a StructuralFeature."}],"ownedRule":[{"$type":"Constraint","$id":"ClearStructuralFeatureAction-type_of_result","$ns":"uml","name":"type_of_result","constrainedElement":"ClearStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ClearStructuralFeatureAction-type_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ClearStructuralFeatureAction-type_of_result","body":"The type of the result OutputPin is the same as the type of the inherited object InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ClearStructuralFeatureAction-type_of_result-_specification","$ns":"uml","language":"OCL","body":"result<>null implies result.type = object.type"}]},{"$type":"Constraint","$id":"ClearStructuralFeatureAction-multiplicity_of_result","$ns":"uml","name":"multiplicity_of_result","constrainedElement":"ClearStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ClearStructuralFeatureAction-multiplicity_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ClearStructuralFeatureAction-multiplicity_of_result","body":"The multiplicity of the result OutputPin must be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ClearStructuralFeatureAction-multiplicity_of_result-_specification","$ns":"uml","language":"OCL","body":"result<>null implies result.is(1,1)"}]}],"generalization":[{"$type":"Generalization","$id":"ClearStructuralFeatureAction-_generalization.0","$ns":"uml","general":"StructuralFeatureAction"}],"ownedAttribute":[{"$type":"Property","$id":"ClearStructuralFeatureAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_clearStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ClearStructuralFeatureAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ClearStructuralFeatureAction-result","body":"The OutputPin on which is put the input object as modified by the ClearStructuralFeatureAction."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ClearStructuralFeatureAction-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ClearVariableAction","$ns":"uml","name":"ClearVariableAction","ownedComment":[{"$type":"Comment","$id":"ClearVariableAction-_ownedComment.0","$ns":"uml","annotatedElement":"ClearVariableAction","body":"A ClearVariableAction is a VariableAction that removes all values of a Variable."}],"generalization":[{"$type":"Generalization","$id":"ClearVariableAction-_generalization.0","$ns":"uml","general":"VariableAction"}]},{"$type":"Class","$id":"ConditionalNode","$ns":"uml","name":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode","body":"A ConditionalNode is a StructuredActivityNode that chooses one among some number of alternative collections of ExecutableNodes to execute."}],"ownedRule":[{"$type":"Constraint","$id":"ConditionalNode-result_no_incoming","$ns":"uml","name":"result_no_incoming","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-result_no_incoming-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-result_no_incoming","body":"The result OutputPins have no incoming edges."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-result_no_incoming-_specification","$ns":"uml","language":"OCL","body":"result.incoming->isEmpty()"}]},{"$type":"Constraint","$id":"ConditionalNode-no_input_pins","$ns":"uml","name":"no_input_pins","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-no_input_pins-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-no_input_pins","body":"A ConditionalNode has no InputPins."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-no_input_pins-_specification","$ns":"uml","language":"OCL","body":"input->isEmpty()"}]},{"$type":"Constraint","$id":"ConditionalNode-one_clause_with_executable_node","$ns":"uml","name":"one_clause_with_executable_node","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-one_clause_with_executable_node-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-one_clause_with_executable_node","body":"No ExecutableNode in the ConditionNode may appear in the test or body part of more than one clause of a ConditionalNode."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-one_clause_with_executable_node-_specification","$ns":"uml","language":"OCL","body":"node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | \r\n\tself.clause->select(test->union(_'body')->includes(n))->size()=1)"}]},{"$type":"Constraint","$id":"ConditionalNode-matching_output_pins","$ns":"uml","name":"matching_output_pins","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-matching_output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-matching_output_pins","body":"Each clause of a ConditionalNode must have the same number of bodyOutput pins as the ConditionalNode has result OutputPins, and each clause bodyOutput Pin must be compatible with the corresponding result OutputPin (by positional order) in type, multiplicity, ordering, and uniqueness."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-matching_output_pins-_specification","$ns":"uml","language":"OCL","body":"clause->forAll(\r\n\tbodyOutput->size()=self.result->size() and\r\n\tSequence{1..self.result->size()}->forAll(i |\r\n\t\tbodyOutput->at(i).type.conformsTo(result->at(i).type) and\r\n\t\tbodyOutput->at(i).isOrdered = result->at(i).isOrdered and\r\n\t\tbodyOutput->at(i).isUnique = result->at(i).isUnique and\r\n\t\tbodyOutput->at(i).compatibleWith(result->at(i))))"}]},{"$type":"Constraint","$id":"ConditionalNode-executable_nodes","$ns":"uml","name":"executable_nodes","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-executable_nodes-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-executable_nodes","body":"The union of the ExecutableNodes in the test and body parts of all clauses must be the same as the subset of nodes contained in the ConditionalNode (considered as a StructuredActivityNode) that are ExecutableNodes."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-executable_nodes-_specification","$ns":"uml","language":"OCL","body":"clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)"}]},{"$type":"Constraint","$id":"ConditionalNode-clause_no_predecessor","$ns":"uml","name":"clause_no_predecessor","constrainedElement":"ConditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-clause_no_predecessor-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-clause_no_predecessor","body":"No two clauses within a ConditionalNode may be predecessorClauses of each other, either directly or indirectly."}],"specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-clause_no_predecessor-_specification","$ns":"uml","language":"OCL","body":"clause->closure(predecessorClause)->intersection(clause)->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"ConditionalNode-_generalization.0","$ns":"uml","general":"StructuredActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"ConditionalNode-clause","$ns":"uml","name":"clause","type":"Clause","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_clause_conditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-clause-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-clause","body":"The set of Clauses composing the ConditionalNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConditionalNode-clause-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"ConditionalNode-isAssured","$ns":"uml","name":"isAssured","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-isAssured-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-isAssured","body":"If true, the modeler asserts that the test for at least one Clause of the ConditionalNode will succeed."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ConditionalNode-isAssured-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ConditionalNode-isDeterminate","$ns":"uml","name":"isDeterminate","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-isDeterminate-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-isDeterminate","body":"If true, the modeler asserts that the test for at most one Clause of the ConditionalNode will succeed."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ConditionalNode-isDeterminate-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ConditionalNode-result","$ns":"uml","name":"result","type":"OutputPin","isOrdered":"true","aggregation":"composite","redefinedProperty":"StructuredActivityNode-structuredNodeOutput","association":"A_result_conditionalNode","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-result-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-result","body":"The OutputPins that onto which are moved values from the bodyOutputs of the Clause selected for execution."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConditionalNode-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConditionalNode-result-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"ConditionalNode-allActions","$ns":"uml","name":"allActions","isQuery":"true","redefinedOperation":"Action-allActions","bodyCondition":"ConditionalNode-allActions-spec","ownedComment":[{"$type":"Comment","$id":"ConditionalNode-allActions-_ownedComment.0","$ns":"uml","annotatedElement":"ConditionalNode-allActions","body":"Return only this ConditionalNode. This prevents Actions within the ConditionalNode from having their OutputPins used as bodyOutputs or decider Pins in containing LoopNodes or ConditionalNodes."}],"ownedRule":[{"$type":"Constraint","$id":"ConditionalNode-allActions-spec","$ns":"uml","name":"spec","constrainedElement":"ConditionalNode-allActions","specification":[{"$type":"OpaqueExpression","$id":"ConditionalNode-allActions-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ConditionalNode-allActions-result","$ns":"uml","name":"result","type":"Action","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ConditionalNode-allActions-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ConditionalNode-allActions-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"CreateLinkAction","$ns":"uml","name":"CreateLinkAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkAction-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkAction","body":"A CreateLinkAction is a WriteLinkAction for creating links."}],"ownedRule":[{"$type":"Constraint","$id":"CreateLinkAction-association_not_abstract","$ns":"uml","name":"association_not_abstract","constrainedElement":"CreateLinkAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkAction-association_not_abstract-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkAction-association_not_abstract","body":"The Association cannot be an abstract Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateLinkAction-association_not_abstract-_specification","$ns":"uml","language":"OCL","body":"not self.association().isAbstract"}]}],"generalization":[{"$type":"Generalization","$id":"CreateLinkAction-_generalization.0","$ns":"uml","general":"WriteLinkAction"}],"ownedAttribute":[{"$type":"Property","$id":"CreateLinkAction-endData","$ns":"uml","name":"endData","type":"LinkEndCreationData","aggregation":"composite","redefinedProperty":"LinkAction-endData","association":"A_endData_createLinkAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkAction-endData-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkAction-endData","body":"The LinkEndData that specifies the values to be placed on the Association ends for the new link."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"CreateLinkAction-endData-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"CreateLinkAction-endData-_lowerValue","$ns":"uml","value":"2"}]}]},{"$type":"Class","$id":"CreateLinkObjectAction","$ns":"uml","name":"CreateLinkObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkObjectAction","body":"A CreateLinkObjectAction is a CreateLinkAction for creating link objects (AssociationClasse instances)."}],"ownedRule":[{"$type":"Constraint","$id":"CreateLinkObjectAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"CreateLinkObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkObjectAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkObjectAction-multiplicity","body":"The multiplicity of the OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateLinkObjectAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"CreateLinkObjectAction-type_of_result","$ns":"uml","name":"type_of_result","constrainedElement":"CreateLinkObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkObjectAction-type_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkObjectAction-type_of_result","body":"The type of the result OutputPin must be the same as the Association of the CreateLinkObjectAction."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateLinkObjectAction-type_of_result-_specification","$ns":"uml","language":"OCL","body":"result.type = association()"}]},{"$type":"Constraint","$id":"CreateLinkObjectAction-association_class","$ns":"uml","name":"association_class","constrainedElement":"CreateLinkObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkObjectAction-association_class-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkObjectAction-association_class","body":"The Association must be an AssociationClass."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateLinkObjectAction-association_class-_specification","$ns":"uml","language":"OCL","body":"self.association().oclIsKindOf(AssociationClass)"}]}],"generalization":[{"$type":"Generalization","$id":"CreateLinkObjectAction-_generalization.0","$ns":"uml","general":"CreateLinkAction"}],"ownedAttribute":[{"$type":"Property","$id":"CreateLinkObjectAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_createLinkObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateLinkObjectAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"CreateLinkObjectAction-result","body":"The output pin on which the newly created link object is placed."}]}]},{"$type":"Class","$id":"CreateObjectAction","$ns":"uml","name":"CreateObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction","body":"A CreateObjectAction is an Action that creates an instance of the specified Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"CreateObjectAction-classifier_not_abstract","$ns":"uml","name":"classifier_not_abstract","constrainedElement":"CreateObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-classifier_not_abstract-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-classifier_not_abstract","body":"The classifier cannot be abstract."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateObjectAction-classifier_not_abstract-_specification","$ns":"uml","language":"OCL","body":"not classifier.isAbstract "}]},{"$type":"Constraint","$id":"CreateObjectAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"CreateObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-multiplicity","body":"The multiplicity of the result OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateObjectAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"CreateObjectAction-classifier_not_association_class","$ns":"uml","name":"classifier_not_association_class","constrainedElement":"CreateObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-classifier_not_association_class-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-classifier_not_association_class","body":"The classifier cannot be an AssociationClass."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateObjectAction-classifier_not_association_class-_specification","$ns":"uml","language":"OCL","body":"not classifier.oclIsKindOf(AssociationClass)"}]},{"$type":"Constraint","$id":"CreateObjectAction-same_type","$ns":"uml","name":"same_type","constrainedElement":"CreateObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-same_type-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-same_type","body":"The type of the result OutputPin must be the same as the classifier of the CreateObjectAction."}],"specification":[{"$type":"OpaqueExpression","$id":"CreateObjectAction-same_type-_specification","$ns":"uml","language":"OCL","body":"result.type = classifier"}]}],"generalization":[{"$type":"Generalization","$id":"CreateObjectAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"CreateObjectAction-classifier","$ns":"uml","name":"classifier","type":"Classifier","association":"A_classifier_createObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-classifier","body":"The Classifier to be instantiated."}]},{"$type":"Property","$id":"CreateObjectAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_createObjectAction","ownedComment":[{"$type":"Comment","$id":"CreateObjectAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"CreateObjectAction-result","body":"The OutputPin on which the newly created object is placed."}]}]},{"$type":"Class","$id":"DestroyLinkAction","$ns":"uml","name":"DestroyLinkAction","ownedComment":[{"$type":"Comment","$id":"DestroyLinkAction-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyLinkAction","body":"A DestroyLinkAction is a WriteLinkAction that destroys links (including link objects)."}],"generalization":[{"$type":"Generalization","$id":"DestroyLinkAction-_generalization.0","$ns":"uml","general":"WriteLinkAction"}],"ownedAttribute":[{"$type":"Property","$id":"DestroyLinkAction-endData","$ns":"uml","name":"endData","type":"LinkEndDestructionData","aggregation":"composite","redefinedProperty":"LinkAction-endData","association":"A_endData_destroyLinkAction","ownedComment":[{"$type":"Comment","$id":"DestroyLinkAction-endData-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyLinkAction-endData","body":"The LinkEndData that the values of the Association ends for the links to be destroyed."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"DestroyLinkAction-endData-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"DestroyLinkAction-endData-_lowerValue","$ns":"uml","value":"2"}]}]},{"$type":"Class","$id":"DestroyObjectAction","$ns":"uml","name":"DestroyObjectAction","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction","body":"A DestroyObjectAction is an Action that destroys objects."}],"ownedRule":[{"$type":"Constraint","$id":"DestroyObjectAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"DestroyObjectAction","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction-multiplicity","body":"The multiplicity of the targe IinputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"DestroyObjectAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"target.is(1,1)"}]},{"$type":"Constraint","$id":"DestroyObjectAction-no_type","$ns":"uml","name":"no_type","constrainedElement":"DestroyObjectAction","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-no_type-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction-no_type","body":"The target InputPin has no type."}],"specification":[{"$type":"OpaqueExpression","$id":"DestroyObjectAction-no_type-_specification","$ns":"uml","language":"OCL","body":"target.type= null"}]}],"generalization":[{"$type":"Generalization","$id":"DestroyObjectAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"DestroyObjectAction-isDestroyLinks","$ns":"uml","name":"isDestroyLinks","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-isDestroyLinks-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction-isDestroyLinks","body":"Specifies whether links in which the object participates are destroyed along with the object."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"DestroyObjectAction-isDestroyLinks-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"DestroyObjectAction-isDestroyOwnedObjects","$ns":"uml","name":"isDestroyOwnedObjects","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-isDestroyOwnedObjects-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction-isDestroyOwnedObjects","body":"Specifies whether objects owned by the object (via composition) are destroyed along with the object."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"DestroyObjectAction-isDestroyOwnedObjects-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"DestroyObjectAction-target","$ns":"uml","name":"target","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_target_destroyObjectAction","ownedComment":[{"$type":"Comment","$id":"DestroyObjectAction-target-_ownedComment.0","$ns":"uml","annotatedElement":"DestroyObjectAction-target","body":"The InputPin providing the object to be destroyed."}]}]},{"$type":"Class","$id":"ExpansionNode","$ns":"uml","name":"ExpansionNode","ownedComment":[{"$type":"Comment","$id":"ExpansionNode-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionNode","body":"An ExpansionNode is an ObjectNode used to indicate a collection input or output for an ExpansionRegion. A collection input of an ExpansionRegion contains a collection that is broken into its individual elements inside the region, whose content is executed once per element. A collection output of an ExpansionRegion combines individual elements produced by the execution of the region into a collection for use outside the region."}],"ownedRule":[{"$type":"Constraint","$id":"ExpansionNode-region_as_input_or_output","$ns":"uml","name":"region_as_input_or_output","constrainedElement":"ExpansionNode","ownedComment":[{"$type":"Comment","$id":"ExpansionNode-region_as_input_or_output-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionNode-region_as_input_or_output","body":"One of regionAsInput or regionAsOutput must be non-empty, but not both."}],"specification":[{"$type":"OpaqueExpression","$id":"ExpansionNode-region_as_input_or_output-_specification","$ns":"uml","language":"OCL","body":"regionAsInput->notEmpty() xor regionAsOutput->notEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"ExpansionNode-_generalization.0","$ns":"uml","general":"ObjectNode"}],"ownedAttribute":[{"$type":"Property","$id":"ExpansionNode-regionAsInput","$ns":"uml","name":"regionAsInput","type":"ExpansionRegion","association":"A_inputElement_regionAsInput","ownedComment":[{"$type":"Comment","$id":"ExpansionNode-regionAsInput-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionNode-regionAsInput","body":"The ExpansionRegion for which the ExpansionNode is an input."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExpansionNode-regionAsInput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ExpansionNode-regionAsOutput","$ns":"uml","name":"regionAsOutput","type":"ExpansionRegion","association":"A_outputElement_regionAsOutput","ownedComment":[{"$type":"Comment","$id":"ExpansionNode-regionAsOutput-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionNode-regionAsOutput","body":"The ExpansionRegion for which the ExpansionNode is an output."}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExpansionNode-regionAsOutput-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ExpansionRegion","$ns":"uml","name":"ExpansionRegion","ownedComment":[{"$type":"Comment","$id":"ExpansionRegion-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionRegion","body":"An ExpansionRegion is a StructuredActivityNode that executes its content multiple times corresponding to elements of input collection(s)."}],"generalization":[{"$type":"Generalization","$id":"ExpansionRegion-_generalization.0","$ns":"uml","general":"StructuredActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"ExpansionRegion-inputElement","$ns":"uml","name":"inputElement","type":"ExpansionNode","association":"A_inputElement_regionAsInput","ownedComment":[{"$type":"Comment","$id":"ExpansionRegion-inputElement-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionRegion-inputElement","body":"The ExpansionNodes that hold the input collections for the ExpansionRegion."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ExpansionRegion-inputElement-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"ExpansionRegion-mode","$ns":"uml","name":"mode","type":"ExpansionKind","ownedComment":[{"$type":"Comment","$id":"ExpansionRegion-mode-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionRegion-mode","body":"The mode in which the ExpansionRegion executes its contents. If parallel, executions are concurrent. If iterative, executions are sequential. If stream, a stream of values flows into a single execution."}],"defaultValue":[{"$type":"InstanceValue","$id":"ExpansionRegion-mode-_defaultValue","$ns":"uml","type":"ExpansionKind","instance":"ExpansionKind-iterative"}]},{"$type":"Property","$id":"ExpansionRegion-outputElement","$ns":"uml","name":"outputElement","type":"ExpansionNode","association":"A_outputElement_regionAsOutput","ownedComment":[{"$type":"Comment","$id":"ExpansionRegion-outputElement-_ownedComment.0","$ns":"uml","annotatedElement":"ExpansionRegion-outputElement","body":"The ExpansionNodes that form the output collections of the ExpansionRegion."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ExpansionRegion-outputElement-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ExpansionRegion-outputElement-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"InputPin","$ns":"uml","name":"InputPin","ownedComment":[{"$type":"Comment","$id":"InputPin-_ownedComment.0","$ns":"uml","annotatedElement":"InputPin","body":"An InputPin is a Pin that holds input values to be consumed by an Action."}],"ownedRule":[{"$type":"Constraint","$id":"InputPin-outgoing_edges_structured_only","$ns":"uml","name":"outgoing_edges_structured_only","constrainedElement":"InputPin","ownedComment":[{"$type":"Comment","$id":"InputPin-outgoing_edges_structured_only-_ownedComment.0","$ns":"uml","annotatedElement":"InputPin-outgoing_edges_structured_only","body":"An InputPin may have outgoing ActivityEdges only when it is owned by a StructuredActivityNode, and these edges must target a node contained (directly or indirectly) in the owning StructuredActivityNode."}],"specification":[{"$type":"OpaqueExpression","$id":"InputPin-outgoing_edges_structured_only-_specification","$ns":"uml","language":"OCL","body":"outgoing->notEmpty() implies\r\n\taction<>null and\r\n\taction.oclIsKindOf(StructuredActivityNode) and\r\n\taction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)"}]}],"generalization":[{"$type":"Generalization","$id":"InputPin-_generalization.0","$ns":"uml","general":"Pin"}]},{"$type":"Class","$id":"InvocationAction","$ns":"uml","name":"InvocationAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"InvocationAction-_ownedComment.0","$ns":"uml","annotatedElement":"InvocationAction","body":"InvocationAction is an abstract class for the various actions that request Behavior invocation.\r\n"}],"generalization":[{"$type":"Generalization","$id":"InvocationAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"InvocationAction-argument","$ns":"uml","name":"argument","type":"InputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Action-input","association":"A_argument_invocationAction","ownedComment":[{"$type":"Comment","$id":"InvocationAction-argument-_ownedComment.0","$ns":"uml","annotatedElement":"InvocationAction-argument","body":"The InputPins that provide the argument values passed in the invocation request."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"InvocationAction-argument-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"InvocationAction-argument-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"InvocationAction-onPort","$ns":"uml","name":"onPort","type":"Port","association":"A_onPort_invocationAction","ownedComment":[{"$type":"Comment","$id":"InvocationAction-onPort-_ownedComment.0","$ns":"uml","annotatedElement":"InvocationAction-onPort","body":"For CallOperationActions, SendSignalActions, and SendObjectActions, an optional Port of the target object through which the invocation request is sent."}],"lowerValue":[{"$type":"LiteralInteger","$id":"InvocationAction-onPort-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"LinkAction","$ns":"uml","name":"LinkAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"LinkAction-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction","body":"LinkAction is an abstract class for all Actions that identify the links to be acted on using LinkEndData."}],"ownedRule":[{"$type":"Constraint","$id":"LinkAction-same_pins","$ns":"uml","name":"same_pins","constrainedElement":"LinkAction","ownedComment":[{"$type":"Comment","$id":"LinkAction-same_pins-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-same_pins","body":"The inputValue InputPins is the same as the union of all the InputPins referenced by the endData."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkAction-same_pins-_specification","$ns":"uml","language":"OCL","body":"inputValue->asBag()=endData.allPins()"}]},{"$type":"Constraint","$id":"LinkAction-same_association","$ns":"uml","name":"same_association","constrainedElement":"LinkAction","ownedComment":[{"$type":"Comment","$id":"LinkAction-same_association-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-same_association","body":"The ends of the endData must all be from the same Association and include all and only the memberEnds of that association."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkAction-same_association-_specification","$ns":"uml","language":"OCL","body":"endData.end = self.association().memberEnd->asBag()"}]},{"$type":"Constraint","$id":"LinkAction-not_static","$ns":"uml","name":"not_static","constrainedElement":"LinkAction","ownedComment":[{"$type":"Comment","$id":"LinkAction-not_static-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-not_static","body":"The ends of the endData must not be static."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkAction-not_static-_specification","$ns":"uml","language":"OCL","body":"endData->forAll(not end.isStatic)"}]}],"generalization":[{"$type":"Generalization","$id":"LinkAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"LinkAction-endData","$ns":"uml","name":"endData","type":"LinkEndData","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_endData_linkAction","ownedComment":[{"$type":"Comment","$id":"LinkAction-endData-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-endData","body":"The LinkEndData identifying the values on the ends of the links acting on by this LinkAction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkAction-endData-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkAction-endData-_lowerValue","$ns":"uml","value":"2"}]},{"$type":"Property","$id":"LinkAction-inputValue","$ns":"uml","name":"inputValue","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_inputValue_linkAction","ownedComment":[{"$type":"Comment","$id":"LinkAction-inputValue-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-inputValue","body":"InputPins used by the LinkEndData of the LinkAction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkAction-inputValue-_upperValue","$ns":"uml","value":"*"}]}],"ownedOperation":[{"$type":"Operation","$id":"LinkAction-association","$ns":"uml","name":"association","isQuery":"true","bodyCondition":"LinkAction-association-spec","ownedComment":[{"$type":"Comment","$id":"LinkAction-association-_ownedComment.0","$ns":"uml","annotatedElement":"LinkAction-association","body":"Returns the Association acted on by this LinkAction."}],"ownedRule":[{"$type":"Constraint","$id":"LinkAction-association-spec","$ns":"uml","name":"spec","constrainedElement":"LinkAction-association","specification":[{"$type":"OpaqueExpression","$id":"LinkAction-association-spec-_specification","$ns":"uml","language":"OCL","body":"result = (endData->asSequence()->first().end.association)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LinkAction-association-result","$ns":"uml","name":"result","type":"Association","direction":"return"}]}]},{"$type":"Class","$id":"LinkEndCreationData","$ns":"uml","name":"LinkEndCreationData","ownedComment":[{"$type":"Comment","$id":"LinkEndCreationData-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndCreationData","body":"LinkEndCreationData is LinkEndData used to provide values for one end of a link to be created by a CreateLinkAction."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndCreationData-insertAt_pin","$ns":"uml","name":"insertAt_pin","constrainedElement":"LinkEndCreationData","ownedComment":[{"$type":"Comment","$id":"LinkEndCreationData-insertAt_pin-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndCreationData-insertAt_pin","body":"LinkEndCreationData for ordered Association ends must have a single insertAt InputPin for the insertion point with type UnlimitedNatural and multiplicity of 1..1, if isReplaceAll=false, and must have no InputPin for the insertion point when the association ends are unordered."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndCreationData-insertAt_pin-_specification","$ns":"uml","language":"OCL","body":"if  not end.isOrdered\nthen insertAt = null\nelse\n\tnot isReplaceAll=false implies\n\tinsertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))\nendif\n"}]}],"generalization":[{"$type":"Generalization","$id":"LinkEndCreationData-_generalization.0","$ns":"uml","general":"LinkEndData"}],"ownedAttribute":[{"$type":"Property","$id":"LinkEndCreationData-insertAt","$ns":"uml","name":"insertAt","type":"InputPin","association":"A_insertAt_linkEndCreationData","ownedComment":[{"$type":"Comment","$id":"LinkEndCreationData-insertAt-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndCreationData-insertAt","body":"For ordered Association ends, the InputPin that provides the position where the new link should be inserted or where an existing link should be moved to. The type of the insertAt InputPin is UnlimitedNatural, but the input cannot be zero. It is omitted for Association ends that are not ordered."}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndCreationData-insertAt-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LinkEndCreationData-isReplaceAll","$ns":"uml","name":"isReplaceAll","ownedComment":[{"$type":"Comment","$id":"LinkEndCreationData-isReplaceAll-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndCreationData-isReplaceAll","body":"Specifies whether the existing links emanating from the object on this end should be destroyed before creating a new link."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"LinkEndCreationData-isReplaceAll-_defaultValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"LinkEndCreationData-allPins","$ns":"uml","name":"allPins","isQuery":"true","redefinedOperation":"LinkEndData-allPins","bodyCondition":"LinkEndCreationData-allPins-spec","ownedComment":[{"$type":"Comment","$id":"LinkEndCreationData-allPins-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndCreationData-allPins","body":"Adds the insertAt InputPin (if any) to the set of all Pins."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndCreationData-allPins-spec","$ns":"uml","name":"spec","constrainedElement":"LinkEndCreationData-allPins","specification":[{"$type":"OpaqueExpression","$id":"LinkEndCreationData-allPins-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.LinkEndData::allPins()->including(insertAt))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LinkEndCreationData-allPins-result","$ns":"uml","name":"result","type":"InputPin","isUnique":"false","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkEndCreationData-allPins-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndCreationData-allPins-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"LinkEndData","$ns":"uml","name":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData","body":"LinkEndData is an Element that identifies on end of a link to be read or written by a LinkAction. As a link (that is not a link object) cannot be passed as a runtime value to or from an Action, it is instead identified by its end objects and qualifier values, if any. A LinkEndData instance provides these values for a single Association end."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndData-same_type","$ns":"uml","name":"same_type","constrainedElement":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-same_type-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-same_type","body":"The type of the value InputPin conforms to the type of the Association end."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-same_type-_specification","$ns":"uml","language":"OCL","body":"value<>null implies value.type.conformsTo(end.type)"}]},{"$type":"Constraint","$id":"LinkEndData-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-multiplicity","body":"The multiplicity of the value InputPin must be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-multiplicity-_specification","$ns":"uml","language":"OCL","body":"value<>null implies value.is(1,1)"}]},{"$type":"Constraint","$id":"LinkEndData-end_object_input_pin","$ns":"uml","name":"end_object_input_pin","constrainedElement":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-end_object_input_pin-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-end_object_input_pin","body":"The value InputPin is not also the qualifier value InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-end_object_input_pin-_specification","$ns":"uml","language":"OCL","body":"value->excludesAll(qualifier.value)"}]},{"$type":"Constraint","$id":"LinkEndData-property_is_association_end","$ns":"uml","name":"property_is_association_end","constrainedElement":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-property_is_association_end-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-property_is_association_end","body":"The Property must be an Association memberEnd."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-property_is_association_end-_specification","$ns":"uml","language":"OCL","body":"end.association <> null"}]},{"$type":"Constraint","$id":"LinkEndData-qualifiers","$ns":"uml","name":"qualifiers","constrainedElement":"LinkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-qualifiers-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-qualifiers","body":"The qualifiers must be qualifiers of the Association end."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-qualifiers-_specification","$ns":"uml","language":"OCL","body":"end.qualifier->includesAll(qualifier.qualifier)"}]}],"generalization":[{"$type":"Generalization","$id":"LinkEndData-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"LinkEndData-end","$ns":"uml","name":"end","type":"Property","association":"A_end_linkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-end-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-end","body":"The Association end for which this LinkEndData specifies values."}]},{"$type":"Property","$id":"LinkEndData-qualifier","$ns":"uml","name":"qualifier","type":"QualifierValue","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_qualifier_linkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-qualifier","body":"A set of QualifierValues used to provide values for the qualifiers of the end."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkEndData-qualifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndData-qualifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LinkEndData-value","$ns":"uml","name":"value","type":"InputPin","association":"A_value_linkEndData","ownedComment":[{"$type":"Comment","$id":"LinkEndData-value-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-value","body":"The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the \"open\" end for a ReadLinkAction."}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndData-value-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"LinkEndData-allPins","$ns":"uml","name":"allPins","isQuery":"true","bodyCondition":"LinkEndData-allPins-spec","ownedComment":[{"$type":"Comment","$id":"LinkEndData-allPins-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndData-allPins","body":"Returns all the InputPins referenced by this LinkEndData. By default this includes the value and qualifier InputPins, but subclasses may override the operation to add other InputPins."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndData-allPins-spec","$ns":"uml","name":"spec","constrainedElement":"LinkEndData-allPins","specification":[{"$type":"OpaqueExpression","$id":"LinkEndData-allPins-spec-_specification","$ns":"uml","language":"OCL","body":"result = (value->asBag()->union(qualifier.value))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LinkEndData-allPins-result","$ns":"uml","name":"result","type":"InputPin","isUnique":"false","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkEndData-allPins-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndData-allPins-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"LinkEndDestructionData","$ns":"uml","name":"LinkEndDestructionData","ownedComment":[{"$type":"Comment","$id":"LinkEndDestructionData-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndDestructionData","body":"LinkEndDestructionData is LinkEndData used to provide values for one end of a link to be destroyed by a DestroyLinkAction."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndDestructionData-destroyAt_pin","$ns":"uml","name":"destroyAt_pin","constrainedElement":"LinkEndDestructionData","ownedComment":[{"$type":"Comment","$id":"LinkEndDestructionData-destroyAt_pin-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndDestructionData-destroyAt_pin","body":"LinkEndDestructionData for ordered, nonunique Association ends must have a single destroyAt InputPin if isDestroyDuplicates is false, which must be of type UnlimitedNatural and have a multiplicity of 1..1. Otherwise, the action has no destroyAt input pin."}],"specification":[{"$type":"OpaqueExpression","$id":"LinkEndDestructionData-destroyAt_pin-_specification","$ns":"uml","language":"OCL","body":"if  not end.isOrdered or end.isUnique or isDestroyDuplicates\r\nthen destroyAt = null\r\nelse\r\n\tdestroyAt <> null and \r\n\tdestroyAt->forAll(type=UnlimitedNatural and is(1,1))\r\nendif\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"LinkEndDestructionData-_generalization.0","$ns":"uml","general":"LinkEndData"}],"ownedAttribute":[{"$type":"Property","$id":"LinkEndDestructionData-destroyAt","$ns":"uml","name":"destroyAt","type":"InputPin","association":"A_destroyAt_linkEndDestructionData","ownedComment":[{"$type":"Comment","$id":"LinkEndDestructionData-destroyAt-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndDestructionData-destroyAt","body":"The InputPin that provides the position of an existing link to be destroyed in an ordered, nonunique Association end. The type of the destroyAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndDestructionData-destroyAt-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LinkEndDestructionData-isDestroyDuplicates","$ns":"uml","name":"isDestroyDuplicates","ownedComment":[{"$type":"Comment","$id":"LinkEndDestructionData-isDestroyDuplicates-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndDestructionData-isDestroyDuplicates","body":"Specifies whether to destroy duplicates of the value in nonunique Association ends."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"LinkEndDestructionData-isDestroyDuplicates-_defaultValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"LinkEndDestructionData-allPins","$ns":"uml","name":"allPins","isQuery":"true","redefinedOperation":"LinkEndData-allPins","bodyCondition":"LinkEndDestructionData-allPins-spec","ownedComment":[{"$type":"Comment","$id":"LinkEndDestructionData-allPins-_ownedComment.0","$ns":"uml","annotatedElement":"LinkEndDestructionData-allPins","body":"Adds the destroyAt InputPin (if any) to the set of all Pins."}],"ownedRule":[{"$type":"Constraint","$id":"LinkEndDestructionData-allPins-spec","$ns":"uml","name":"spec","constrainedElement":"LinkEndDestructionData-allPins","specification":[{"$type":"OpaqueExpression","$id":"LinkEndDestructionData-allPins-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.LinkEndData::allPins()->including(destroyAt))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LinkEndDestructionData-allPins-result","$ns":"uml","name":"result","type":"InputPin","isUnique":"false","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LinkEndDestructionData-allPins-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LinkEndDestructionData-allPins-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"LoopNode","$ns":"uml","name":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode","body":"A LoopNode is a StructuredActivityNode that represents an iterative loop with setup, test, and body sections."}],"ownedRule":[{"$type":"Constraint","$id":"LoopNode-result_no_incoming","$ns":"uml","name":"result_no_incoming","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-result_no_incoming-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-result_no_incoming","body":"The result OutputPins have no incoming edges."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-result_no_incoming-_specification","$ns":"uml","language":"OCL","body":"result.incoming->isEmpty()"}]},{"$type":"Constraint","$id":"LoopNode-input_edges","$ns":"uml","name":"input_edges","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-input_edges-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-input_edges","body":"The loopVariableInputs must not have outgoing edges."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-input_edges-_specification","$ns":"uml","language":"OCL","body":"loopVariableInput.outgoing->isEmpty()"}]},{"$type":"Constraint","$id":"LoopNode-executable_nodes","$ns":"uml","name":"executable_nodes","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-executable_nodes-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-executable_nodes","body":"The union of the ExecutableNodes in the setupPart, test and bodyPart of a LoopNode must be the same as the subset of nodes contained in the LoopNode (considered as a StructuredActivityNode) that are ExecutableNodes."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-executable_nodes-_specification","$ns":"uml","language":"OCL","body":"setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()"}]},{"$type":"Constraint","$id":"LoopNode-body_output_pins","$ns":"uml","name":"body_output_pins","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-body_output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-body_output_pins","body":"The bodyOutput pins are OutputPins on Actions in the body of the LoopNode."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-body_output_pins-_specification","$ns":"uml","language":"OCL","body":"bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)"}]},{"$type":"Constraint","$id":"LoopNode-setup_test_and_body","$ns":"uml","name":"setup_test_and_body","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-setup_test_and_body-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-setup_test_and_body","body":"The test and body parts of a ConditionalNode must be disjoint with each other."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-setup_test_and_body-_specification","$ns":"uml","language":"OCL","body":"setupPart->intersection(test)->isEmpty() and\r\nsetupPart->intersection(bodyPart)->isEmpty() and\r\ntest->intersection(bodyPart)->isEmpty()"}]},{"$type":"Constraint","$id":"LoopNode-matching_output_pins","$ns":"uml","name":"matching_output_pins","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-matching_output_pins-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-matching_output_pins","body":"A LoopNode must have the same number of bodyOutput Pins as loopVariables, and each bodyOutput Pin must be compatible with the corresponding loopVariable (by positional order) in type, multiplicity, ordering and uniqueness."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-matching_output_pins-_specification","$ns":"uml","language":"OCL","body":"bodyOutput->size()=loopVariable->size() and\r\nSequence{1..loopVariable->size()}->forAll(i |\r\n\tbodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) and\r\n\tbodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered and\r\n\tbodyOutput->at(i).isUnique = loopVariable->at(i).isUnique and\r\n\tloopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))"}]},{"$type":"Constraint","$id":"LoopNode-matching_loop_variables","$ns":"uml","name":"matching_loop_variables","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-matching_loop_variables-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-matching_loop_variables","body":"A LoopNode must have the same number of loopVariableInputs and loopVariables, and they must match in type, uniqueness and multiplicity."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-matching_loop_variables-_specification","$ns":"uml","language":"OCL","body":"loopVariableInput->size()=loopVariable->size() and\r\nloopVariableInput.type=loopVariable.type and\r\nloopVariableInput.isUnique=loopVariable.isUnique and\r\nloopVariableInput.lower=loopVariable.lower and\r\nloopVariableInput.upper=loopVariable.upper"}]},{"$type":"Constraint","$id":"LoopNode-matching_result_pins","$ns":"uml","name":"matching_result_pins","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-matching_result_pins-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-matching_result_pins","body":"A LoopNode must have the same number of result OutputPins and loopVariables, and they must match in type, uniqueness and multiplicity."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-matching_result_pins-_specification","$ns":"uml","language":"OCL","body":"result->size()=loopVariable->size() and\r\nresult.type=loopVariable.type and\r\nresult.isUnique=loopVariable.isUnique and\r\nresult.lower=loopVariable.lower and\r\nresult.upper=loopVariable.upper"}]},{"$type":"Constraint","$id":"LoopNode-loop_variable_outgoing","$ns":"uml","name":"loop_variable_outgoing","constrainedElement":"LoopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-loop_variable_outgoing-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-loop_variable_outgoing","body":"All ActivityEdges outgoing from loopVariable OutputPins must have targets within the LoopNode."}],"specification":[{"$type":"OpaqueExpression","$id":"LoopNode-loop_variable_outgoing-_specification","$ns":"uml","language":"OCL","body":"allOwnedNodes()->includesAll(loopVariable.outgoing.target)"}]}],"generalization":[{"$type":"Generalization","$id":"LoopNode-_generalization.0","$ns":"uml","general":"StructuredActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"LoopNode-bodyOutput","$ns":"uml","name":"bodyOutput","type":"OutputPin","isOrdered":"true","association":"A_bodyOutput_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-bodyOutput-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-bodyOutput","body":"The OutputPins on Actions within the bodyPart, the values of which are moved to the loopVariable OutputPins after the completion of each execution of the bodyPart, before the next iteration of the loop begins or before the loop exits."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-bodyOutput-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-bodyOutput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-bodyPart","$ns":"uml","name":"bodyPart","type":"ExecutableNode","association":"A_bodyPart_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-bodyPart-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-bodyPart","body":"The set of ExecutableNodes that perform the repetitive computations of the loop. The bodyPart is executed as long as the test section produces a true value."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-bodyPart-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-bodyPart-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-decider","$ns":"uml","name":"decider","type":"OutputPin","association":"A_decider_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-decider-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-decider","body":"An OutputPin on an Action in the test section whose Boolean value determines whether to continue executing the loop bodyPart."}]},{"$type":"Property","$id":"LoopNode-isTestedFirst","$ns":"uml","name":"isTestedFirst","ownedComment":[{"$type":"Comment","$id":"LoopNode-isTestedFirst-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-isTestedFirst","body":"If true, the test is performed before the first execution of the bodyPart. If false, the bodyPart is executed once before the test is performed."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"LoopNode-isTestedFirst-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-loopVariable","$ns":"uml","name":"loopVariable","type":"OutputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_loopVariable_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-loopVariable-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-loopVariable","body":"A list of OutputPins that hold the values of the loop variables during an execution of the loop. When the test fails, the values are moved to the result OutputPins of the loop."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-loopVariable-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-loopVariable-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-loopVariableInput","$ns":"uml","name":"loopVariableInput","type":"InputPin","isOrdered":"true","aggregation":"composite","redefinedProperty":"StructuredActivityNode-structuredNodeInput","association":"A_loopVariableInput_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-loopVariableInput-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-loopVariableInput","body":"A list of InputPins whose values are moved into the loopVariable Pins before the first iteration of the loop."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-loopVariableInput-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-loopVariableInput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-result","$ns":"uml","name":"result","type":"OutputPin","isOrdered":"true","aggregation":"composite","redefinedProperty":"StructuredActivityNode-structuredNodeOutput","association":"A_result_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-result-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-result","body":"A list of OutputPins that receive the loopVariable values after the last iteration of the loop and constitute the output of the LoopNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-result-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-setupPart","$ns":"uml","name":"setupPart","type":"ExecutableNode","association":"A_setupPart_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-setupPart-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-setupPart","body":"The set of ExecutableNodes executed before the first iteration of the loop, in order to initialize values or perform other setup computations."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-setupPart-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-setupPart-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"LoopNode-test","$ns":"uml","name":"test","type":"ExecutableNode","association":"A_test_loopNode","ownedComment":[{"$type":"Comment","$id":"LoopNode-test-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-test","body":"The set of ExecutableNodes executed in order to provide the test result for the loop."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-test-_upperValue","$ns":"uml","value":"*"}]}],"ownedOperation":[{"$type":"Operation","$id":"LoopNode-allActions","$ns":"uml","name":"allActions","isQuery":"true","redefinedOperation":"Action-allActions","bodyCondition":"LoopNode-allActions-spec","ownedComment":[{"$type":"Comment","$id":"LoopNode-allActions-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-allActions","body":"Return only this LoopNode. This prevents Actions within the LoopNode from having their OutputPins used as bodyOutputs or decider Pins in containing LoopNodes or ConditionalNodes."}],"ownedRule":[{"$type":"Constraint","$id":"LoopNode-allActions-spec","$ns":"uml","name":"spec","constrainedElement":"LoopNode-allActions","specification":[{"$type":"OpaqueExpression","$id":"LoopNode-allActions-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LoopNode-allActions-result","$ns":"uml","name":"result","type":"Action","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-allActions-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-allActions-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"LoopNode-sourceNodes","$ns":"uml","name":"sourceNodes","isQuery":"true","redefinedOperation":"StructuredActivityNode-sourceNodes","bodyCondition":"LoopNode-sourceNodes-spec","ownedComment":[{"$type":"Comment","$id":"LoopNode-sourceNodes-_ownedComment.0","$ns":"uml","annotatedElement":"LoopNode-sourceNodes","body":"Return the loopVariable OutputPins in addition to other source nodes for the LoopNode as a StructuredActivityNode."}],"ownedRule":[{"$type":"Constraint","$id":"LoopNode-sourceNodes-spec","$ns":"uml","name":"spec","constrainedElement":"LoopNode-sourceNodes","specification":[{"$type":"OpaqueExpression","$id":"LoopNode-sourceNodes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.StructuredActivityNode::sourceNodes()->union(loopVariable))"}]}],"ownedParameter":[{"$type":"Parameter","$id":"LoopNode-sourceNodes-result","$ns":"uml","name":"result","type":"ActivityNode","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"LoopNode-sourceNodes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"LoopNode-sourceNodes-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"OpaqueAction","$ns":"uml","name":"OpaqueAction","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction","body":"An OpaqueAction is an Action whose functionality is not specified within UML."}],"ownedRule":[{"$type":"Constraint","$id":"OpaqueAction-language_body_size","$ns":"uml","name":"language_body_size","constrainedElement":"OpaqueAction","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-language_body_size-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction-language_body_size","body":"If the language attribute is not empty, then the size of the body and language lists must be the same."}],"specification":[{"$type":"OpaqueExpression","$id":"OpaqueAction-language_body_size-_specification","$ns":"uml","language":"OCL","body":"language->notEmpty() implies (_'body'->size() = language->size())"}]}],"generalization":[{"$type":"Generalization","$id":"OpaqueAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"OpaqueAction-body","$ns":"uml","name":"body","isOrdered":"true","isUnique":"false","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-body-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction-body","body":"Provides a textual specification of the functionality of the Action, in one or more languages other than UML."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueAction-body-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueAction-body-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueAction-inputValue","$ns":"uml","name":"inputValue","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_inputValue_opaqueAction","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-inputValue-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction-inputValue","body":"The InputPins providing inputs to the OpaqueAction."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueAction-inputValue-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueAction-inputValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueAction-language","$ns":"uml","name":"language","isOrdered":"true","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-language-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction-language","body":"If provided, a specification of the language used for each of the body Strings."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#String"}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueAction-language-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueAction-language-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"OpaqueAction-outputValue","$ns":"uml","name":"outputValue","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_outputValue_opaqueAction","ownedComment":[{"$type":"Comment","$id":"OpaqueAction-outputValue-_ownedComment.0","$ns":"uml","annotatedElement":"OpaqueAction-outputValue","body":"The OutputPins on which the OpaqueAction provides outputs."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"OpaqueAction-outputValue-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"OpaqueAction-outputValue-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"OutputPin","$ns":"uml","name":"OutputPin","ownedComment":[{"$type":"Comment","$id":"OutputPin-_ownedComment.0","$ns":"uml","annotatedElement":"OutputPin","body":"An OutputPin is a Pin that holds output values produced by an Action."}],"ownedRule":[{"$type":"Constraint","$id":"OutputPin-incoming_edges_structured_only","$ns":"uml","name":"incoming_edges_structured_only","constrainedElement":"OutputPin","ownedComment":[{"$type":"Comment","$id":"OutputPin-incoming_edges_structured_only-_ownedComment.0","$ns":"uml","annotatedElement":"OutputPin-incoming_edges_structured_only","body":"An OutputPin may have incoming ActivityEdges only when it is owned by a StructuredActivityNode, and these edges must have sources contained (directly or indirectly) in the owning StructuredActivityNode."}],"specification":[{"$type":"OpaqueExpression","$id":"OutputPin-incoming_edges_structured_only-_specification","$ns":"uml","language":"OCL","body":"incoming->notEmpty() implies\r\n\taction<>null and\r\n\taction.oclIsKindOf(StructuredActivityNode) and\r\n\taction.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)"}]}],"generalization":[{"$type":"Generalization","$id":"OutputPin-_generalization.0","$ns":"uml","general":"Pin"}]},{"$type":"Class","$id":"Pin","$ns":"uml","name":"Pin","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"Pin-_ownedComment.0","$ns":"uml","annotatedElement":"Pin","body":"A Pin is an ObjectNode and MultiplicityElement that provides input values to an Action or accepts output values from an Action."}],"ownedRule":[{"$type":"Constraint","$id":"Pin-control_pins","$ns":"uml","name":"control_pins","constrainedElement":"Pin","ownedComment":[{"$type":"Comment","$id":"Pin-control_pins-_ownedComment.0","$ns":"uml","annotatedElement":"Pin-control_pins","body":"A control Pin has a control type."}],"specification":[{"$type":"OpaqueExpression","$id":"Pin-control_pins-_specification","$ns":"uml","language":"OCL","body":"isControl implies isControlType"}]},{"$type":"Constraint","$id":"Pin-not_unique","$ns":"uml","name":"not_unique","constrainedElement":"Pin","ownedComment":[{"$type":"Comment","$id":"Pin-not_unique-_ownedComment.0","$ns":"uml","annotatedElement":"Pin-not_unique","body":"Pin multiplicity is not unique."}],"specification":[{"$type":"OpaqueExpression","$id":"Pin-not_unique-_specification","$ns":"uml","language":"OCL","body":"not isUnique"}]}],"generalization":[{"$type":"Generalization","$id":"Pin-_generalization.1","$ns":"uml","general":"ObjectNode"},{"$type":"Generalization","$id":"Pin-_generalization.0","$ns":"uml","general":"MultiplicityElement"}],"ownedAttribute":[{"$type":"Property","$id":"Pin-isControl","$ns":"uml","name":"isControl","ownedComment":[{"$type":"Comment","$id":"Pin-isControl-_ownedComment.0","$ns":"uml","annotatedElement":"Pin-isControl","body":"Indicates whether the Pin provides data to the Action or just controls how the Action executes."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"Pin-isControl-_defaultValue","$ns":"uml"}]}]},{"$type":"Class","$id":"QualifierValue","$ns":"uml","name":"QualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue","body":"A QualifierValue is an Element that is used as part of LinkEndData to provide the value for a single qualifier of the end given by the LinkEndData."}],"ownedRule":[{"$type":"Constraint","$id":"QualifierValue-multiplicity_of_qualifier","$ns":"uml","name":"multiplicity_of_qualifier","constrainedElement":"QualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-multiplicity_of_qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue-multiplicity_of_qualifier","body":"The multiplicity of the value InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"QualifierValue-multiplicity_of_qualifier-_specification","$ns":"uml","language":"OCL","body":"value.is(1,1)"}]},{"$type":"Constraint","$id":"QualifierValue-type_of_qualifier","$ns":"uml","name":"type_of_qualifier","constrainedElement":"QualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-type_of_qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue-type_of_qualifier","body":"The type of the value InputPin conforms to the type of the qualifier Property."}],"specification":[{"$type":"OpaqueExpression","$id":"QualifierValue-type_of_qualifier-_specification","$ns":"uml","language":"OCL","body":"value.type.conformsTo(qualifier.type)"}]},{"$type":"Constraint","$id":"QualifierValue-qualifier_attribute","$ns":"uml","name":"qualifier_attribute","constrainedElement":"QualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-qualifier_attribute-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue-qualifier_attribute","body":"The qualifier must be a qualifier of the Association end of the linkEndData that owns this QualifierValue."}],"specification":[{"$type":"OpaqueExpression","$id":"QualifierValue-qualifier_attribute-_specification","$ns":"uml","language":"OCL","body":"linkEndData.end.qualifier->includes(qualifier)"}]}],"generalization":[{"$type":"Generalization","$id":"QualifierValue-_generalization.0","$ns":"uml","general":"Element"}],"ownedAttribute":[{"$type":"Property","$id":"QualifierValue-qualifier","$ns":"uml","name":"qualifier","type":"Property","association":"A_qualifier_qualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue-qualifier","body":"The qualifier Property for which the value is to be specified."}]},{"$type":"Property","$id":"QualifierValue-value","$ns":"uml","name":"value","type":"InputPin","association":"A_value_qualifierValue","ownedComment":[{"$type":"Comment","$id":"QualifierValue-value-_ownedComment.0","$ns":"uml","annotatedElement":"QualifierValue-value","body":"The InputPin from which the specified value for the qualifier is taken."}]}]},{"$type":"Class","$id":"RaiseExceptionAction","$ns":"uml","name":"RaiseExceptionAction","ownedComment":[{"$type":"Comment","$id":"RaiseExceptionAction-_ownedComment.0","$ns":"uml","annotatedElement":"RaiseExceptionAction","body":"A RaiseExceptionAction is an Action that causes an exception to occur. The input value becomes the exception object."}],"generalization":[{"$type":"Generalization","$id":"RaiseExceptionAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"RaiseExceptionAction-exception","$ns":"uml","name":"exception","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_exception_raiseExceptionAction","ownedComment":[{"$type":"Comment","$id":"RaiseExceptionAction-exception-_ownedComment.0","$ns":"uml","annotatedElement":"RaiseExceptionAction-exception","body":"An InputPin whose value becomes the exception object."}]}]},{"$type":"Class","$id":"ReadExtentAction","$ns":"uml","name":"ReadExtentAction","ownedComment":[{"$type":"Comment","$id":"ReadExtentAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadExtentAction","body":"A ReadExtentAction is an Action that retrieves the current instances of a Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"ReadExtentAction-type_is_classifier","$ns":"uml","name":"type_is_classifier","constrainedElement":"ReadExtentAction","ownedComment":[{"$type":"Comment","$id":"ReadExtentAction-type_is_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReadExtentAction-type_is_classifier","body":"The type of the result OutputPin is the classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadExtentAction-type_is_classifier-_specification","$ns":"uml","language":"OCL","body":"result.type = classifier"}]},{"$type":"Constraint","$id":"ReadExtentAction-multiplicity_of_result","$ns":"uml","name":"multiplicity_of_result","constrainedElement":"ReadExtentAction","ownedComment":[{"$type":"Comment","$id":"ReadExtentAction-multiplicity_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadExtentAction-multiplicity_of_result","body":"The multiplicity of the result OutputPin is 0..*."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadExtentAction-multiplicity_of_result-_specification","$ns":"uml","language":"OCL","body":"result.is(0,*)"}]}],"generalization":[{"$type":"Generalization","$id":"ReadExtentAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReadExtentAction-classifier","$ns":"uml","name":"classifier","type":"Classifier","association":"A_classifier_readExtentAction","ownedComment":[{"$type":"Comment","$id":"ReadExtentAction-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReadExtentAction-classifier","body":"The Classifier whose instances are to be retrieved."}]},{"$type":"Property","$id":"ReadExtentAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readExtentAction","ownedComment":[{"$type":"Comment","$id":"ReadExtentAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadExtentAction-result","body":"The OutputPin on which the Classifier instances are placed."}]}]},{"$type":"Class","$id":"ReadIsClassifiedObjectAction","$ns":"uml","name":"ReadIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction","body":"A ReadIsClassifiedObjectAction is an Action that determines whether an object is classified by a given Classifier."}],"ownedRule":[{"$type":"Constraint","$id":"ReadIsClassifiedObjectAction-no_type","$ns":"uml","name":"no_type","constrainedElement":"ReadIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-no_type-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-no_type","body":"The object InputPin has no type."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadIsClassifiedObjectAction-no_type-_specification","$ns":"uml","language":"OCL","body":"object.type = null"}]},{"$type":"Constraint","$id":"ReadIsClassifiedObjectAction-multiplicity_of_output","$ns":"uml","name":"multiplicity_of_output","constrainedElement":"ReadIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-multiplicity_of_output-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-multiplicity_of_output","body":"The multiplicity of the result OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadIsClassifiedObjectAction-multiplicity_of_output-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"ReadIsClassifiedObjectAction-boolean_result","$ns":"uml","name":"boolean_result","constrainedElement":"ReadIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-boolean_result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-boolean_result","body":"The type of the result OutputPin is Boolean."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadIsClassifiedObjectAction-boolean_result-_specification","$ns":"uml","language":"OCL","body":"result.type = Boolean"}]},{"$type":"Constraint","$id":"ReadIsClassifiedObjectAction-multiplicity_of_input","$ns":"uml","name":"multiplicity_of_input","constrainedElement":"ReadIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-multiplicity_of_input-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-multiplicity_of_input","body":"The multiplicity of the object InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadIsClassifiedObjectAction-multiplicity_of_input-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]}],"generalization":[{"$type":"Generalization","$id":"ReadIsClassifiedObjectAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReadIsClassifiedObjectAction-classifier","$ns":"uml","name":"classifier","type":"Classifier","association":"A_classifier_readIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-classifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-classifier","body":"The Classifier against which the classification of the input object is tested."}]},{"$type":"Property","$id":"ReadIsClassifiedObjectAction-isDirect","$ns":"uml","name":"isDirect","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-isDirect-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-isDirect","body":"Indicates whether the input object must be directly classified by the given Classifier or whether it may also be an instance of a specialization of the given Classifier."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ReadIsClassifiedObjectAction-isDirect-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ReadIsClassifiedObjectAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_readIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-object","body":"The InputPin that holds the object whose classification is to be tested."}]},{"$type":"Property","$id":"ReadIsClassifiedObjectAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readIsClassifiedObjectAction","ownedComment":[{"$type":"Comment","$id":"ReadIsClassifiedObjectAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadIsClassifiedObjectAction-result","body":"The OutputPin that holds the Boolean result of the test."}]}]},{"$type":"Class","$id":"ReadLinkAction","$ns":"uml","name":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction","body":"A ReadLinkAction is a LinkAction that navigates across an Association to retrieve the objects on one end."}],"ownedRule":[{"$type":"Constraint","$id":"ReadLinkAction-type_and_ordering","$ns":"uml","name":"type_and_ordering","constrainedElement":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-type_and_ordering-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-type_and_ordering","body":"The type and ordering of the result OutputPin are same as the type and ordering of the open Association end."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-type_and_ordering-_specification","$ns":"uml","language":"OCL","body":"self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)\n"}]},{"$type":"Constraint","$id":"ReadLinkAction-compatible_multiplicity","$ns":"uml","name":"compatible_multiplicity","constrainedElement":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-compatible_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-compatible_multiplicity","body":"The multiplicity of the open Association end must be compatible with the multiplicity of the result OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-compatible_multiplicity-_specification","$ns":"uml","language":"OCL","body":"self.openEnd()->first().compatibleWith(result)\n"}]},{"$type":"Constraint","$id":"ReadLinkAction-visibility","$ns":"uml","name":"visibility","constrainedElement":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-visibility","body":"Visibility of the open end must allow access from the object performing the action."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-visibility-_specification","$ns":"uml","language":"OCL","body":"let openEnd : Property = self.openEnd()->first() in\n  openEnd.visibility = VisibilityKind::public or \n  endData->exists(oed | \n    oed.end<>openEnd and \n    (_'context' = oed.end.type or \n      (openEnd.visibility = VisibilityKind::protected and \n        _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))\n"}]},{"$type":"Constraint","$id":"ReadLinkAction-one_open_end","$ns":"uml","name":"one_open_end","constrainedElement":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-one_open_end-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-one_open_end","body":"Exactly one linkEndData specification (corresponding to the \"open\" end) must not have an value InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-one_open_end-_specification","$ns":"uml","language":"OCL","body":"self.openEnd()->size() = 1"}]},{"$type":"Constraint","$id":"ReadLinkAction-navigable_open_end","$ns":"uml","name":"navigable_open_end","constrainedElement":"ReadLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-navigable_open_end-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-navigable_open_end","body":"The open end must be navigable."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-navigable_open_end-_specification","$ns":"uml","language":"OCL","body":"self.openEnd()->first().isNavigable()\n"}]}],"generalization":[{"$type":"Generalization","$id":"ReadLinkAction-_generalization.0","$ns":"uml","general":"LinkAction"}],"ownedAttribute":[{"$type":"Property","$id":"ReadLinkAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readLinkAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-result","body":"The OutputPin on which the objects retrieved from the \"open\" end of those links whose values on other ends are given by the endData."}]}],"ownedOperation":[{"$type":"Operation","$id":"ReadLinkAction-openEnd","$ns":"uml","name":"openEnd","isQuery":"true","bodyCondition":"ReadLinkAction-openEnd-spec","ownedComment":[{"$type":"Comment","$id":"ReadLinkAction-openEnd-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkAction-openEnd","body":"Returns the ends corresponding to endData with no value InputPin. (A well-formed ReadLinkAction is constrained to have only one of these.)"}],"ownedRule":[{"$type":"Constraint","$id":"ReadLinkAction-openEnd-spec","$ns":"uml","name":"spec","constrainedElement":"ReadLinkAction-openEnd","specification":[{"$type":"OpaqueExpression","$id":"ReadLinkAction-openEnd-spec-_specification","$ns":"uml","language":"OCL","body":"result = (endData->select(value=null).end->asOrderedSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"ReadLinkAction-openEnd-result","$ns":"uml","name":"result","type":"Property","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ReadLinkAction-openEnd-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ReadLinkAction-openEnd-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"ReadLinkObjectEndAction","$ns":"uml","name":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction","body":"A ReadLinkObjectEndAction is an Action that retrieves an end object from a link object."}],"ownedRule":[{"$type":"Constraint","$id":"ReadLinkObjectEndAction-property","$ns":"uml","name":"property","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-property-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-property","body":"The end Property must be an Association memberEnd."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-property-_specification","$ns":"uml","language":"OCL","body":"end.association <> null"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-multiplicity_of_object","$ns":"uml","name":"multiplicity_of_object","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-multiplicity_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-multiplicity_of_object","body":"The multiplicity of the object InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-multiplicity_of_object-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-ends_of_association","$ns":"uml","name":"ends_of_association","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-ends_of_association-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-ends_of_association","body":"The ends of the association must not be static."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-ends_of_association-_specification","$ns":"uml","language":"OCL","body":"end.association.memberEnd->forAll(e | not e.isStatic)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-type_of_result","$ns":"uml","name":"type_of_result","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-type_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-type_of_result","body":"The type of the result OutputPin is the same as the type of the end Property."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-type_of_result-_specification","$ns":"uml","language":"OCL","body":"result.type = end.type"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-multiplicity_of_result","$ns":"uml","name":"multiplicity_of_result","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-multiplicity_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-multiplicity_of_result","body":"The multiplicity of the result OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-multiplicity_of_result-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-type_of_object","$ns":"uml","name":"type_of_object","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-type_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-type_of_object","body":"The type of the object InputPin is the AssociationClass that owns the end Property."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-type_of_object-_specification","$ns":"uml","language":"OCL","body":"object.type = end.association"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndAction-association_of_association","$ns":"uml","name":"association_of_association","constrainedElement":"ReadLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-association_of_association-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-association_of_association","body":"The association of the end must be an AssociationClass."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndAction-association_of_association-_specification","$ns":"uml","language":"OCL","body":"end.association.oclIsKindOf(AssociationClass)"}]}],"generalization":[{"$type":"Generalization","$id":"ReadLinkObjectEndAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReadLinkObjectEndAction-end","$ns":"uml","name":"end","type":"Property","association":"A_end_readLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-end-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-end","body":"The Association end to be read."}]},{"$type":"Property","$id":"ReadLinkObjectEndAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_readLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-object","body":"The input pin from which the link object is obtained."}]},{"$type":"Property","$id":"ReadLinkObjectEndAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readLinkObjectEndAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndAction-result","body":"The OutputPin where the result value is placed."}]}]},{"$type":"Class","$id":"ReadLinkObjectEndQualifierAction","$ns":"uml","name":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction","body":"A ReadLinkObjectEndQualifierAction is an Action that retrieves a qualifier end value from a link object."}],"ownedRule":[{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_object","$ns":"uml","name":"multiplicity_of_object","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-multiplicity_of_object","body":"The multiplicity of the object InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_object-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-type_of_object","$ns":"uml","name":"type_of_object","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-type_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-type_of_object","body":"The type of the object InputPin is the AssociationClass that owns the Association end that has the given qualifier Property."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-type_of_object-_specification","$ns":"uml","language":"OCL","body":"object.type = qualifier.associationEnd.association"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_qualifier","$ns":"uml","name":"multiplicity_of_qualifier","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-multiplicity_of_qualifier","body":"The multiplicity of the qualifier Property is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_qualifier-_specification","$ns":"uml","language":"OCL","body":"qualifier.is(1,1)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-ends_of_association","$ns":"uml","name":"ends_of_association","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-ends_of_association-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-ends_of_association","body":"The ends of the Association must not be static."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-ends_of_association-_specification","$ns":"uml","language":"OCL","body":"qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_result","$ns":"uml","name":"multiplicity_of_result","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-multiplicity_of_result","body":"The multiplicity of the result OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-multiplicity_of_result-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-same_type","$ns":"uml","name":"same_type","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-same_type-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-same_type","body":"The type of the result OutputPin is the same as the type of the qualifier Property."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-same_type-_specification","$ns":"uml","language":"OCL","body":"result.type = qualifier.type"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-association_of_association","$ns":"uml","name":"association_of_association","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-association_of_association-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-association_of_association","body":"The association of the Association end of the qualifier Property must be an AssociationClass."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-association_of_association-_specification","$ns":"uml","language":"OCL","body":"qualifier.associationEnd.association.oclIsKindOf(AssociationClass)"}]},{"$type":"Constraint","$id":"ReadLinkObjectEndQualifierAction-qualifier_attribute","$ns":"uml","name":"qualifier_attribute","constrainedElement":"ReadLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-qualifier_attribute-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-qualifier_attribute","body":"The qualifier Property must be a qualifier of an Association end."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadLinkObjectEndQualifierAction-qualifier_attribute-_specification","$ns":"uml","language":"OCL","body":"qualifier.associationEnd <> null"}]}],"generalization":[{"$type":"Generalization","$id":"ReadLinkObjectEndQualifierAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReadLinkObjectEndQualifierAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_readLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-object","body":"The InputPin from which the link object is obtained."}]},{"$type":"Property","$id":"ReadLinkObjectEndQualifierAction-qualifier","$ns":"uml","name":"qualifier","type":"Property","association":"A_qualifier_readLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-qualifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-qualifier","body":"The qualifier Property to be read."}]},{"$type":"Property","$id":"ReadLinkObjectEndQualifierAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readLinkObjectEndQualifierAction","ownedComment":[{"$type":"Comment","$id":"ReadLinkObjectEndQualifierAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadLinkObjectEndQualifierAction-result","body":"The OutputPin where the result value is placed."}]}]},{"$type":"Class","$id":"ReadSelfAction","$ns":"uml","name":"ReadSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction","body":"A ReadSelfAction is an Action that retrieves the context object of the Behavior execution within which the ReadSelfAction execution is taking place."}],"ownedRule":[{"$type":"Constraint","$id":"ReadSelfAction-contained","$ns":"uml","name":"contained","constrainedElement":"ReadSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-contained-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction-contained","body":"A ReadSelfAction must have a context Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadSelfAction-contained-_specification","$ns":"uml","language":"OCL","body":"_'context' <> null"}]},{"$type":"Constraint","$id":"ReadSelfAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ReadSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction-multiplicity","body":"The multiplicity of the result OutputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadSelfAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"result.is(1,1)"}]},{"$type":"Constraint","$id":"ReadSelfAction-not_static","$ns":"uml","name":"not_static","constrainedElement":"ReadSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-not_static-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction-not_static","body":"If the ReadSelfAction is contained in an Behavior that is acting as a method, then the Operation of the method must not be static."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadSelfAction-not_static-_specification","$ns":"uml","language":"OCL","body":"let behavior: Behavior = self.containingBehavior() in\r\nbehavior.specification<>null implies not behavior.specification.isStatic"}]},{"$type":"Constraint","$id":"ReadSelfAction-type","$ns":"uml","name":"type","constrainedElement":"ReadSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-type-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction-type","body":"The type of the result OutputPin is the context Classifier."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadSelfAction-type-_specification","$ns":"uml","language":"OCL","body":"result.type = _'context'"}]}],"generalization":[{"$type":"Generalization","$id":"ReadSelfAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReadSelfAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readSelfAction","ownedComment":[{"$type":"Comment","$id":"ReadSelfAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadSelfAction-result","body":"The OutputPin on which the context object is placed."}]}]},{"$type":"Class","$id":"ReadStructuralFeatureAction","$ns":"uml","name":"ReadStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ReadStructuralFeatureAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadStructuralFeatureAction","body":"A ReadStructuralFeatureAction is a StructuralFeatureAction that retrieves the values of a StructuralFeature."}],"ownedRule":[{"$type":"Constraint","$id":"ReadStructuralFeatureAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ReadStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ReadStructuralFeatureAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ReadStructuralFeatureAction-multiplicity","body":"The multiplicity of the StructuralFeature must be compatible with the multiplicity of the result OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadStructuralFeatureAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"structuralFeature.compatibleWith(result)"}]},{"$type":"Constraint","$id":"ReadStructuralFeatureAction-type_and_ordering","$ns":"uml","name":"type_and_ordering","constrainedElement":"ReadStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ReadStructuralFeatureAction-type_and_ordering-_ownedComment.0","$ns":"uml","annotatedElement":"ReadStructuralFeatureAction-type_and_ordering","body":"The type and ordering of the result OutputPin are the same as the type and ordering of the StructuralFeature."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadStructuralFeatureAction-type_and_ordering-_specification","$ns":"uml","language":"OCL","body":"result.type =structuralFeature.type and \nresult.isOrdered = structuralFeature.isOrdered\n"}]}],"generalization":[{"$type":"Generalization","$id":"ReadStructuralFeatureAction-_generalization.0","$ns":"uml","general":"StructuralFeatureAction"}],"ownedAttribute":[{"$type":"Property","$id":"ReadStructuralFeatureAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readStructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"ReadStructuralFeatureAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadStructuralFeatureAction-result","body":"The OutputPin on which the result values are placed."}]}]},{"$type":"Class","$id":"ReadVariableAction","$ns":"uml","name":"ReadVariableAction","ownedComment":[{"$type":"Comment","$id":"ReadVariableAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReadVariableAction","body":"A ReadVariableAction is a VariableAction that retrieves the values of a Variable."}],"ownedRule":[{"$type":"Constraint","$id":"ReadVariableAction-type_and_ordering","$ns":"uml","name":"type_and_ordering","constrainedElement":"ReadVariableAction","ownedComment":[{"$type":"Comment","$id":"ReadVariableAction-type_and_ordering-_ownedComment.0","$ns":"uml","annotatedElement":"ReadVariableAction-type_and_ordering","body":"The type and ordering of the result OutputPin are the same as the type and ordering of the variable."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadVariableAction-type_and_ordering-_specification","$ns":"uml","language":"OCL","body":"result.type =variable.type and \nresult.isOrdered = variable.isOrdered\n"}]},{"$type":"Constraint","$id":"ReadVariableAction-compatible_multiplicity","$ns":"uml","name":"compatible_multiplicity","constrainedElement":"ReadVariableAction","ownedComment":[{"$type":"Comment","$id":"ReadVariableAction-compatible_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ReadVariableAction-compatible_multiplicity","body":"The multiplicity of the variable must be compatible with the multiplicity of the output pin."}],"specification":[{"$type":"OpaqueExpression","$id":"ReadVariableAction-compatible_multiplicity-_specification","$ns":"uml","language":"OCL","body":"variable.compatibleWith(result)"}]}],"generalization":[{"$type":"Generalization","$id":"ReadVariableAction-_generalization.0","$ns":"uml","general":"VariableAction"}],"ownedAttribute":[{"$type":"Property","$id":"ReadVariableAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_readVariableAction","ownedComment":[{"$type":"Comment","$id":"ReadVariableAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReadVariableAction-result","body":"The OutputPin on which the result values are placed."}]}]},{"$type":"Class","$id":"ReclassifyObjectAction","$ns":"uml","name":"ReclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction","body":"A ReclassifyObjectAction is an Action that changes the Classifiers that classify an object."}],"ownedRule":[{"$type":"Constraint","$id":"ReclassifyObjectAction-input_pin","$ns":"uml","name":"input_pin","constrainedElement":"ReclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-input_pin-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-input_pin","body":"The object InputPin has no type."}],"specification":[{"$type":"OpaqueExpression","$id":"ReclassifyObjectAction-input_pin-_specification","$ns":"uml","language":"OCL","body":"object.type = null"}]},{"$type":"Constraint","$id":"ReclassifyObjectAction-classifier_not_abstract","$ns":"uml","name":"classifier_not_abstract","constrainedElement":"ReclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-classifier_not_abstract-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-classifier_not_abstract","body":"None of the newClassifiers may be abstract."}],"specification":[{"$type":"OpaqueExpression","$id":"ReclassifyObjectAction-classifier_not_abstract-_specification","$ns":"uml","language":"OCL","body":"not newClassifier->exists(isAbstract)"}]},{"$type":"Constraint","$id":"ReclassifyObjectAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"ReclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-multiplicity","body":"The multiplicity of the object InputPin is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"ReclassifyObjectAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]}],"generalization":[{"$type":"Generalization","$id":"ReclassifyObjectAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReclassifyObjectAction-isReplaceAll","$ns":"uml","name":"isReplaceAll","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-isReplaceAll-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-isReplaceAll","body":"Specifies whether existing Classifiers should be removed before adding the new Classifiers."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ReclassifyObjectAction-isReplaceAll-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ReclassifyObjectAction-newClassifier","$ns":"uml","name":"newClassifier","type":"Classifier","association":"A_newClassifier_reclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-newClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-newClassifier","body":"A set of Classifiers to be added to the Classifiers of the given object."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ReclassifyObjectAction-newClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ReclassifyObjectAction-newClassifier-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ReclassifyObjectAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_reclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-object","body":"The InputPin that holds the object to be reclassified."}]},{"$type":"Property","$id":"ReclassifyObjectAction-oldClassifier","$ns":"uml","name":"oldClassifier","type":"Classifier","association":"A_oldClassifier_reclassifyObjectAction","ownedComment":[{"$type":"Comment","$id":"ReclassifyObjectAction-oldClassifier-_ownedComment.0","$ns":"uml","annotatedElement":"ReclassifyObjectAction-oldClassifier","body":"A set of Classifiers to be removed from the Classifiers of the given object."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ReclassifyObjectAction-oldClassifier-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ReclassifyObjectAction-oldClassifier-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ReduceAction","$ns":"uml","name":"ReduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction","body":"A ReduceAction is an Action that reduces a collection to a single value by repeatedly combining the elements of the collection using a reducer Behavior."}],"ownedRule":[{"$type":"Constraint","$id":"ReduceAction-reducer_inputs_output","$ns":"uml","name":"reducer_inputs_output","constrainedElement":"ReduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-reducer_inputs_output-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-reducer_inputs_output","body":"The reducer Behavior must have two input ownedParameters and one output ownedParameter, where the type of the output Parameter and the type of elements of the input collection conform to the types of the input Parameters."}],"specification":[{"$type":"OpaqueExpression","$id":"ReduceAction-reducer_inputs_output-_specification","$ns":"uml","language":"OCL","body":"let inputs: OrderedSet(Parameter) = reducer.inputParameters() in\r\nlet outputs: OrderedSet(Parameter) = reducer.outputParameters() in\r\ninputs->size()=2 and outputs->size()=1 and\r\ninputs.type->forAll(t | \r\n\toutputs.type->forAll(conformsTo(t)) and \r\n\t-- Note that the following only checks the case when the collection is via multiple tokens.\r\n\tcollection.upperBound()>1 implies collection.type.conformsTo(t))"}]},{"$type":"Constraint","$id":"ReduceAction-input_type_is_collection","$ns":"uml","name":"input_type_is_collection","constrainedElement":"ReduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-input_type_is_collection-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-input_type_is_collection","body":"The type of the collection InputPin must be a collection."}],"specification":[{"$type":"OpaqueExpression","$id":"ReduceAction-input_type_is_collection-_specification","$ns":"uml","language":""}]},{"$type":"Constraint","$id":"ReduceAction-output_types_are_compatible","$ns":"uml","name":"output_types_are_compatible","constrainedElement":"ReduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-output_types_are_compatible-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-output_types_are_compatible","body":"The type of the output of the reducer Behavior must conform to the type of the result OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"ReduceAction-output_types_are_compatible-_specification","$ns":"uml","language":"OCL","body":"reducer.outputParameters().type->forAll(conformsTo(result.type))"}]}],"generalization":[{"$type":"Generalization","$id":"ReduceAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReduceAction-collection","$ns":"uml","name":"collection","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_collection_reduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-collection-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-collection","body":"The InputPin that provides the collection to be reduced."}]},{"$type":"Property","$id":"ReduceAction-isOrdered","$ns":"uml","name":"isOrdered","ownedComment":[{"$type":"Comment","$id":"ReduceAction-isOrdered-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-isOrdered","body":"Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"ReduceAction-isOrdered-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"ReduceAction-reducer","$ns":"uml","name":"reducer","type":"Behavior","association":"A_reducer_reduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-reducer-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-reducer","body":"A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection."}]},{"$type":"Property","$id":"ReduceAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_reduceAction","ownedComment":[{"$type":"Comment","$id":"ReduceAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"ReduceAction-result","body":"The output pin on which the result value is placed."}]}]},{"$type":"Class","$id":"RemoveStructuralFeatureValueAction","$ns":"uml","name":"RemoveStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveStructuralFeatureValueAction-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveStructuralFeatureValueAction","body":"A RemoveStructuralFeatureValueAction is a WriteStructuralFeatureAction that removes values from a StructuralFeature."}],"ownedRule":[{"$type":"Constraint","$id":"RemoveStructuralFeatureValueAction-removeAt_and_value","$ns":"uml","name":"removeAt_and_value","constrainedElement":"RemoveStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveStructuralFeatureValueAction-removeAt_and_value-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveStructuralFeatureValueAction-removeAt_and_value","body":"RemoveStructuralFeatureValueActions removing a value from ordered, non-unique StructuralFeatures must have a single removeAt InputPin and no value InputPin, if isRemoveDuplicates is false. The removeAt InputPin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the Action has a value InputPin and no removeAt InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"RemoveStructuralFeatureValueAction-removeAt_and_value-_specification","$ns":"uml","language":"OCL","body":"if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then\r\n  value = null and\r\n  removeAt <> null and\r\n  removeAt.type = UnlimitedNatural and\r\n  removeAt.is(1,1)\r\nelse\r\n  removeAt = null and value <> null\r\nendif"}]}],"generalization":[{"$type":"Generalization","$id":"RemoveStructuralFeatureValueAction-_generalization.0","$ns":"uml","general":"WriteStructuralFeatureAction"}],"ownedAttribute":[{"$type":"Property","$id":"RemoveStructuralFeatureValueAction-isRemoveDuplicates","$ns":"uml","name":"isRemoveDuplicates","ownedComment":[{"$type":"Comment","$id":"RemoveStructuralFeatureValueAction-isRemoveDuplicates-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveStructuralFeatureValueAction-isRemoveDuplicates","body":"Specifies whether to remove duplicates of the value in nonunique StructuralFeatures."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"RemoveStructuralFeatureValueAction-isRemoveDuplicates-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"RemoveStructuralFeatureValueAction-removeAt","$ns":"uml","name":"removeAt","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_removeAt_removeStructuralFeatureValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveStructuralFeatureValueAction-removeAt-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveStructuralFeatureValueAction-removeAt","body":"An InputPin that provides the position of an existing value to remove in ordered, nonunique structural features. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."}],"lowerValue":[{"$type":"LiteralInteger","$id":"RemoveStructuralFeatureValueAction-removeAt-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"RemoveVariableValueAction","$ns":"uml","name":"RemoveVariableValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveVariableValueAction-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveVariableValueAction","body":"A RemoveVariableValueAction is a WriteVariableAction that removes values from a Variables."}],"ownedRule":[{"$type":"Constraint","$id":"RemoveVariableValueAction-removeAt_and_value","$ns":"uml","name":"removeAt_and_value","constrainedElement":"RemoveVariableValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveVariableValueAction-removeAt_and_value-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveVariableValueAction-removeAt_and_value","body":"ReadVariableActions removing a value from ordered, non-unique Variables must have a single removeAt InputPin and no value InputPin, if isRemoveDuplicates is false. The removeAt InputPin must be of type Unlimited Natural with multiplicity 1..1. Otherwise, the Action has a value InputPin and no removeAt InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"RemoveVariableValueAction-removeAt_and_value-_specification","$ns":"uml","language":"OCL","body":"if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then \r\n  value = null and\r\n  removeAt <> null and\r\n  removeAt.type = UnlimitedNatural and\r\n  removeAt.is(1,1)\r\nelse\r\n  removeAt = null and value <> null\r\nendif"}]}],"generalization":[{"$type":"Generalization","$id":"RemoveVariableValueAction-_generalization.0","$ns":"uml","general":"WriteVariableAction"}],"ownedAttribute":[{"$type":"Property","$id":"RemoveVariableValueAction-isRemoveDuplicates","$ns":"uml","name":"isRemoveDuplicates","ownedComment":[{"$type":"Comment","$id":"RemoveVariableValueAction-isRemoveDuplicates-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveVariableValueAction-isRemoveDuplicates","body":"Specifies whether to remove duplicates of the value in nonunique Variables."}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"RemoveVariableValueAction-isRemoveDuplicates-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"RemoveVariableValueAction-removeAt","$ns":"uml","name":"removeAt","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_removeAt_removeVariableValueAction","ownedComment":[{"$type":"Comment","$id":"RemoveVariableValueAction-removeAt-_ownedComment.0","$ns":"uml","annotatedElement":"RemoveVariableValueAction-removeAt","body":"An InputPin that provides the position of an existing value to remove in ordered, nonunique Variables. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited."}],"lowerValue":[{"$type":"LiteralInteger","$id":"RemoveVariableValueAction-removeAt-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"ReplyAction","$ns":"uml","name":"ReplyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction","body":"A ReplyAction is an Action that accepts a set of reply values and a value containing return information produced by a previous AcceptCallAction. The ReplyAction returns the values to the caller of the previous call, completing execution of the call."}],"ownedRule":[{"$type":"Constraint","$id":"ReplyAction-pins_match_parameter","$ns":"uml","name":"pins_match_parameter","constrainedElement":"ReplyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-pins_match_parameter-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction-pins_match_parameter","body":"The replyValue InputPins must match the output (return, out, and inout) parameters of the operation of the event of the replyToCall Trigger in number, type, ordering, and multiplicity."}],"specification":[{"$type":"OpaqueExpression","$id":"ReplyAction-pins_match_parameter-_specification","$ns":"uml","language":"OCL","body":"let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in\r\nreplyValue->size()=parameter->size() and\r\nSequence{1..replyValue->size()}->forAll(i |\r\n\treplyValue->at(i).type.conformsTo(parameter->at(i).type) and\r\n\treplyValue->at(i).isOrdered=parameter->at(i).isOrdered and\r\n\treplyValue->at(i).compatibleWith(parameter->at(i)))"}]},{"$type":"Constraint","$id":"ReplyAction-event_on_reply_to_call_trigger","$ns":"uml","name":"event_on_reply_to_call_trigger","constrainedElement":"ReplyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-event_on_reply_to_call_trigger-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction-event_on_reply_to_call_trigger","body":"The event of the replyToCall Trigger must be a CallEvent."}],"specification":[{"$type":"OpaqueExpression","$id":"ReplyAction-event_on_reply_to_call_trigger-_specification","$ns":"uml","language":"OCL","body":"replyToCall.event.oclIsKindOf(CallEvent)"}]}],"generalization":[{"$type":"Generalization","$id":"ReplyAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"ReplyAction-replyToCall","$ns":"uml","name":"replyToCall","type":"Trigger","association":"A_replyToCall_replyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-replyToCall-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction-replyToCall","body":"The Trigger specifying the Operation whose call is being replied to."}]},{"$type":"Property","$id":"ReplyAction-replyValue","$ns":"uml","name":"replyValue","type":"InputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Action-input","association":"A_replyValue_replyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-replyValue-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction-replyValue","body":"A list of InputPins providing the values for the output (inout, out, and return) Parameters of the Operation. These values are returned to the caller."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"ReplyAction-replyValue-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"ReplyAction-replyValue-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"ReplyAction-returnInformation","$ns":"uml","name":"returnInformation","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_returnInformation_replyAction","ownedComment":[{"$type":"Comment","$id":"ReplyAction-returnInformation-_ownedComment.0","$ns":"uml","annotatedElement":"ReplyAction-returnInformation","body":"An InputPin that holds the return information value produced by an earlier AcceptCallAction."}]}]},{"$type":"Class","$id":"SendObjectAction","$ns":"uml","name":"SendObjectAction","ownedComment":[{"$type":"Comment","$id":"SendObjectAction-_ownedComment.0","$ns":"uml","annotatedElement":"SendObjectAction","body":"A SendObjectAction is an InvocationAction that transmits an input object to the target object, which is handled as a request message by the target object. The requestor continues execution immediately after the object is sent out and cannot receive reply values."}],"ownedRule":[{"$type":"Constraint","$id":"SendObjectAction-type_target_pin","$ns":"uml","name":"type_target_pin","constrainedElement":"SendObjectAction","ownedComment":[{"$type":"Comment","$id":"SendObjectAction-type_target_pin-_ownedComment.0","$ns":"uml","annotatedElement":"SendObjectAction-type_target_pin","body":"If onPort is not empty, the Port given by onPort must be an owned or inherited feature of the type of the target InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"SendObjectAction-type_target_pin-_specification","$ns":"uml","language":"OCL","body":"onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)"}]}],"generalization":[{"$type":"Generalization","$id":"SendObjectAction-_generalization.0","$ns":"uml","general":"InvocationAction"}],"ownedAttribute":[{"$type":"Property","$id":"SendObjectAction-request","$ns":"uml","name":"request","type":"InputPin","aggregation":"composite","redefinedProperty":"InvocationAction-argument","association":"A_request_sendObjectAction","ownedComment":[{"$type":"Comment","$id":"SendObjectAction-request-_ownedComment.0","$ns":"uml","annotatedElement":"SendObjectAction-request","body":"The request object, which is transmitted to the target object. The object may be copied in transmission, so identity might not be preserved."}]},{"$type":"Property","$id":"SendObjectAction-target","$ns":"uml","name":"target","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_target_sendObjectAction","ownedComment":[{"$type":"Comment","$id":"SendObjectAction-target-_ownedComment.0","$ns":"uml","annotatedElement":"SendObjectAction-target","body":"The target object to which the object is sent."}]}]},{"$type":"Class","$id":"SendSignalAction","$ns":"uml","name":"SendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction","body":"A SendSignalAction is an InvocationAction that creates a Signal instance and transmits it to the target object. Values from the argument InputPins are used to provide values for the attributes of the Signal. The requestor continues execution immediately after the Signal instance is sent out and cannot receive reply values."}],"ownedRule":[{"$type":"Constraint","$id":"SendSignalAction-type_ordering_multiplicity","$ns":"uml","name":"type_ordering_multiplicity","constrainedElement":"SendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-type_ordering_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction-type_ordering_multiplicity","body":"The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal."}],"specification":[{"$type":"OpaqueExpression","$id":"SendSignalAction-type_ordering_multiplicity-_specification","$ns":"uml","language":"OCL","body":"let attribute: OrderedSet(Property) = signal.allAttributes() in\r\nSequence{1..argument->size()}->forAll(i | \r\n\targument->at(i).type.conformsTo(attribute->at(i).type) and \r\n\targument->at(i).isOrdered = attribute->at(i).isOrdered and\r\n\targument->at(i).compatibleWith(attribute->at(i)))"}]},{"$type":"Constraint","$id":"SendSignalAction-number_order","$ns":"uml","name":"number_order","constrainedElement":"SendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-number_order-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction-number_order","body":"The number and order of argument InputPins must be the same as the number and order of attributes of the signal."}],"specification":[{"$type":"OpaqueExpression","$id":"SendSignalAction-number_order-_specification","$ns":"uml","language":"OCL","body":"argument->size()=signal.allAttributes()->size()"}]},{"$type":"Constraint","$id":"SendSignalAction-type_target_pin","$ns":"uml","name":"type_target_pin","constrainedElement":"SendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-type_target_pin-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction-type_target_pin","body":"If onPort is not empty, the Port given by onPort must be an owned or inherited feature of the type of the target InputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"SendSignalAction-type_target_pin-_specification","$ns":"uml","language":"OCL","body":"not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)\r\n"}]}],"generalization":[{"$type":"Generalization","$id":"SendSignalAction-_generalization.0","$ns":"uml","general":"InvocationAction"}],"ownedAttribute":[{"$type":"Property","$id":"SendSignalAction-signal","$ns":"uml","name":"signal","type":"Signal","association":"A_signal_sendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-signal-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction-signal","body":"The Signal whose instance is transmitted to the target."}]},{"$type":"Property","$id":"SendSignalAction-target","$ns":"uml","name":"target","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_target_sendSignalAction","ownedComment":[{"$type":"Comment","$id":"SendSignalAction-target-_ownedComment.0","$ns":"uml","annotatedElement":"SendSignalAction-target","body":"The InputPin that provides the target object to which the Signal instance is sent."}]}]},{"$type":"Class","$id":"SequenceNode","$ns":"uml","name":"SequenceNode","ownedComment":[{"$type":"Comment","$id":"SequenceNode-_ownedComment.0","$ns":"uml","annotatedElement":"SequenceNode","body":"A SequenceNode is a StructuredActivityNode that executes a sequence of ExecutableNodes in order."}],"generalization":[{"$type":"Generalization","$id":"SequenceNode-_generalization.0","$ns":"uml","general":"StructuredActivityNode"}],"ownedAttribute":[{"$type":"Property","$id":"SequenceNode-executableNode","$ns":"uml","name":"executableNode","type":"ExecutableNode","isOrdered":"true","aggregation":"composite","redefinedProperty":"StructuredActivityNode-node","association":"A_executableNode_sequenceNode","ownedComment":[{"$type":"Comment","$id":"SequenceNode-executableNode-_ownedComment.0","$ns":"uml","annotatedElement":"SequenceNode-executableNode","body":"The ordered set of ExecutableNodes to be sequenced."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"SequenceNode-executableNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"SequenceNode-executableNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Class","$id":"StartClassifierBehaviorAction","$ns":"uml","name":"StartClassifierBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartClassifierBehaviorAction-_ownedComment.0","$ns":"uml","annotatedElement":"StartClassifierBehaviorAction","body":"A StartClassifierBehaviorAction is an Action that starts the classifierBehavior of the input object."}],"ownedRule":[{"$type":"Constraint","$id":"StartClassifierBehaviorAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"StartClassifierBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartClassifierBehaviorAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"StartClassifierBehaviorAction-multiplicity","body":"The multiplicity of the object InputPin is 1..1"}],"specification":[{"$type":"OpaqueExpression","$id":"StartClassifierBehaviorAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"StartClassifierBehaviorAction-type_has_classifier","$ns":"uml","name":"type_has_classifier","constrainedElement":"StartClassifierBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartClassifierBehaviorAction-type_has_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"StartClassifierBehaviorAction-type_has_classifier","body":"If the InputPin has a type, then the type or one of its ancestors must have a classifierBehavior."}],"specification":[{"$type":"OpaqueExpression","$id":"StartClassifierBehaviorAction-type_has_classifier-_specification","$ns":"uml","language":"OCL","body":"object.type->notEmpty() implies \r\n   (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)"}]}],"generalization":[{"$type":"Generalization","$id":"StartClassifierBehaviorAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"StartClassifierBehaviorAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_startClassifierBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartClassifierBehaviorAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"StartClassifierBehaviorAction-object","body":"The InputPin that holds the object whose classifierBehavior is to be started."}]}]},{"$type":"Class","$id":"StartObjectBehaviorAction","$ns":"uml","name":"StartObjectBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction","body":"A StartObjectBehaviorAction is an InvocationAction that starts the execution either of a directly instantiated Behavior or of the classifierBehavior of an object. Argument values may be supplied for the input Parameters of the Behavior. If the Behavior is invoked synchronously, then output values may be obtained for output Parameters."}],"ownedRule":[{"$type":"Constraint","$id":"StartObjectBehaviorAction-multiplicity_of_object","$ns":"uml","name":"multiplicity_of_object","constrainedElement":"StartObjectBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-multiplicity_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-multiplicity_of_object","body":"The multiplicity of the object InputPin must be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-multiplicity_of_object-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"StartObjectBehaviorAction-type_of_object","$ns":"uml","name":"type_of_object","constrainedElement":"StartObjectBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-type_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-type_of_object","body":"The type of the object InputPin must be either a Behavior or a BehavioredClassifier with a classifierBehavior."}],"specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-type_of_object-_specification","$ns":"uml","language":"OCL","body":"self.behavior()<>null"}]},{"$type":"Constraint","$id":"StartObjectBehaviorAction-no_onport","$ns":"uml","name":"no_onport","constrainedElement":"StartObjectBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-no_onport-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-no_onport","body":"A StartObjectBehaviorAction may not specify onPort."}],"specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-no_onport-_specification","$ns":"uml","language":"OCL","body":"onPort->isEmpty()"}]}],"generalization":[{"$type":"Generalization","$id":"StartObjectBehaviorAction-_generalization.0","$ns":"uml","general":"CallAction"}],"ownedAttribute":[{"$type":"Property","$id":"StartObjectBehaviorAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_startObjectBehaviorAction","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-object","body":"An InputPin that holds the object that is either a Behavior to be started or has a classifierBehavior to be started."}]}],"ownedOperation":[{"$type":"Operation","$id":"StartObjectBehaviorAction-outputParameters","$ns":"uml","name":"outputParameters","isQuery":"true","redefinedOperation":"CallAction-outputParameters","bodyCondition":"StartObjectBehaviorAction-outputParameters-spec","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-outputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-outputParameters","body":"Return the inout, out and return ownedParameters of the Behavior being called."}],"ownedRule":[{"$type":"Constraint","$id":"StartObjectBehaviorAction-outputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"StartObjectBehaviorAction-outputParameters","specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-outputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.behavior().outputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StartObjectBehaviorAction-outputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StartObjectBehaviorAction-outputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StartObjectBehaviorAction-outputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StartObjectBehaviorAction-inputParameters","$ns":"uml","name":"inputParameters","isQuery":"true","redefinedOperation":"CallAction-inputParameters","bodyCondition":"StartObjectBehaviorAction-inputParameters-spec","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-inputParameters-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-inputParameters","body":"Return the in and inout ownedParameters of the Behavior being called."}],"ownedRule":[{"$type":"Constraint","$id":"StartObjectBehaviorAction-inputParameters-spec","$ns":"uml","name":"spec","constrainedElement":"StartObjectBehaviorAction-inputParameters","specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-inputParameters-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.behavior().inputParameters())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StartObjectBehaviorAction-inputParameters-result","$ns":"uml","name":"result","type":"Parameter","isOrdered":"true","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StartObjectBehaviorAction-inputParameters-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StartObjectBehaviorAction-inputParameters-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StartObjectBehaviorAction-behavior","$ns":"uml","name":"behavior","isQuery":"true","bodyCondition":"StartObjectBehaviorAction-behavior-spec","ownedComment":[{"$type":"Comment","$id":"StartObjectBehaviorAction-behavior-_ownedComment.0","$ns":"uml","annotatedElement":"StartObjectBehaviorAction-behavior","body":"If the type of the object InputPin is a Behavior, then that Behavior. Otherwise, if the type of the object InputPin is a BehavioredClassifier, then the classifierBehavior of that BehavioredClassifier."}],"ownedRule":[{"$type":"Constraint","$id":"StartObjectBehaviorAction-behavior-spec","$ns":"uml","name":"spec","constrainedElement":"StartObjectBehaviorAction-behavior","specification":[{"$type":"OpaqueExpression","$id":"StartObjectBehaviorAction-behavior-spec-_specification","$ns":"uml","language":"OCL","body":"result = (if object.type.oclIsKindOf(Behavior) then\r\n  object.type.oclAsType(Behavior)\r\nelse if object.type.oclIsKindOf(BehavioredClassifier) then\r\n  object.type.oclAsType(BehavioredClassifier).classifierBehavior\r\nelse\r\n  null\r\nendif\r\nendif)"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StartObjectBehaviorAction-behavior-result","$ns":"uml","name":"result","type":"Behavior","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"StartObjectBehaviorAction-behavior-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"StructuralFeatureAction","$ns":"uml","name":"StructuralFeatureAction","isAbstract":"true","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction","body":"StructuralFeatureAction is an abstract class for all Actions that operate on StructuralFeatures."}],"ownedRule":[{"$type":"Constraint","$id":"StructuralFeatureAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"StructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-multiplicity","body":"The multiplicity of the object InputPin must be 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuralFeatureAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"StructuralFeatureAction-object_type","$ns":"uml","name":"object_type","constrainedElement":"StructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-object_type-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-object_type","body":"The structuralFeature must either be an owned or inherited feature of the type of the object InputPin, or it must be an owned end of a binary Association whose opposite end had as a type to which the type of the object InputPin conforms."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuralFeatureAction-object_type-_specification","$ns":"uml","language":"OCL","body":"object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or\r\n\tobject.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)"}]},{"$type":"Constraint","$id":"StructuralFeatureAction-visibility","$ns":"uml","name":"visibility","constrainedElement":"StructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-visibility-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-visibility","body":"The visibility of the structuralFeature must allow access from the object performing the ReadStructuralFeatureAction."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuralFeatureAction-visibility-_specification","$ns":"uml","language":"OCL","body":"structuralFeature.visibility = VisibilityKind::public or\n_'context'.allFeatures()->includes(structuralFeature) or\nstructuralFeature.visibility=VisibilityKind::protected and\n_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))\n"}]},{"$type":"Constraint","$id":"StructuralFeatureAction-not_static","$ns":"uml","name":"not_static","constrainedElement":"StructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-not_static-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-not_static","body":"The structuralFeature must not be static."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuralFeatureAction-not_static-_specification","$ns":"uml","language":"OCL","body":"not structuralFeature.isStatic"}]},{"$type":"Constraint","$id":"StructuralFeatureAction-one_featuring_classifier","$ns":"uml","name":"one_featuring_classifier","constrainedElement":"StructuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-one_featuring_classifier-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-one_featuring_classifier","body":"The structuralFeature must have exactly one featuringClassifier."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuralFeatureAction-one_featuring_classifier-_specification","$ns":"uml","language":"OCL","body":"structuralFeature.featuringClassifier->size() = 1"}]}],"generalization":[{"$type":"Generalization","$id":"StructuralFeatureAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"StructuralFeatureAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_structuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-object","body":"The InputPin from which the object whose StructuralFeature is to be read or written is obtained."}]},{"$type":"Property","$id":"StructuralFeatureAction-structuralFeature","$ns":"uml","name":"structuralFeature","type":"StructuralFeature","association":"A_structuralFeature_structuralFeatureAction","ownedComment":[{"$type":"Comment","$id":"StructuralFeatureAction-structuralFeature-_ownedComment.0","$ns":"uml","annotatedElement":"StructuralFeatureAction-structuralFeature","body":"The StructuralFeature to be read or written."}]}]},{"$type":"Class","$id":"StructuredActivityNode","$ns":"uml","name":"StructuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode","body":"A StructuredActivityNode is an Action that is also an ActivityGroup and whose behavior is specified by the ActivityNodes and ActivityEdges it so contains. Unlike other kinds of ActivityGroup, a StructuredActivityNode owns the ActivityNodes and ActivityEdges it contains, and so a node or edge can only be directly contained in one StructuredActivityNode, though StructuredActivityNodes may be nested."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-output_pin_edges","$ns":"uml","name":"output_pin_edges","constrainedElement":"StructuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-output_pin_edges-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-output_pin_edges","body":"The outgoing ActivityEdges of the OutputPins of a StructuredActivityNode must have targets that are not within the StructuredActivityNode."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-output_pin_edges-_specification","$ns":"uml","language":"OCL","body":"output.outgoing.target->excludesAll(allOwnedNodes()-input)"}]},{"$type":"Constraint","$id":"StructuredActivityNode-edges","$ns":"uml","name":"edges","constrainedElement":"StructuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-edges-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-edges","body":"The edges of a StructuredActivityNode are all the ActivityEdges with source and target ActivityNodes contained directly or indirectly within the StructuredActivityNode and at least one of the source or target not contained in any more deeply nested StructuredActivityNode."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-edges-_specification","$ns":"uml","language":"OCL","body":"edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->\r\n\tunion(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()"}]},{"$type":"Constraint","$id":"StructuredActivityNode-input_pin_edges","$ns":"uml","name":"input_pin_edges","constrainedElement":"StructuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-input_pin_edges-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-input_pin_edges","body":"The incoming ActivityEdges of an InputPin of a StructuredActivityNode must have sources that are not within the StructuredActivityNode."}],"specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-input_pin_edges-_specification","$ns":"uml","language":"OCL","body":"input.incoming.source->excludesAll(allOwnedNodes()-output)"}]}],"generalization":[{"$type":"Generalization","$id":"StructuredActivityNode-_generalization.0","$ns":"uml","general":"Namespace"},{"$type":"Generalization","$id":"StructuredActivityNode-_generalization.2","$ns":"uml","general":"ActivityGroup"},{"$type":"Generalization","$id":"StructuredActivityNode-_generalization.1","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"StructuredActivityNode-activity","$ns":"uml","name":"activity","type":"Activity","redefinedProperty":"ActivityGroup-inActivity ActivityNode-activity","association":"A_structuredNode_activity","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-activity-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-activity","body":"The Activity immediately containing the StructuredActivityNode, if it is not contained in another StructuredActivityNode."}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-activity-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-edge","$ns":"uml","name":"edge","type":"ActivityEdge","aggregation":"composite","subsettedProperty":"ActivityGroup-containedEdge Element-ownedElement","association":"A_edge_inStructuredNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-edge-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-edge","body":"The ActivityEdges immediately contained in the StructuredActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-edge-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-edge-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-mustIsolate","$ns":"uml","name":"mustIsolate","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-mustIsolate-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-mustIsolate","body":"If true, then any object used by an Action within the StructuredActivityNode cannot be accessed by any Action outside the node until the StructuredActivityNode as a whole completes. Any concurrent Actions that would result in accessing such objects are required to have their execution deferred until the completion of the StructuredActivityNode.\r\n"}],"type":[{"$type":"PrimitiveType","$ns":"uml","href":"http://www.omg.org/spec/UML/20131001/PrimitiveTypes.xmi#Boolean"}],"defaultValue":[{"$type":"LiteralBoolean","$id":"StructuredActivityNode-mustIsolate-_defaultValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-node","$ns":"uml","name":"node","type":"ActivityNode","aggregation":"composite","subsettedProperty":"ActivityGroup-containedNode Element-ownedElement","association":"A_node_inStructuredNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-node-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-node","body":"The ActivityNodes immediately contained in the StructuredActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-node-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-node-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-structuredNodeInput","$ns":"uml","name":"structuredNodeInput","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_structuredNodeInput_structuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-structuredNodeInput-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-structuredNodeInput","body":"The InputPins owned by the StructuredActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-structuredNodeInput-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-structuredNodeInput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-structuredNodeOutput","$ns":"uml","name":"structuredNodeOutput","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_structuredNodeOutput_structuredActivityNode","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-structuredNodeOutput-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-structuredNodeOutput","body":"The OutputPins owned by the StructuredActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-structuredNodeOutput-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-structuredNodeOutput-_lowerValue","$ns":"uml"}]},{"$type":"Property","$id":"StructuredActivityNode-variable","$ns":"uml","name":"variable","type":"Variable","aggregation":"composite","subsettedProperty":"Namespace-ownedMember","association":"A_variable_scope","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-variable-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-variable","body":"The Variables defined in the scope of the StructuredActivityNode."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-variable-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-variable-_lowerValue","$ns":"uml"}]}],"ownedOperation":[{"$type":"Operation","$id":"StructuredActivityNode-allActions","$ns":"uml","name":"allActions","isQuery":"true","redefinedOperation":"Action-allActions","bodyCondition":"StructuredActivityNode-allActions-spec","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-allActions-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-allActions","body":"Returns this StructuredActivityNode and all Actions contained in it."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-allActions-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredActivityNode-allActions","specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-allActions-spec-_specification","$ns":"uml","language":"OCL","body":"result = (node->select(oclIsKindOf(Action)).oclAsType(Action).allActions()->including(self)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredActivityNode-allActions-result","$ns":"uml","name":"result","type":"Action","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-allActions-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-allActions-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StructuredActivityNode-allOwnedNodes","$ns":"uml","name":"allOwnedNodes","isQuery":"true","redefinedOperation":"Action-allOwnedNodes","bodyCondition":"StructuredActivityNode-allOwnedNodes-spec","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-allOwnedNodes-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-allOwnedNodes","body":"Returns all the ActivityNodes contained directly or indirectly within this StructuredActivityNode, in addition to the Pins of the StructuredActivityNode."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-allOwnedNodes-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredActivityNode-allOwnedNodes","specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-allOwnedNodes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.Action::allOwnedNodes()->union(node)->union(node->select(oclIsKindOf(Action)).oclAsType(Action).allOwnedNodes())->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredActivityNode-allOwnedNodes-result","$ns":"uml","name":"result","type":"ActivityNode","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-allOwnedNodes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-allOwnedNodes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StructuredActivityNode-sourceNodes","$ns":"uml","name":"sourceNodes","isQuery":"true","bodyCondition":"StructuredActivityNode-sourceNodes-spec","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-sourceNodes-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-sourceNodes","body":"Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as sources of edges owned by the StructuredActivityNode."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-sourceNodes-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredActivityNode-sourceNodes","specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-sourceNodes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (node->union(input.oclAsType(ActivityNode)->asSet())->\r\n  union(node->select(oclIsKindOf(Action)).oclAsType(Action).output)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredActivityNode-sourceNodes-result","$ns":"uml","name":"result","type":"ActivityNode","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-sourceNodes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-sourceNodes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StructuredActivityNode-targetNodes","$ns":"uml","name":"targetNodes","isQuery":"true","bodyCondition":"StructuredActivityNode-targetNodes-spec","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-targetNodes-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-targetNodes","body":"Return those ActivityNodes contained immediately within the StructuredActivityNode that may act as targets of edges owned by the StructuredActivityNode."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-targetNodes-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredActivityNode-targetNodes","specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-targetNodes-spec-_specification","$ns":"uml","language":"OCL","body":"result = (node->union(output.oclAsType(ActivityNode)->asSet())->\r\n  union(node->select(oclIsKindOf(Action)).oclAsType(Action).input)->asSet())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredActivityNode-targetNodes-result","$ns":"uml","name":"result","type":"ActivityNode","direction":"return","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"StructuredActivityNode-targetNodes-result-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-targetNodes-result-_lowerValue","$ns":"uml"}]}]},{"$type":"Operation","$id":"StructuredActivityNode-containingActivity","$ns":"uml","name":"containingActivity","isQuery":"true","redefinedOperation":"ActivityGroup-containingActivity ActivityNode-containingActivity","bodyCondition":"StructuredActivityNode-containingActivity-spec","ownedComment":[{"$type":"Comment","$id":"StructuredActivityNode-containingActivity-_ownedComment.0","$ns":"uml","annotatedElement":"StructuredActivityNode-containingActivity","body":"The Activity that directly or indirectly contains this StructuredActivityNode (considered as an Action)."}],"ownedRule":[{"$type":"Constraint","$id":"StructuredActivityNode-containingActivity-spec","$ns":"uml","name":"spec","constrainedElement":"StructuredActivityNode-containingActivity","specification":[{"$type":"OpaqueExpression","$id":"StructuredActivityNode-containingActivity-spec-_specification","$ns":"uml","language":"OCL","body":"result = (self.Action::containingActivity())"}]}],"ownedParameter":[{"$type":"Parameter","$id":"StructuredActivityNode-containingActivity-result","$ns":"uml","name":"result","type":"Activity","direction":"return","lowerValue":[{"$type":"LiteralInteger","$id":"StructuredActivityNode-containingActivity-result-_lowerValue","$ns":"uml"}]}]}]},{"$type":"Class","$id":"TestIdentityAction","$ns":"uml","name":"TestIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction","body":"A TestIdentityAction is an Action that tests if two values are identical objects."}],"ownedRule":[{"$type":"Constraint","$id":"TestIdentityAction-multiplicity","$ns":"uml","name":"multiplicity","constrainedElement":"TestIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-multiplicity","body":"The multiplicity of the InputPins is 1..1."}],"specification":[{"$type":"OpaqueExpression","$id":"TestIdentityAction-multiplicity-_specification","$ns":"uml","language":"OCL","body":"first.is(1,1) and second.is(1,1)\n"}]},{"$type":"Constraint","$id":"TestIdentityAction-no_type","$ns":"uml","name":"no_type","constrainedElement":"TestIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-no_type-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-no_type","body":"The InputPins have no type."}],"specification":[{"$type":"OpaqueExpression","$id":"TestIdentityAction-no_type-_specification","$ns":"uml","language":"OCL","body":"first.type= null and second.type = null\n"}]},{"$type":"Constraint","$id":"TestIdentityAction-result_is_boolean","$ns":"uml","name":"result_is_boolean","constrainedElement":"TestIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-result_is_boolean-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-result_is_boolean","body":"The type of the result OutputPin is Boolean. "}],"specification":[{"$type":"OpaqueExpression","$id":"TestIdentityAction-result_is_boolean-_specification","$ns":"uml","language":"OCL","body":"result.type=Boolean"}]}],"generalization":[{"$type":"Generalization","$id":"TestIdentityAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"TestIdentityAction-first","$ns":"uml","name":"first","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_first_testIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-first-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-first","body":"The InputPin on which the first input object is placed."}]},{"$type":"Property","$id":"TestIdentityAction-result","$ns":"uml","name":"result","type":"OutputPin","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_testIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-result","body":"The OutputPin whose Boolean value indicates whether the two input objects are identical."}]},{"$type":"Property","$id":"TestIdentityAction-second","$ns":"uml","name":"second","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_second_testIdentityAction","ownedComment":[{"$type":"Comment","$id":"TestIdentityAction-second-_ownedComment.0","$ns":"uml","annotatedElement":"TestIdentityAction-second","body":"The OutputPin on which the second input object is placed."}]}]},{"$type":"Class","$id":"UnmarshallAction","$ns":"uml","name":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction","body":"An UnmarshallAction is an Action that retrieves the values of the StructuralFeatures of an object and places them on OutputPins. "}],"ownedRule":[{"$type":"Constraint","$id":"UnmarshallAction-structural_feature","$ns":"uml","name":"structural_feature","constrainedElement":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-structural_feature-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-structural_feature","body":"The unmarshallType must have at least one StructuralFeature."}],"specification":[{"$type":"OpaqueExpression","$id":"UnmarshallAction-structural_feature-_specification","$ns":"uml","language":"OCL","body":"unmarshallType.allAttributes()->size() >= 1"}]},{"$type":"Constraint","$id":"UnmarshallAction-number_of_result","$ns":"uml","name":"number_of_result","constrainedElement":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-number_of_result-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-number_of_result","body":"The number of result outputPins must be the same as the number of attributes of the unmarshallType."}],"specification":[{"$type":"OpaqueExpression","$id":"UnmarshallAction-number_of_result-_specification","$ns":"uml","language":"OCL","body":"unmarshallType.allAttributes()->size() = result->size()"}]},{"$type":"Constraint","$id":"UnmarshallAction-type_ordering_and_multiplicity","$ns":"uml","name":"type_ordering_and_multiplicity","constrainedElement":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-type_ordering_and_multiplicity-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-type_ordering_and_multiplicity","body":"The type, ordering and multiplicity of each attribute of the unmarshallType must be compatible with the type, ordering and multiplicity of the corresponding result OutputPin."}],"specification":[{"$type":"OpaqueExpression","$id":"UnmarshallAction-type_ordering_and_multiplicity-_specification","$ns":"uml","language":"OCL","body":"let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in\r\nSequence{1..result->size()}->forAll(i | \r\n\tattribute->at(i).type.conformsTo(result->at(i).type) and\r\n\tattribute->at(i).isOrdered=result->at(i).isOrdered and\r\n\tattribute->at(i).compatibleWith(result->at(i)))"}]},{"$type":"Constraint","$id":"UnmarshallAction-multiplicity_of_object","$ns":"uml","name":"multiplicity_of_object","constrainedElement":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-multiplicity_of_object-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-multiplicity_of_object","body":"The multiplicity of the object InputPin is 1..1"}],"specification":[{"$type":"OpaqueExpression","$id":"UnmarshallAction-multiplicity_of_object-_specification","$ns":"uml","language":"OCL","body":"object.is(1,1)"}]},{"$type":"Constraint","$id":"UnmarshallAction-object_type","$ns":"uml","name":"object_type","constrainedElement":"UnmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-object_type-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-object_type","body":"The type of the object InputPin conform to the unmarshallType."}],"specification":[{"$type":"OpaqueExpression","$id":"UnmarshallAction-object_type-_specification","$ns":"uml","language":"OCL","body":"object.type.conformsTo(unmarshallType)"}]}],"generalization":[{"$type":"Generalization","$id":"UnmarshallAction-_generalization.0","$ns":"uml","general":"Action"}],"ownedAttribute":[{"$type":"Property","$id":"UnmarshallAction-object","$ns":"uml","name":"object","type":"InputPin","aggregation":"composite","subsettedProperty":"Action-input","association":"A_object_unmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-object-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-object","body":"The InputPin that gives the object to be unmarshalled."}]},{"$type":"Property","$id":"UnmarshallAction-result","$ns":"uml","name":"result","type":"OutputPin","isOrdered":"true","aggregation":"composite","subsettedProperty":"Action-output","association":"A_result_unmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-result-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-result","body":"The OutputPins on which are placed the values of the StructuralFeatures of the input object."}],"upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"UnmarshallAction-result-_upperValue","$ns":"uml","value":"*"}]},{"$type":"Property","$id":"UnmarshallAction-unmarshallType","$ns":"uml","name":"unmarshallType","type":"Classifier","association":"A_unmarshallType_unmarshallAction","ownedComment":[{"$type":"Comment","$id":"UnmarshallAction-unmarshallType-_ownedComment.0","$ns":"uml","annotatedElement":"UnmarshallAction-unmarshallType","body":"The type of the object to be unmarshalled."}]}]},{"$type":"Class","$id":"ValuePin","$ns":"uml","name":"ValuePin","ownedComment":[{"$type":"Comment","$id":"ValuePin-_ownedComment.0","$ns":"uml","annotatedElement":"ValuePin","body":"A ValuePin is an InputPin that provides a value by evaluating a ValueSpecification."}],"ownedRule":[{"$type":"Constraint","$id":"ValuePin-no_incoming_edges","$ns":"uml","name":"no_incoming_edges","constrainedElement":"ValuePin","ownedComment":[{"$type":"Comment","$id":"ValuePin-no_incoming_edges-_ownedComment.0","$ns":"uml","annotatedElement":"ValuePin-no_incoming_edges","body":"A ValuePin may have no incoming ActivityEdges."}],"specification":[{"$type":"OpaqueExpression","$id":"ValuePin-no_incoming_edges-_specification","$ns":"uml","language":"OCL","body":"incoming->isEmpty()"}]},{"$type":"Constraint","$id":"ValuePin-compatible_type","$ns":"uml","name":"compatible_type","constrainedElement":"ValuePin","ownedComment":[{"$type":"Comment","$id":"ValuePin-compatible_type-_ownedComment.0","$ns":"uml","annotatedElement":"ValuePin-compatible_type","body":"The type of the value ValueSpecification must conform to the type of the ValuePin."}],"specification":[{"$type":"OpaqueExpression","$id":"ValuePin-compatible_type-_specification","$ns":"uml","language":"OCL","body":"value.type.conformsTo(type)"}]}],"generalization":[{"$type":"Generalization","$id":"ValuePin-_generalization.0","$ns":"uml","general":"InputPin"}],"ownedAttribute":[{"$type":"Property","$id":"ValuePin-value","$ns":"uml","name":"value","type":"ValueSpecification","aggregation":"composite","subsettedProperty":"Element-ownedElement","association":"A_value_valuePin","ownedComment":[{"$type":"Comment","$id":"ValuePin-value-_ownedComment.0","$ns":"uml","annotatedElement":"ValuePin-value","body":"The ValueSpecification that is evaluated to obtain the value that the ValuePin will provide."}]}]},{"$type":"Association","$id":"A_value_valuePin","$ns":"uml","name":"A_value_valuePin","memberEnd":"ValuePin-value A_value_valuePin-valuePin","ownedEnd":[{"$type":"Property","$id":"A_value_valuePin-valuePin","$ns":"uml","name":"valuePin","type":"ValuePin","subsettedProperty":"Element-owner","association":"A_value_valuePin","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_valuePin-valuePin-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_unmarshallAction","$ns":"uml","name":"A_result_unmarshallAction","memberEnd":"UnmarshallAction-result A_result_unmarshallAction-unmarshallAction","ownedEnd":[{"$type":"Property","$id":"A_result_unmarshallAction-unmarshallAction","$ns":"uml","name":"unmarshallAction","type":"UnmarshallAction","subsettedProperty":"A_output_action-action","association":"A_result_unmarshallAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_unmarshallAction-unmarshallAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_unmarshallType_unmarshallAction","$ns":"uml","name":"A_unmarshallType_unmarshallAction","memberEnd":"UnmarshallAction-unmarshallType A_unmarshallType_unmarshallAction-unmarshallAction","ownedEnd":[{"$type":"Property","$id":"A_unmarshallType_unmarshallAction-unmarshallAction","$ns":"uml","name":"unmarshallAction","type":"UnmarshallAction","association":"A_unmarshallType_unmarshallAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_unmarshallType_unmarshallAction-unmarshallAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_unmarshallType_unmarshallAction-unmarshallAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_unmarshallAction","$ns":"uml","name":"A_object_unmarshallAction","memberEnd":"UnmarshallAction-object A_object_unmarshallAction-unmarshallAction","ownedEnd":[{"$type":"Property","$id":"A_object_unmarshallAction-unmarshallAction","$ns":"uml","name":"unmarshallAction","type":"UnmarshallAction","subsettedProperty":"A_input_action-action","association":"A_object_unmarshallAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_unmarshallAction-unmarshallAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_first_testIdentityAction","$ns":"uml","name":"A_first_testIdentityAction","memberEnd":"TestIdentityAction-first A_first_testIdentityAction-testIdentityAction","ownedEnd":[{"$type":"Property","$id":"A_first_testIdentityAction-testIdentityAction","$ns":"uml","name":"testIdentityAction","type":"TestIdentityAction","subsettedProperty":"A_input_action-action","association":"A_first_testIdentityAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_first_testIdentityAction-testIdentityAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_second_testIdentityAction","$ns":"uml","name":"A_second_testIdentityAction","memberEnd":"TestIdentityAction-second A_second_testIdentityAction-testIdentityAction","ownedEnd":[{"$type":"Property","$id":"A_second_testIdentityAction-testIdentityAction","$ns":"uml","name":"testIdentityAction","type":"TestIdentityAction","subsettedProperty":"A_input_action-action","association":"A_second_testIdentityAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_second_testIdentityAction-testIdentityAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_testIdentityAction","$ns":"uml","name":"A_result_testIdentityAction","memberEnd":"TestIdentityAction-result A_result_testIdentityAction-testIdentityAction","ownedEnd":[{"$type":"Property","$id":"A_result_testIdentityAction-testIdentityAction","$ns":"uml","name":"testIdentityAction","type":"TestIdentityAction","subsettedProperty":"A_output_action-action","association":"A_result_testIdentityAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_testIdentityAction-testIdentityAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_structuredNodeOutput_structuredActivityNode","$ns":"uml","name":"A_structuredNodeOutput_structuredActivityNode","memberEnd":"StructuredActivityNode-structuredNodeOutput A_structuredNodeOutput_structuredActivityNode-structuredActivityNode","ownedEnd":[{"$type":"Property","$id":"A_structuredNodeOutput_structuredActivityNode-structuredActivityNode","$ns":"uml","name":"structuredActivityNode","type":"StructuredActivityNode","subsettedProperty":"A_output_action-action","association":"A_structuredNodeOutput_structuredActivityNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_structuredNodeOutput_structuredActivityNode-structuredActivityNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_structuredNodeInput_structuredActivityNode","$ns":"uml","name":"A_structuredNodeInput_structuredActivityNode","memberEnd":"StructuredActivityNode-structuredNodeInput A_structuredNodeInput_structuredActivityNode-structuredActivityNode","ownedEnd":[{"$type":"Property","$id":"A_structuredNodeInput_structuredActivityNode-structuredActivityNode","$ns":"uml","name":"structuredActivityNode","type":"StructuredActivityNode","subsettedProperty":"A_input_action-action","association":"A_structuredNodeInput_structuredActivityNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_structuredNodeInput_structuredActivityNode-structuredActivityNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_edge_inStructuredNode","$ns":"uml","name":"A_edge_inStructuredNode","memberEnd":"StructuredActivityNode-edge ActivityEdge-inStructuredNode"},{"$type":"Association","$id":"A_node_inStructuredNode","$ns":"uml","name":"A_node_inStructuredNode","memberEnd":"StructuredActivityNode-node ActivityNode-inStructuredNode"},{"$type":"Association","$id":"A_variable_scope","$ns":"uml","name":"A_variable_scope","memberEnd":"StructuredActivityNode-variable Variable-scope"},{"$type":"Association","$id":"A_object_structuralFeatureAction","$ns":"uml","name":"A_object_structuralFeatureAction","memberEnd":"StructuralFeatureAction-object A_object_structuralFeatureAction-structuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_object_structuralFeatureAction-structuralFeatureAction","$ns":"uml","name":"structuralFeatureAction","type":"StructuralFeatureAction","subsettedProperty":"A_input_action-action","association":"A_object_structuralFeatureAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_structuralFeatureAction-structuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_structuralFeature_structuralFeatureAction","$ns":"uml","name":"A_structuralFeature_structuralFeatureAction","memberEnd":"StructuralFeatureAction-structuralFeature A_structuralFeature_structuralFeatureAction-structuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_structuralFeature_structuralFeatureAction-structuralFeatureAction","$ns":"uml","name":"structuralFeatureAction","type":"StructuralFeatureAction","association":"A_structuralFeature_structuralFeatureAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_structuralFeature_structuralFeatureAction-structuralFeatureAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_structuralFeature_structuralFeatureAction-structuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_startObjectBehaviorAction","$ns":"uml","name":"A_object_startObjectBehaviorAction","memberEnd":"StartObjectBehaviorAction-object A_object_startObjectBehaviorAction-startObjectBehaviorAction","ownedEnd":[{"$type":"Property","$id":"A_object_startObjectBehaviorAction-startObjectBehaviorAction","$ns":"uml","name":"startObjectBehaviorAction","type":"StartObjectBehaviorAction","subsettedProperty":"A_input_action-action","association":"A_object_startObjectBehaviorAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_startObjectBehaviorAction-startObjectBehaviorAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_startClassifierBehaviorAction","$ns":"uml","name":"A_object_startClassifierBehaviorAction","memberEnd":"StartClassifierBehaviorAction-object A_object_startClassifierBehaviorAction-startClassifierBehaviorAction","ownedEnd":[{"$type":"Property","$id":"A_object_startClassifierBehaviorAction-startClassifierBehaviorAction","$ns":"uml","name":"startClassifierBehaviorAction","type":"StartClassifierBehaviorAction","subsettedProperty":"A_input_action-action","association":"A_object_startClassifierBehaviorAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_startClassifierBehaviorAction-startClassifierBehaviorAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_executableNode_sequenceNode","$ns":"uml","name":"A_executableNode_sequenceNode","memberEnd":"SequenceNode-executableNode A_executableNode_sequenceNode-sequenceNode","ownedEnd":[{"$type":"Property","$id":"A_executableNode_sequenceNode-sequenceNode","$ns":"uml","name":"sequenceNode","type":"SequenceNode","subsettedProperty":"ActivityNode-inStructuredNode","association":"A_executableNode_sequenceNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_executableNode_sequenceNode-sequenceNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_signal_sendSignalAction","$ns":"uml","name":"A_signal_sendSignalAction","memberEnd":"SendSignalAction-signal A_signal_sendSignalAction-sendSignalAction","ownedEnd":[{"$type":"Property","$id":"A_signal_sendSignalAction-sendSignalAction","$ns":"uml","name":"sendSignalAction","type":"SendSignalAction","association":"A_signal_sendSignalAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signal_sendSignalAction-sendSignalAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signal_sendSignalAction-sendSignalAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_target_sendSignalAction","$ns":"uml","name":"A_target_sendSignalAction","memberEnd":"SendSignalAction-target A_target_sendSignalAction-sendSignalAction","ownedEnd":[{"$type":"Property","$id":"A_target_sendSignalAction-sendSignalAction","$ns":"uml","name":"sendSignalAction","type":"SendSignalAction","subsettedProperty":"A_input_action-action","association":"A_target_sendSignalAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_target_sendSignalAction-sendSignalAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_request_sendObjectAction","$ns":"uml","name":"A_request_sendObjectAction","memberEnd":"SendObjectAction-request A_request_sendObjectAction-sendObjectAction","generalization":[{"$type":"Generalization","$id":"A_request_sendObjectAction-_generalization.0","$ns":"uml","general":"A_argument_invocationAction"}],"ownedEnd":[{"$type":"Property","$id":"A_request_sendObjectAction-sendObjectAction","$ns":"uml","name":"sendObjectAction","type":"SendObjectAction","redefinedProperty":"A_argument_invocationAction-invocationAction","association":"A_request_sendObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_request_sendObjectAction-sendObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_target_sendObjectAction","$ns":"uml","name":"A_target_sendObjectAction","memberEnd":"SendObjectAction-target A_target_sendObjectAction-sendObjectAction","ownedEnd":[{"$type":"Property","$id":"A_target_sendObjectAction-sendObjectAction","$ns":"uml","name":"sendObjectAction","type":"SendObjectAction","subsettedProperty":"A_input_action-action","association":"A_target_sendObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_target_sendObjectAction-sendObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_returnInformation_replyAction","$ns":"uml","name":"A_returnInformation_replyAction","memberEnd":"ReplyAction-returnInformation A_returnInformation_replyAction-replyAction","ownedEnd":[{"$type":"Property","$id":"A_returnInformation_replyAction-replyAction","$ns":"uml","name":"replyAction","type":"ReplyAction","subsettedProperty":"A_input_action-action","association":"A_returnInformation_replyAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_returnInformation_replyAction-replyAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_replyToCall_replyAction","$ns":"uml","name":"A_replyToCall_replyAction","memberEnd":"ReplyAction-replyToCall A_replyToCall_replyAction-replyAction","ownedEnd":[{"$type":"Property","$id":"A_replyToCall_replyAction-replyAction","$ns":"uml","name":"replyAction","type":"ReplyAction","association":"A_replyToCall_replyAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_replyToCall_replyAction-replyAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_replyValue_replyAction","$ns":"uml","name":"A_replyValue_replyAction","memberEnd":"ReplyAction-replyValue A_replyValue_replyAction-replyAction","ownedEnd":[{"$type":"Property","$id":"A_replyValue_replyAction-replyAction","$ns":"uml","name":"replyAction","type":"ReplyAction","subsettedProperty":"A_input_action-action","association":"A_replyValue_replyAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_replyValue_replyAction-replyAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_removeAt_removeVariableValueAction","$ns":"uml","name":"A_removeAt_removeVariableValueAction","memberEnd":"RemoveVariableValueAction-removeAt A_removeAt_removeVariableValueAction-removeVariableValueAction","ownedEnd":[{"$type":"Property","$id":"A_removeAt_removeVariableValueAction-removeVariableValueAction","$ns":"uml","name":"removeVariableValueAction","type":"RemoveVariableValueAction","subsettedProperty":"A_input_action-action","association":"A_removeAt_removeVariableValueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_removeAt_removeVariableValueAction-removeVariableValueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_removeAt_removeStructuralFeatureValueAction","$ns":"uml","name":"A_removeAt_removeStructuralFeatureValueAction","memberEnd":"RemoveStructuralFeatureValueAction-removeAt A_removeAt_removeStructuralFeatureValueAction-removeStructuralFeatureValueAction","ownedEnd":[{"$type":"Property","$id":"A_removeAt_removeStructuralFeatureValueAction-removeStructuralFeatureValueAction","$ns":"uml","name":"removeStructuralFeatureValueAction","type":"RemoveStructuralFeatureValueAction","subsettedProperty":"A_input_action-action","association":"A_removeAt_removeStructuralFeatureValueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_removeAt_removeStructuralFeatureValueAction-removeStructuralFeatureValueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_collection_reduceAction","$ns":"uml","name":"A_collection_reduceAction","memberEnd":"ReduceAction-collection A_collection_reduceAction-reduceAction","ownedEnd":[{"$type":"Property","$id":"A_collection_reduceAction-reduceAction","$ns":"uml","name":"reduceAction","type":"ReduceAction","subsettedProperty":"A_input_action-action","association":"A_collection_reduceAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_collection_reduceAction-reduceAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_reducer_reduceAction","$ns":"uml","name":"A_reducer_reduceAction","memberEnd":"ReduceAction-reducer A_reducer_reduceAction-reduceAction","ownedEnd":[{"$type":"Property","$id":"A_reducer_reduceAction-reduceAction","$ns":"uml","name":"reduceAction","type":"ReduceAction","association":"A_reducer_reduceAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_reducer_reduceAction-reduceAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_reducer_reduceAction-reduceAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_reduceAction","$ns":"uml","name":"A_result_reduceAction","memberEnd":"ReduceAction-result A_result_reduceAction-reduceAction","ownedEnd":[{"$type":"Property","$id":"A_result_reduceAction-reduceAction","$ns":"uml","name":"reduceAction","type":"ReduceAction","subsettedProperty":"A_output_action-action","association":"A_result_reduceAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_reduceAction-reduceAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_reclassifyObjectAction","$ns":"uml","name":"A_object_reclassifyObjectAction","memberEnd":"ReclassifyObjectAction-object A_object_reclassifyObjectAction-reclassifyObjectAction","ownedEnd":[{"$type":"Property","$id":"A_object_reclassifyObjectAction-reclassifyObjectAction","$ns":"uml","name":"reclassifyObjectAction","type":"ReclassifyObjectAction","subsettedProperty":"A_input_action-action","association":"A_object_reclassifyObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_reclassifyObjectAction-reclassifyObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_newClassifier_reclassifyObjectAction","$ns":"uml","name":"A_newClassifier_reclassifyObjectAction","memberEnd":"ReclassifyObjectAction-newClassifier A_newClassifier_reclassifyObjectAction-reclassifyObjectAction","ownedEnd":[{"$type":"Property","$id":"A_newClassifier_reclassifyObjectAction-reclassifyObjectAction","$ns":"uml","name":"reclassifyObjectAction","type":"ReclassifyObjectAction","association":"A_newClassifier_reclassifyObjectAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_newClassifier_reclassifyObjectAction-reclassifyObjectAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_newClassifier_reclassifyObjectAction-reclassifyObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_oldClassifier_reclassifyObjectAction","$ns":"uml","name":"A_oldClassifier_reclassifyObjectAction","memberEnd":"ReclassifyObjectAction-oldClassifier A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction","ownedEnd":[{"$type":"Property","$id":"A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction","$ns":"uml","name":"reclassifyObjectAction","type":"ReclassifyObjectAction","association":"A_oldClassifier_reclassifyObjectAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_oldClassifier_reclassifyObjectAction-reclassifyObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readVariableAction","$ns":"uml","name":"A_result_readVariableAction","memberEnd":"ReadVariableAction-result A_result_readVariableAction-readVariableAction","ownedEnd":[{"$type":"Property","$id":"A_result_readVariableAction-readVariableAction","$ns":"uml","name":"readVariableAction","type":"ReadVariableAction","subsettedProperty":"A_output_action-action","association":"A_result_readVariableAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readVariableAction-readVariableAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readStructuralFeatureAction","$ns":"uml","name":"A_result_readStructuralFeatureAction","memberEnd":"ReadStructuralFeatureAction-result A_result_readStructuralFeatureAction-readStructuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_result_readStructuralFeatureAction-readStructuralFeatureAction","$ns":"uml","name":"readStructuralFeatureAction","type":"ReadStructuralFeatureAction","subsettedProperty":"A_output_action-action","association":"A_result_readStructuralFeatureAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readStructuralFeatureAction-readStructuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readSelfAction","$ns":"uml","name":"A_result_readSelfAction","memberEnd":"ReadSelfAction-result A_result_readSelfAction-readSelfAction","ownedEnd":[{"$type":"Property","$id":"A_result_readSelfAction-readSelfAction","$ns":"uml","name":"readSelfAction","type":"ReadSelfAction","subsettedProperty":"A_output_action-action","association":"A_result_readSelfAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readSelfAction-readSelfAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_qualifier_readLinkObjectEndQualifierAction","$ns":"uml","name":"A_qualifier_readLinkObjectEndQualifierAction","memberEnd":"ReadLinkObjectEndQualifierAction-qualifier A_qualifier_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","ownedEnd":[{"$type":"Property","$id":"A_qualifier_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","$ns":"uml","name":"readLinkObjectEndQualifierAction","type":"ReadLinkObjectEndQualifierAction","association":"A_qualifier_readLinkObjectEndQualifierAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_qualifier_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_readLinkObjectEndQualifierAction","$ns":"uml","name":"A_object_readLinkObjectEndQualifierAction","memberEnd":"ReadLinkObjectEndQualifierAction-object A_object_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","ownedEnd":[{"$type":"Property","$id":"A_object_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","$ns":"uml","name":"readLinkObjectEndQualifierAction","type":"ReadLinkObjectEndQualifierAction","subsettedProperty":"A_input_action-action","association":"A_object_readLinkObjectEndQualifierAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readLinkObjectEndQualifierAction","$ns":"uml","name":"A_result_readLinkObjectEndQualifierAction","memberEnd":"ReadLinkObjectEndQualifierAction-result A_result_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","ownedEnd":[{"$type":"Property","$id":"A_result_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction","$ns":"uml","name":"readLinkObjectEndQualifierAction","type":"ReadLinkObjectEndQualifierAction","subsettedProperty":"A_output_action-action","association":"A_result_readLinkObjectEndQualifierAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readLinkObjectEndQualifierAction-readLinkObjectEndQualifierAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_readLinkObjectEndAction","$ns":"uml","name":"A_object_readLinkObjectEndAction","memberEnd":"ReadLinkObjectEndAction-object A_object_readLinkObjectEndAction-readLinkObjectEndAction","ownedEnd":[{"$type":"Property","$id":"A_object_readLinkObjectEndAction-readLinkObjectEndAction","$ns":"uml","name":"readLinkObjectEndAction","type":"ReadLinkObjectEndAction","subsettedProperty":"A_input_action-action","association":"A_object_readLinkObjectEndAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_end_readLinkObjectEndAction","$ns":"uml","name":"A_end_readLinkObjectEndAction","memberEnd":"ReadLinkObjectEndAction-end A_end_readLinkObjectEndAction-readLinkObjectEndAction","ownedEnd":[{"$type":"Property","$id":"A_end_readLinkObjectEndAction-readLinkObjectEndAction","$ns":"uml","name":"readLinkObjectEndAction","type":"ReadLinkObjectEndAction","association":"A_end_readLinkObjectEndAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_end_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readLinkObjectEndAction","$ns":"uml","name":"A_result_readLinkObjectEndAction","memberEnd":"ReadLinkObjectEndAction-result A_result_readLinkObjectEndAction-readLinkObjectEndAction","ownedEnd":[{"$type":"Property","$id":"A_result_readLinkObjectEndAction-readLinkObjectEndAction","$ns":"uml","name":"readLinkObjectEndAction","type":"ReadLinkObjectEndAction","subsettedProperty":"A_output_action-action","association":"A_result_readLinkObjectEndAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readLinkObjectEndAction-readLinkObjectEndAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readLinkAction","$ns":"uml","name":"A_result_readLinkAction","memberEnd":"ReadLinkAction-result A_result_readLinkAction-readLinkAction","ownedEnd":[{"$type":"Property","$id":"A_result_readLinkAction-readLinkAction","$ns":"uml","name":"readLinkAction","type":"ReadLinkAction","subsettedProperty":"A_output_action-action","association":"A_result_readLinkAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readLinkAction-readLinkAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_classifier_readIsClassifiedObjectAction","$ns":"uml","name":"A_classifier_readIsClassifiedObjectAction","memberEnd":"ReadIsClassifiedObjectAction-classifier A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction","ownedEnd":[{"$type":"Property","$id":"A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction","$ns":"uml","name":"readIsClassifiedObjectAction","type":"ReadIsClassifiedObjectAction","association":"A_classifier_readIsClassifiedObjectAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_classifier_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readIsClassifiedObjectAction","$ns":"uml","name":"A_result_readIsClassifiedObjectAction","memberEnd":"ReadIsClassifiedObjectAction-result A_result_readIsClassifiedObjectAction-readIsClassifiedObjectAction","ownedEnd":[{"$type":"Property","$id":"A_result_readIsClassifiedObjectAction-readIsClassifiedObjectAction","$ns":"uml","name":"readIsClassifiedObjectAction","type":"ReadIsClassifiedObjectAction","subsettedProperty":"A_output_action-action","association":"A_result_readIsClassifiedObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_readIsClassifiedObjectAction","$ns":"uml","name":"A_object_readIsClassifiedObjectAction","memberEnd":"ReadIsClassifiedObjectAction-object A_object_readIsClassifiedObjectAction-readIsClassifiedObjectAction","ownedEnd":[{"$type":"Property","$id":"A_object_readIsClassifiedObjectAction-readIsClassifiedObjectAction","$ns":"uml","name":"readIsClassifiedObjectAction","type":"ReadIsClassifiedObjectAction","subsettedProperty":"A_input_action-action","association":"A_object_readIsClassifiedObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_readIsClassifiedObjectAction-readIsClassifiedObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_readExtentAction","$ns":"uml","name":"A_result_readExtentAction","memberEnd":"ReadExtentAction-result A_result_readExtentAction-readExtentAction","ownedEnd":[{"$type":"Property","$id":"A_result_readExtentAction-readExtentAction","$ns":"uml","name":"readExtentAction","type":"ReadExtentAction","subsettedProperty":"A_output_action-action","association":"A_result_readExtentAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_readExtentAction-readExtentAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_classifier_readExtentAction","$ns":"uml","name":"A_classifier_readExtentAction","memberEnd":"ReadExtentAction-classifier A_classifier_readExtentAction-readExtentAction","ownedEnd":[{"$type":"Property","$id":"A_classifier_readExtentAction-readExtentAction","$ns":"uml","name":"readExtentAction","type":"ReadExtentAction","association":"A_classifier_readExtentAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_classifier_readExtentAction-readExtentAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_exception_raiseExceptionAction","$ns":"uml","name":"A_exception_raiseExceptionAction","memberEnd":"RaiseExceptionAction-exception A_exception_raiseExceptionAction-raiseExceptionAction","ownedEnd":[{"$type":"Property","$id":"A_exception_raiseExceptionAction-raiseExceptionAction","$ns":"uml","name":"raiseExceptionAction","type":"RaiseExceptionAction","subsettedProperty":"A_input_action-action","association":"A_exception_raiseExceptionAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_exception_raiseExceptionAction-raiseExceptionAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_qualifier_qualifierValue","$ns":"uml","name":"A_qualifier_qualifierValue","memberEnd":"QualifierValue-qualifier A_qualifier_qualifierValue-qualifierValue","ownedEnd":[{"$type":"Property","$id":"A_qualifier_qualifierValue-qualifierValue","$ns":"uml","name":"qualifierValue","type":"QualifierValue","association":"A_qualifier_qualifierValue","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_qualifier_qualifierValue-qualifierValue-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_qualifier_qualifierValue-qualifierValue-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_qualifierValue","$ns":"uml","name":"A_value_qualifierValue","memberEnd":"QualifierValue-value A_value_qualifierValue-qualifierValue","ownedEnd":[{"$type":"Property","$id":"A_value_qualifierValue-qualifierValue","$ns":"uml","name":"qualifierValue","type":"QualifierValue","association":"A_value_qualifierValue","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_qualifierValue-qualifierValue-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_outputValue_opaqueAction","$ns":"uml","name":"A_outputValue_opaqueAction","memberEnd":"OpaqueAction-outputValue A_outputValue_opaqueAction-opaqueAction","ownedEnd":[{"$type":"Property","$id":"A_outputValue_opaqueAction-opaqueAction","$ns":"uml","name":"opaqueAction","type":"OpaqueAction","subsettedProperty":"A_output_action-action","association":"A_outputValue_opaqueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_outputValue_opaqueAction-opaqueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inputValue_opaqueAction","$ns":"uml","name":"A_inputValue_opaqueAction","memberEnd":"OpaqueAction-inputValue A_inputValue_opaqueAction-opaqueAction","ownedEnd":[{"$type":"Property","$id":"A_inputValue_opaqueAction-opaqueAction","$ns":"uml","name":"opaqueAction","type":"OpaqueAction","subsettedProperty":"A_input_action-action","association":"A_inputValue_opaqueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_inputValue_opaqueAction-opaqueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_setupPart_loopNode","$ns":"uml","name":"A_setupPart_loopNode","memberEnd":"LoopNode-setupPart A_setupPart_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_setupPart_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","association":"A_setupPart_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_setupPart_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_bodyPart_loopNode","$ns":"uml","name":"A_bodyPart_loopNode","memberEnd":"LoopNode-bodyPart A_bodyPart_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_bodyPart_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","association":"A_bodyPart_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_bodyPart_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_loopVariable_loopNode","$ns":"uml","name":"A_loopVariable_loopNode","memberEnd":"LoopNode-loopVariable A_loopVariable_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_loopVariable_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","subsettedProperty":"Element-owner","association":"A_loopVariable_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_loopVariable_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_loopNode","$ns":"uml","name":"A_result_loopNode","memberEnd":"LoopNode-result A_result_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_result_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","subsettedProperty":"A_structuredNodeOutput_structuredActivityNode-structuredActivityNode","association":"A_result_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_bodyOutput_loopNode","$ns":"uml","name":"A_bodyOutput_loopNode","memberEnd":"LoopNode-bodyOutput A_bodyOutput_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_bodyOutput_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","association":"A_bodyOutput_loopNode","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_bodyOutput_loopNode-loopNode-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_bodyOutput_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_loopVariableInput_loopNode","$ns":"uml","name":"A_loopVariableInput_loopNode","memberEnd":"LoopNode-loopVariableInput A_loopVariableInput_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_loopVariableInput_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","subsettedProperty":"A_structuredNodeInput_structuredActivityNode-structuredActivityNode","association":"A_loopVariableInput_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_loopVariableInput_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_test_loopNode","$ns":"uml","name":"A_test_loopNode","memberEnd":"LoopNode-test A_test_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_test_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","association":"A_test_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_test_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_decider_loopNode","$ns":"uml","name":"A_decider_loopNode","memberEnd":"LoopNode-decider A_decider_loopNode-loopNode","ownedEnd":[{"$type":"Property","$id":"A_decider_loopNode-loopNode","$ns":"uml","name":"loopNode","type":"LoopNode","association":"A_decider_loopNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_decider_loopNode-loopNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_destroyAt_linkEndDestructionData","$ns":"uml","name":"A_destroyAt_linkEndDestructionData","memberEnd":"LinkEndDestructionData-destroyAt A_destroyAt_linkEndDestructionData-linkEndDestructionData","ownedEnd":[{"$type":"Property","$id":"A_destroyAt_linkEndDestructionData-linkEndDestructionData","$ns":"uml","name":"linkEndDestructionData","type":"LinkEndDestructionData","association":"A_destroyAt_linkEndDestructionData","lowerValue":[{"$type":"LiteralInteger","$id":"A_destroyAt_linkEndDestructionData-linkEndDestructionData-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_linkEndData","$ns":"uml","name":"A_value_linkEndData","memberEnd":"LinkEndData-value A_value_linkEndData-linkEndData","ownedEnd":[{"$type":"Property","$id":"A_value_linkEndData-linkEndData","$ns":"uml","name":"linkEndData","type":"LinkEndData","association":"A_value_linkEndData","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_linkEndData-linkEndData-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_end_linkEndData","$ns":"uml","name":"A_end_linkEndData","memberEnd":"LinkEndData-end A_end_linkEndData-linkEndData","ownedEnd":[{"$type":"Property","$id":"A_end_linkEndData-linkEndData","$ns":"uml","name":"linkEndData","type":"LinkEndData","association":"A_end_linkEndData","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_end_linkEndData-linkEndData-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_end_linkEndData-linkEndData-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_qualifier_linkEndData","$ns":"uml","name":"A_qualifier_linkEndData","memberEnd":"LinkEndData-qualifier A_qualifier_linkEndData-linkEndData","ownedEnd":[{"$type":"Property","$id":"A_qualifier_linkEndData-linkEndData","$ns":"uml","name":"linkEndData","type":"LinkEndData","subsettedProperty":"Element-owner","association":"A_qualifier_linkEndData"}]},{"$type":"Association","$id":"A_insertAt_linkEndCreationData","$ns":"uml","name":"A_insertAt_linkEndCreationData","memberEnd":"LinkEndCreationData-insertAt A_insertAt_linkEndCreationData-linkEndCreationData","ownedEnd":[{"$type":"Property","$id":"A_insertAt_linkEndCreationData-linkEndCreationData","$ns":"uml","name":"linkEndCreationData","type":"LinkEndCreationData","association":"A_insertAt_linkEndCreationData","lowerValue":[{"$type":"LiteralInteger","$id":"A_insertAt_linkEndCreationData-linkEndCreationData-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inputValue_linkAction","$ns":"uml","name":"A_inputValue_linkAction","memberEnd":"LinkAction-inputValue A_inputValue_linkAction-linkAction","ownedEnd":[{"$type":"Property","$id":"A_inputValue_linkAction-linkAction","$ns":"uml","name":"linkAction","type":"LinkAction","subsettedProperty":"A_input_action-action","association":"A_inputValue_linkAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_inputValue_linkAction-linkAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_endData_linkAction","$ns":"uml","name":"A_endData_linkAction","memberEnd":"LinkAction-endData A_endData_linkAction-linkAction","ownedEnd":[{"$type":"Property","$id":"A_endData_linkAction-linkAction","$ns":"uml","name":"linkAction","type":"LinkAction","subsettedProperty":"Element-owner","association":"A_endData_linkAction"}]},{"$type":"Association","$id":"A_argument_invocationAction","$ns":"uml","name":"A_argument_invocationAction","memberEnd":"InvocationAction-argument A_argument_invocationAction-invocationAction","ownedEnd":[{"$type":"Property","$id":"A_argument_invocationAction-invocationAction","$ns":"uml","name":"invocationAction","type":"InvocationAction","subsettedProperty":"A_input_action-action","association":"A_argument_invocationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_argument_invocationAction-invocationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_onPort_invocationAction","$ns":"uml","name":"A_onPort_invocationAction","memberEnd":"InvocationAction-onPort A_onPort_invocationAction-invocationAction","ownedEnd":[{"$type":"Property","$id":"A_onPort_invocationAction-invocationAction","$ns":"uml","name":"invocationAction","type":"InvocationAction","association":"A_onPort_invocationAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_onPort_invocationAction-invocationAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_onPort_invocationAction-invocationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_inputElement_regionAsInput","$ns":"uml","name":"A_inputElement_regionAsInput","memberEnd":"ExpansionRegion-inputElement ExpansionNode-regionAsInput"},{"$type":"Association","$id":"A_outputElement_regionAsOutput","$ns":"uml","name":"A_outputElement_regionAsOutput","memberEnd":"ExpansionRegion-outputElement ExpansionNode-regionAsOutput"},{"$type":"Association","$id":"A_target_destroyObjectAction","$ns":"uml","name":"A_target_destroyObjectAction","memberEnd":"DestroyObjectAction-target A_target_destroyObjectAction-destroyObjectAction","ownedEnd":[{"$type":"Property","$id":"A_target_destroyObjectAction-destroyObjectAction","$ns":"uml","name":"destroyObjectAction","type":"DestroyObjectAction","subsettedProperty":"A_input_action-action","association":"A_target_destroyObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_target_destroyObjectAction-destroyObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_endData_destroyLinkAction","$ns":"uml","name":"A_endData_destroyLinkAction","memberEnd":"DestroyLinkAction-endData A_endData_destroyLinkAction-destroyLinkAction","generalization":[{"$type":"Generalization","$id":"A_endData_destroyLinkAction-_generalization.0","$ns":"uml","general":"A_endData_linkAction"}],"ownedEnd":[{"$type":"Property","$id":"A_endData_destroyLinkAction-destroyLinkAction","$ns":"uml","name":"destroyLinkAction","type":"DestroyLinkAction","redefinedProperty":"A_endData_linkAction-linkAction","association":"A_endData_destroyLinkAction"}]},{"$type":"Association","$id":"A_classifier_createObjectAction","$ns":"uml","name":"A_classifier_createObjectAction","memberEnd":"CreateObjectAction-classifier A_classifier_createObjectAction-createObjectAction","ownedEnd":[{"$type":"Property","$id":"A_classifier_createObjectAction-createObjectAction","$ns":"uml","name":"createObjectAction","type":"CreateObjectAction","association":"A_classifier_createObjectAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_classifier_createObjectAction-createObjectAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_classifier_createObjectAction-createObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_createObjectAction","$ns":"uml","name":"A_result_createObjectAction","memberEnd":"CreateObjectAction-result A_result_createObjectAction-createObjectAction","ownedEnd":[{"$type":"Property","$id":"A_result_createObjectAction-createObjectAction","$ns":"uml","name":"createObjectAction","type":"CreateObjectAction","subsettedProperty":"A_output_action-action","association":"A_result_createObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_createObjectAction-createObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_createLinkObjectAction","$ns":"uml","name":"A_result_createLinkObjectAction","memberEnd":"CreateLinkObjectAction-result A_result_createLinkObjectAction-createLinkObjectAction","ownedEnd":[{"$type":"Property","$id":"A_result_createLinkObjectAction-createLinkObjectAction","$ns":"uml","name":"createLinkObjectAction","type":"CreateLinkObjectAction","subsettedProperty":"A_output_action-action","association":"A_result_createLinkObjectAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_createLinkObjectAction-createLinkObjectAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_endData_createLinkAction","$ns":"uml","name":"A_endData_createLinkAction","memberEnd":"CreateLinkAction-endData A_endData_createLinkAction-createLinkAction","generalization":[{"$type":"Generalization","$id":"A_endData_createLinkAction-_generalization.0","$ns":"uml","general":"A_endData_linkAction"}],"ownedEnd":[{"$type":"Property","$id":"A_endData_createLinkAction-createLinkAction","$ns":"uml","name":"createLinkAction","type":"CreateLinkAction","redefinedProperty":"A_endData_linkAction-linkAction","association":"A_endData_createLinkAction"}]},{"$type":"Association","$id":"A_clause_conditionalNode","$ns":"uml","name":"A_clause_conditionalNode","memberEnd":"ConditionalNode-clause A_clause_conditionalNode-conditionalNode","ownedEnd":[{"$type":"Property","$id":"A_clause_conditionalNode-conditionalNode","$ns":"uml","name":"conditionalNode","type":"ConditionalNode","subsettedProperty":"Element-owner","association":"A_clause_conditionalNode"}]},{"$type":"Association","$id":"A_result_conditionalNode","$ns":"uml","name":"A_result_conditionalNode","memberEnd":"ConditionalNode-result A_result_conditionalNode-conditionalNode","ownedEnd":[{"$type":"Property","$id":"A_result_conditionalNode-conditionalNode","$ns":"uml","name":"conditionalNode","type":"ConditionalNode","subsettedProperty":"A_structuredNodeOutput_structuredActivityNode-structuredActivityNode","association":"A_result_conditionalNode","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_conditionalNode-conditionalNode-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_clearStructuralFeatureAction","$ns":"uml","name":"A_result_clearStructuralFeatureAction","memberEnd":"ClearStructuralFeatureAction-result A_result_clearStructuralFeatureAction-clearStructuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_result_clearStructuralFeatureAction-clearStructuralFeatureAction","$ns":"uml","name":"clearStructuralFeatureAction","type":"ClearStructuralFeatureAction","subsettedProperty":"A_output_action-action","association":"A_result_clearStructuralFeatureAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_clearStructuralFeatureAction-clearStructuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_object_clearAssociationAction","$ns":"uml","name":"A_object_clearAssociationAction","memberEnd":"ClearAssociationAction-object A_object_clearAssociationAction-clearAssociationAction","ownedEnd":[{"$type":"Property","$id":"A_object_clearAssociationAction-clearAssociationAction","$ns":"uml","name":"clearAssociationAction","type":"ClearAssociationAction","subsettedProperty":"A_input_action-action","association":"A_object_clearAssociationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_object_clearAssociationAction-clearAssociationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_association_clearAssociationAction","$ns":"uml","name":"A_association_clearAssociationAction","memberEnd":"ClearAssociationAction-association A_association_clearAssociationAction-clearAssociationAction","ownedEnd":[{"$type":"Property","$id":"A_association_clearAssociationAction-clearAssociationAction","$ns":"uml","name":"clearAssociationAction","type":"ClearAssociationAction","association":"A_association_clearAssociationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_association_clearAssociationAction-clearAssociationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_decider_clause","$ns":"uml","name":"A_decider_clause","memberEnd":"Clause-decider A_decider_clause-clause","ownedEnd":[{"$type":"Property","$id":"A_decider_clause-clause","$ns":"uml","name":"clause","type":"Clause","association":"A_decider_clause","lowerValue":[{"$type":"LiteralInteger","$id":"A_decider_clause-clause-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_bodyOutput_clause","$ns":"uml","name":"A_bodyOutput_clause","memberEnd":"Clause-bodyOutput A_bodyOutput_clause-clause","ownedEnd":[{"$type":"Property","$id":"A_bodyOutput_clause-clause","$ns":"uml","name":"clause","type":"Clause","association":"A_bodyOutput_clause","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_bodyOutput_clause-clause-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_bodyOutput_clause-clause-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_test_clause","$ns":"uml","name":"A_test_clause","memberEnd":"Clause-test A_test_clause-clause","ownedEnd":[{"$type":"Property","$id":"A_test_clause-clause","$ns":"uml","name":"clause","type":"Clause","association":"A_test_clause","lowerValue":[{"$type":"LiteralInteger","$id":"A_test_clause-clause-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_body_clause","$ns":"uml","name":"A_body_clause","memberEnd":"Clause-body A_body_clause-clause","ownedEnd":[{"$type":"Property","$id":"A_body_clause-clause","$ns":"uml","name":"clause","type":"Clause","association":"A_body_clause","lowerValue":[{"$type":"LiteralInteger","$id":"A_body_clause-clause-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_predecessorClause_successorClause","$ns":"uml","name":"A_predecessorClause_successorClause","memberEnd":"Clause-predecessorClause Clause-successorClause"},{"$type":"Association","$id":"A_target_callOperationAction","$ns":"uml","name":"A_target_callOperationAction","memberEnd":"CallOperationAction-target A_target_callOperationAction-callOperationAction","ownedEnd":[{"$type":"Property","$id":"A_target_callOperationAction-callOperationAction","$ns":"uml","name":"callOperationAction","type":"CallOperationAction","subsettedProperty":"A_input_action-action","association":"A_target_callOperationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_target_callOperationAction-callOperationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_operation_callOperationAction","$ns":"uml","name":"A_operation_callOperationAction","memberEnd":"CallOperationAction-operation A_operation_callOperationAction-callOperationAction","ownedEnd":[{"$type":"Property","$id":"A_operation_callOperationAction-callOperationAction","$ns":"uml","name":"callOperationAction","type":"CallOperationAction","association":"A_operation_callOperationAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_operation_callOperationAction-callOperationAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_operation_callOperationAction-callOperationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_behavior_callBehaviorAction","$ns":"uml","name":"A_behavior_callBehaviorAction","memberEnd":"CallBehaviorAction-behavior A_behavior_callBehaviorAction-callBehaviorAction","ownedEnd":[{"$type":"Property","$id":"A_behavior_callBehaviorAction-callBehaviorAction","$ns":"uml","name":"callBehaviorAction","type":"CallBehaviorAction","association":"A_behavior_callBehaviorAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_behavior_callBehaviorAction-callBehaviorAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_behavior_callBehaviorAction-callBehaviorAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_callAction","$ns":"uml","name":"A_result_callAction","memberEnd":"CallAction-result A_result_callAction-callAction","ownedEnd":[{"$type":"Property","$id":"A_result_callAction-callAction","$ns":"uml","name":"callAction","type":"CallAction","subsettedProperty":"A_output_action-action","association":"A_result_callAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_callAction-callAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_signal_broadcastSignalAction","$ns":"uml","name":"A_signal_broadcastSignalAction","memberEnd":"BroadcastSignalAction-signal A_signal_broadcastSignalAction-broadcastSignalAction","ownedEnd":[{"$type":"Property","$id":"A_signal_broadcastSignalAction-broadcastSignalAction","$ns":"uml","name":"broadcastSignalAction","type":"BroadcastSignalAction","association":"A_signal_broadcastSignalAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_signal_broadcastSignalAction-broadcastSignalAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_signal_broadcastSignalAction-broadcastSignalAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_insertAt_addVariableValueAction","$ns":"uml","name":"A_insertAt_addVariableValueAction","memberEnd":"AddVariableValueAction-insertAt A_insertAt_addVariableValueAction-addVariableValueAction","ownedEnd":[{"$type":"Property","$id":"A_insertAt_addVariableValueAction-addVariableValueAction","$ns":"uml","name":"addVariableValueAction","type":"AddVariableValueAction","subsettedProperty":"A_input_action-action","association":"A_insertAt_addVariableValueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_insertAt_addVariableValueAction-addVariableValueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_insertAt_addStructuralFeatureValueAction","$ns":"uml","name":"A_insertAt_addStructuralFeatureValueAction","memberEnd":"AddStructuralFeatureValueAction-insertAt A_insertAt_addStructuralFeatureValueAction-addStructuralFeatureValueAction","ownedEnd":[{"$type":"Property","$id":"A_insertAt_addStructuralFeatureValueAction-addStructuralFeatureValueAction","$ns":"uml","name":"addStructuralFeatureValueAction","type":"AddStructuralFeatureValueAction","subsettedProperty":"A_input_action-action","association":"A_insertAt_addStructuralFeatureValueAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_insertAt_addStructuralFeatureValueAction-addStructuralFeatureValueAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_fromAction_actionInputPin","$ns":"uml","name":"A_fromAction_actionInputPin","memberEnd":"ActionInputPin-fromAction A_fromAction_actionInputPin-actionInputPin","ownedEnd":[{"$type":"Property","$id":"A_fromAction_actionInputPin-actionInputPin","$ns":"uml","name":"actionInputPin","type":"ActionInputPin","subsettedProperty":"Element-owner","association":"A_fromAction_actionInputPin","lowerValue":[{"$type":"LiteralInteger","$id":"A_fromAction_actionInputPin-actionInputPin-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_output_action","$ns":"uml","name":"A_output_action","memberEnd":"Action-output A_output_action-action","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_output_action-action","$ns":"uml","name":"action","type":"Action","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Element-owner","association":"A_output_action","lowerValue":[{"$type":"LiteralInteger","$id":"A_output_action-action-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_context_action","$ns":"uml","name":"A_context_action","memberEnd":"Action-context A_context_action-action","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_context_action-action","$ns":"uml","name":"action","type":"Action","association":"A_context_action","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_context_action-action-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_context_action-action-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_input_action","$ns":"uml","name":"A_input_action","memberEnd":"Action-input A_input_action-action","isDerived":"true","ownedEnd":[{"$type":"Property","$id":"A_input_action-action","$ns":"uml","name":"action","type":"Action","isReadOnly":"true","isDerived":"true","isDerivedUnion":"true","subsettedProperty":"Element-owner","association":"A_input_action","lowerValue":[{"$type":"LiteralInteger","$id":"A_input_action-action-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_localPrecondition_action","$ns":"uml","name":"A_localPrecondition_action","memberEnd":"Action-localPrecondition A_localPrecondition_action-action","ownedEnd":[{"$type":"Property","$id":"A_localPrecondition_action-action","$ns":"uml","name":"action","type":"Action","subsettedProperty":"Element-owner","association":"A_localPrecondition_action","lowerValue":[{"$type":"LiteralInteger","$id":"A_localPrecondition_action-action-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_localPostcondition_action","$ns":"uml","name":"A_localPostcondition_action","memberEnd":"Action-localPostcondition A_localPostcondition_action-action","ownedEnd":[{"$type":"Property","$id":"A_localPostcondition_action-action","$ns":"uml","name":"action","type":"Action","subsettedProperty":"Element-owner","association":"A_localPostcondition_action","lowerValue":[{"$type":"LiteralInteger","$id":"A_localPostcondition_action-action-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_trigger_acceptEventAction","$ns":"uml","name":"A_trigger_acceptEventAction","memberEnd":"AcceptEventAction-trigger A_trigger_acceptEventAction-acceptEventAction","ownedEnd":[{"$type":"Property","$id":"A_trigger_acceptEventAction-acceptEventAction","$ns":"uml","name":"acceptEventAction","type":"AcceptEventAction","subsettedProperty":"Element-owner","association":"A_trigger_acceptEventAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_trigger_acceptEventAction-acceptEventAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_acceptEventAction","$ns":"uml","name":"A_result_acceptEventAction","memberEnd":"AcceptEventAction-result A_result_acceptEventAction-acceptEventAction","ownedEnd":[{"$type":"Property","$id":"A_result_acceptEventAction-acceptEventAction","$ns":"uml","name":"acceptEventAction","type":"AcceptEventAction","subsettedProperty":"A_output_action-action","association":"A_result_acceptEventAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_acceptEventAction-acceptEventAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_returnInformation_acceptCallAction","$ns":"uml","name":"A_returnInformation_acceptCallAction","memberEnd":"AcceptCallAction-returnInformation A_returnInformation_acceptCallAction-acceptCallAction","ownedEnd":[{"$type":"Property","$id":"A_returnInformation_acceptCallAction-acceptCallAction","$ns":"uml","name":"acceptCallAction","type":"AcceptCallAction","subsettedProperty":"A_output_action-action","association":"A_returnInformation_acceptCallAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_returnInformation_acceptCallAction-acceptCallAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_writeVariableAction","$ns":"uml","name":"A_value_writeVariableAction","memberEnd":"WriteVariableAction-value A_value_writeVariableAction-writeVariableAction","ownedEnd":[{"$type":"Property","$id":"A_value_writeVariableAction-writeVariableAction","$ns":"uml","name":"writeVariableAction","type":"WriteVariableAction","subsettedProperty":"A_input_action-action","association":"A_value_writeVariableAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_writeVariableAction-writeVariableAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_writeStructuralFeatureAction","$ns":"uml","name":"A_result_writeStructuralFeatureAction","memberEnd":"WriteStructuralFeatureAction-result A_result_writeStructuralFeatureAction-writeStructuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_result_writeStructuralFeatureAction-writeStructuralFeatureAction","$ns":"uml","name":"writeStructuralFeatureAction","type":"WriteStructuralFeatureAction","subsettedProperty":"A_output_action-action","association":"A_result_writeStructuralFeatureAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_writeStructuralFeatureAction-writeStructuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_writeStructuralFeatureAction","$ns":"uml","name":"A_value_writeStructuralFeatureAction","memberEnd":"WriteStructuralFeatureAction-value A_value_writeStructuralFeatureAction-writeStructuralFeatureAction","ownedEnd":[{"$type":"Property","$id":"A_value_writeStructuralFeatureAction-writeStructuralFeatureAction","$ns":"uml","name":"writeStructuralFeatureAction","type":"WriteStructuralFeatureAction","subsettedProperty":"A_input_action-action","association":"A_value_writeStructuralFeatureAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_writeStructuralFeatureAction-writeStructuralFeatureAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_variable_variableAction","$ns":"uml","name":"A_variable_variableAction","memberEnd":"VariableAction-variable A_variable_variableAction-variableAction","ownedEnd":[{"$type":"Property","$id":"A_variable_variableAction-variableAction","$ns":"uml","name":"variableAction","type":"VariableAction","association":"A_variable_variableAction","upperValue":[{"$type":"LiteralUnlimitedNatural","$id":"A_variable_variableAction-variableAction-_upperValue","$ns":"uml","value":"*"}],"lowerValue":[{"$type":"LiteralInteger","$id":"A_variable_variableAction-variableAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_result_valueSpecificationAction","$ns":"uml","name":"A_result_valueSpecificationAction","memberEnd":"ValueSpecificationAction-result A_result_valueSpecificationAction-valueSpecificationAction","ownedEnd":[{"$type":"Property","$id":"A_result_valueSpecificationAction-valueSpecificationAction","$ns":"uml","name":"valueSpecificationAction","type":"ValueSpecificationAction","subsettedProperty":"A_output_action-action","association":"A_result_valueSpecificationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_result_valueSpecificationAction-valueSpecificationAction-_lowerValue","$ns":"uml"}]}]},{"$type":"Association","$id":"A_value_valueSpecificationAction","$ns":"uml","name":"A_value_valueSpecificationAction","memberEnd":"ValueSpecificationAction-value A_value_valueSpecificationAction-valueSpecificationAction","ownedEnd":[{"$type":"Property","$id":"A_value_valueSpecificationAction-valueSpecificationAction","$ns":"uml","name":"valueSpecificationAction","type":"ValueSpecificationAction","subsettedProperty":"Element-owner","association":"A_value_valueSpecificationAction","lowerValue":[{"$type":"LiteralInteger","$id":"A_value_valueSpecificationAction-valueSpecificationAction-_lowerValue","$ns":"uml"}]}]}]}]},{"$type":"Tag","$id":"_1","$ns":"mofext","name":"org.omg.xmi.nsPrefix","value":"uml","element":"_0"}]}