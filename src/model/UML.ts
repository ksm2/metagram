import { Entity } from './Entity';


export enum ObjectNodeOrderingKind {
  unordered,
  ordered,
  LIFO,
  FIFO,
}

export interface IActivity extends IBehavior {
  edge?: IActivityEdge[];
  group?: IActivityGroup[];
  isReadOnly: boolean;
  isSingleExecution: boolean;
  node?: IActivityNode[];
  partition?: IActivityPartition[];
  structuredNode?: IStructuredActivityNode[];
  variable?: IVariable[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Activity extends Entity implements IActivity {

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set group(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('group', value);
  }

  get group(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('group');
  }

  set isReadOnly(value: boolean) {
    this.setBoolean('isReadOnly', value);
  }

  get isReadOnly(): boolean {
    const value = this.getBoolean('isReadOnly');
    if (!value) throw 'The value of isReadOnly is not set';
    return value;
  }

  set isSingleExecution(value: boolean) {
    this.setBoolean('isSingleExecution', value);
  }

  get isSingleExecution(): boolean {
    const value = this.getBoolean('isSingleExecution');
    if (!value) throw 'The value of isSingleExecution is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set partition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('partition', value);
  }

  get partition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('partition');
  }

  set structuredNode(value: StructuredActivityNode[] | undefined) {
    this.setElements<StructuredActivityNode>('structuredNode', value);
  }

  get structuredNode(): StructuredActivityNode[] | undefined {
    return this.getElements<StructuredActivityNode>('structuredNode');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IActivityEdge extends IRedefinableElement {
  activity?: IActivity;
  guard?: IValueSpecification;
  inGroup?: IActivityGroup[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  interrupts?: IInterruptibleActivityRegion;
  redefinedEdge?: IActivityEdge[];
  source: IActivityNode;
  target: IActivityNode;
  weight?: IValueSpecification;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityEdge extends Entity implements IActivityEdge {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set guard(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('guard', value);
  }

  get guard(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('guard');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set interrupts(value: InterruptibleActivityRegion | undefined) {
    this.setElement<InterruptibleActivityRegion>('interrupts', value);
  }

  get interrupts(): InterruptibleActivityRegion | undefined {
    return this.getElement<InterruptibleActivityRegion>('interrupts');
  }

  set redefinedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('redefinedEdge', value);
  }

  get redefinedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('redefinedEdge');
  }

  set source(value: ActivityNode) {
    this.setElement<ActivityNode>('source', value);
  }

  get source(): ActivityNode {
    const value = this.getElement<ActivityNode>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: ActivityNode) {
    this.setElement<ActivityNode>('target', value);
  }

  get target(): ActivityNode {
    const value = this.getElement<ActivityNode>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set weight(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('weight', value);
  }

  get weight(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('weight');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActivityFinalNode extends IFinalNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityFinalNode extends Entity implements IActivityFinalNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActivityGroup extends INamedElement {
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityGroup extends Entity implements IActivityGroup {

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActivityNode extends IRedefinableElement {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityNode extends Entity implements IActivityNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActivityParameterNode extends IObjectNode {
  parameter: IParameter;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityParameterNode extends Entity implements IActivityParameterNode {

  set parameter(value: Parameter) {
    this.setElement<Parameter>('parameter', value);
  }

  get parameter(): Parameter {
    const value = this.getElement<Parameter>('parameter');
    if (!value) throw 'The value of parameter is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActivityPartition extends IActivityGroup {
  edge?: IActivityEdge[];
  isDimension: boolean;
  isExternal: boolean;
  node?: IActivityNode[];
  represents?: IElement;
  subpartition?: IActivityPartition[];
  superPartition?: IActivityPartition;
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActivityPartition extends Entity implements IActivityPartition {

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set isDimension(value: boolean) {
    this.setBoolean('isDimension', value);
  }

  get isDimension(): boolean {
    const value = this.getBoolean('isDimension');
    if (!value) throw 'The value of isDimension is not set';
    return value;
  }

  set isExternal(value: boolean) {
    this.setBoolean('isExternal', value);
  }

  get isExternal(): boolean {
    const value = this.getBoolean('isExternal');
    if (!value) throw 'The value of isExternal is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set represents(value: Element | undefined) {
    this.setElement<Element>('represents', value);
  }

  get represents(): Element | undefined {
    return this.getElement<Element>('represents');
  }

  set subpartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('subpartition', value);
  }

  get subpartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('subpartition');
  }

  set superPartition(value: ActivityPartition | undefined) {
    this.setElement<ActivityPartition>('superPartition', value);
  }

  get superPartition(): ActivityPartition | undefined {
    return this.getElement<ActivityPartition>('superPartition');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICentralBufferNode extends IObjectNode {
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CentralBufferNode extends Entity implements ICentralBufferNode {

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IControlFlow extends IActivityEdge {
  activity?: IActivity;
  guard?: IValueSpecification;
  inGroup?: IActivityGroup[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  interrupts?: IInterruptibleActivityRegion;
  redefinedEdge?: IActivityEdge[];
  source: IActivityNode;
  target: IActivityNode;
  weight?: IValueSpecification;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ControlFlow extends Entity implements IControlFlow {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set guard(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('guard', value);
  }

  get guard(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('guard');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set interrupts(value: InterruptibleActivityRegion | undefined) {
    this.setElement<InterruptibleActivityRegion>('interrupts', value);
  }

  get interrupts(): InterruptibleActivityRegion | undefined {
    return this.getElement<InterruptibleActivityRegion>('interrupts');
  }

  set redefinedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('redefinedEdge', value);
  }

  get redefinedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('redefinedEdge');
  }

  set source(value: ActivityNode) {
    this.setElement<ActivityNode>('source', value);
  }

  get source(): ActivityNode {
    const value = this.getElement<ActivityNode>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: ActivityNode) {
    this.setElement<ActivityNode>('target', value);
  }

  get target(): ActivityNode {
    const value = this.getElement<ActivityNode>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set weight(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('weight', value);
  }

  get weight(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('weight');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IControlNode extends IActivityNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ControlNode extends Entity implements IControlNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDataStoreNode extends ICentralBufferNode {
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DataStoreNode extends Entity implements IDataStoreNode {

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDecisionNode extends IControlNode {
  decisionInput?: IBehavior;
  decisionInputFlow?: IObjectFlow;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DecisionNode extends Entity implements IDecisionNode {

  set decisionInput(value: Behavior | undefined) {
    this.setElement<Behavior>('decisionInput', value);
  }

  get decisionInput(): Behavior | undefined {
    return this.getElement<Behavior>('decisionInput');
  }

  set decisionInputFlow(value: ObjectFlow | undefined) {
    this.setElement<ObjectFlow>('decisionInputFlow', value);
  }

  get decisionInputFlow(): ObjectFlow | undefined {
    return this.getElement<ObjectFlow>('decisionInputFlow');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExceptionHandler extends IElement {
  exceptionInput: IObjectNode;
  exceptionType: IClassifier[];
  handlerBody: IExecutableNode;
  protectedNode: IExecutableNode;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExceptionHandler extends Entity implements IExceptionHandler {

  set exceptionInput(value: ObjectNode) {
    this.setElement<ObjectNode>('exceptionInput', value);
  }

  get exceptionInput(): ObjectNode {
    const value = this.getElement<ObjectNode>('exceptionInput');
    if (!value) throw 'The value of exceptionInput is not set';
    return value;
  }

  set exceptionType(value: Classifier[]) {
    this.setElements<Classifier>('exceptionType', value);
  }

  get exceptionType(): Classifier[] {
    const value = this.getElements<Classifier>('exceptionType');
    if (!value) throw 'The value of exceptionType is not set';
    return value;
  }

  set handlerBody(value: ExecutableNode) {
    this.setElement<ExecutableNode>('handlerBody', value);
  }

  get handlerBody(): ExecutableNode {
    const value = this.getElement<ExecutableNode>('handlerBody');
    if (!value) throw 'The value of handlerBody is not set';
    return value;
  }

  set protectedNode(value: ExecutableNode) {
    this.setElement<ExecutableNode>('protectedNode', value);
  }

  get protectedNode(): ExecutableNode {
    const value = this.getElement<ExecutableNode>('protectedNode');
    if (!value) throw 'The value of protectedNode is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExecutableNode extends IActivityNode {
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExecutableNode extends Entity implements IExecutableNode {

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IFinalNode extends IControlNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class FinalNode extends Entity implements IFinalNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IFlowFinalNode extends IFinalNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class FlowFinalNode extends Entity implements IFlowFinalNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IForkNode extends IControlNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ForkNode extends Entity implements IForkNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInitialNode extends IControlNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InitialNode extends Entity implements IInitialNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInterruptibleActivityRegion extends IActivityGroup {
  interruptingEdge?: IActivityEdge[];
  node?: IActivityNode[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InterruptibleActivityRegion extends Entity implements IInterruptibleActivityRegion {

  set interruptingEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('interruptingEdge', value);
  }

  get interruptingEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('interruptingEdge');
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IJoinNode extends IControlNode {
  isCombineDuplicate: boolean;
  joinSpec?: IValueSpecification;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class JoinNode extends Entity implements IJoinNode {

  set isCombineDuplicate(value: boolean) {
    this.setBoolean('isCombineDuplicate', value);
  }

  get isCombineDuplicate(): boolean {
    const value = this.getBoolean('isCombineDuplicate');
    if (!value) throw 'The value of isCombineDuplicate is not set';
    return value;
  }

  set joinSpec(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('joinSpec', value);
  }

  get joinSpec(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('joinSpec');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IMergeNode extends IControlNode {
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class MergeNode extends Entity implements IMergeNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IObjectFlow extends IActivityEdge {
  isMulticast: boolean;
  isMultireceive: boolean;
  selection?: IBehavior;
  transformation?: IBehavior;
  activity?: IActivity;
  guard?: IValueSpecification;
  inGroup?: IActivityGroup[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  interrupts?: IInterruptibleActivityRegion;
  redefinedEdge?: IActivityEdge[];
  source: IActivityNode;
  target: IActivityNode;
  weight?: IValueSpecification;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ObjectFlow extends Entity implements IObjectFlow {

  set isMulticast(value: boolean) {
    this.setBoolean('isMulticast', value);
  }

  get isMulticast(): boolean {
    const value = this.getBoolean('isMulticast');
    if (!value) throw 'The value of isMulticast is not set';
    return value;
  }

  set isMultireceive(value: boolean) {
    this.setBoolean('isMultireceive', value);
  }

  get isMultireceive(): boolean {
    const value = this.getBoolean('isMultireceive');
    if (!value) throw 'The value of isMultireceive is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set transformation(value: Behavior | undefined) {
    this.setElement<Behavior>('transformation', value);
  }

  get transformation(): Behavior | undefined {
    return this.getElement<Behavior>('transformation');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set guard(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('guard', value);
  }

  get guard(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('guard');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set interrupts(value: InterruptibleActivityRegion | undefined) {
    this.setElement<InterruptibleActivityRegion>('interrupts', value);
  }

  get interrupts(): InterruptibleActivityRegion | undefined {
    return this.getElement<InterruptibleActivityRegion>('interrupts');
  }

  set redefinedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('redefinedEdge', value);
  }

  get redefinedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('redefinedEdge');
  }

  set source(value: ActivityNode) {
    this.setElement<ActivityNode>('source', value);
  }

  get source(): ActivityNode {
    const value = this.getElement<ActivityNode>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: ActivityNode) {
    this.setElement<ActivityNode>('target', value);
  }

  get target(): ActivityNode {
    const value = this.getElement<ActivityNode>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set weight(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('weight', value);
  }

  get weight(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('weight');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IObjectNode extends ITypedElement, IActivityNode {
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ObjectNode extends Entity implements IObjectNode {

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IVariable extends IConnectableElement, IMultiplicityElement {
  activityScope?: IActivity;
  scope?: IStructuredActivityNode;
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  owningTemplateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
}

export class Variable extends Entity implements IVariable {

  set activityScope(value: Activity | undefined) {
    this.setElement<Activity>('activityScope', value);
  }

  get activityScope(): Activity | undefined {
    return this.getElement<Activity>('activityScope');
  }

  set scope(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('scope', value);
  }

  get scope(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('scope');
  }

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }
}



export interface IDuration extends IValueSpecification {
  expr?: IValueSpecification;
  observation?: IObservation[];
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Duration extends Entity implements IDuration {

  set expr(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('expr', value);
  }

  get expr(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('expr');
  }

  set observation(value: Observation[] | undefined) {
    this.setElements<Observation>('observation', value);
  }

  get observation(): Observation[] | undefined {
    return this.getElements<Observation>('observation');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDurationConstraint extends IIntervalConstraint {
  firstEvent?: boolean[];
  specification: IValueSpecification;
  constrainedElement?: IElement[];
  context?: INamespace;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DurationConstraint extends Entity implements IDurationConstraint {

  set firstEvent(value: boolean[] | undefined) {
    this.setBooleans('firstEvent', value);
  }

  get firstEvent(): boolean[] | undefined {
    return this.getBooleans('firstEvent');
  }

  set specification(value: ValueSpecification) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('specification');
    if (!value) throw 'The value of specification is not set';
    return value;
  }

  set constrainedElement(value: Element[] | undefined) {
    this.setElements<Element>('constrainedElement', value);
  }

  get constrainedElement(): Element[] | undefined {
    return this.getElements<Element>('constrainedElement');
  }

  set context(value: Namespace | undefined) {
    this.setElement<Namespace>('context', value);
  }

  get context(): Namespace | undefined {
    return this.getElement<Namespace>('context');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDurationInterval extends IInterval {
  max: IValueSpecification;
  min: IValueSpecification;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DurationInterval extends Entity implements IDurationInterval {

  set max(value: ValueSpecification) {
    this.setElement<ValueSpecification>('max', value);
  }

  get max(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('max');
    if (!value) throw 'The value of max is not set';
    return value;
  }

  set min(value: ValueSpecification) {
    this.setElement<ValueSpecification>('min', value);
  }

  get min(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('min');
    if (!value) throw 'The value of min is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDurationObservation extends IObservation {
  event: INamedElement[];
  firstEvent?: boolean[];
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DurationObservation extends Entity implements IDurationObservation {

  set event(value: NamedElement[]) {
    this.setElements<NamedElement>('event', value);
  }

  get event(): NamedElement[] {
    const value = this.getElements<NamedElement>('event');
    if (!value) throw 'The value of event is not set';
    return value;
  }

  set firstEvent(value: boolean[] | undefined) {
    this.setBooleans('firstEvent', value);
  }

  get firstEvent(): boolean[] | undefined {
    return this.getBooleans('firstEvent');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExpression extends IValueSpecification {
  operand?: IValueSpecification[];
  symbol?: string;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Expression extends Entity implements IExpression {

  set operand(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('operand', value);
  }

  get operand(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('operand');
  }

  set symbol(value: string | undefined) {
    this.setString('symbol', value);
  }

  get symbol(): string | undefined {
    return this.getString('symbol');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInterval extends IValueSpecification {
  max: IValueSpecification;
  min: IValueSpecification;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Interval extends Entity implements IInterval {

  set max(value: ValueSpecification) {
    this.setElement<ValueSpecification>('max', value);
  }

  get max(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('max');
    if (!value) throw 'The value of max is not set';
    return value;
  }

  set min(value: ValueSpecification) {
    this.setElement<ValueSpecification>('min', value);
  }

  get min(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('min');
    if (!value) throw 'The value of min is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IIntervalConstraint extends IConstraint {
  specification: IValueSpecification;
  constrainedElement?: IElement[];
  context?: INamespace;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class IntervalConstraint extends Entity implements IIntervalConstraint {

  set specification(value: ValueSpecification) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('specification');
    if (!value) throw 'The value of specification is not set';
    return value;
  }

  set constrainedElement(value: Element[] | undefined) {
    this.setElements<Element>('constrainedElement', value);
  }

  get constrainedElement(): Element[] | undefined {
    return this.getElements<Element>('constrainedElement');
  }

  set context(value: Namespace | undefined) {
    this.setElement<Namespace>('context', value);
  }

  get context(): Namespace | undefined {
    return this.getElement<Namespace>('context');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralBoolean extends ILiteralSpecification {
  value: boolean;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralBoolean extends Entity implements ILiteralBoolean {

  set value(value: boolean) {
    this.setBoolean('value', value);
  }

  get value(): boolean {
    const value = this.getBoolean('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralInteger extends ILiteralSpecification {
  value: number;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralInteger extends Entity implements ILiteralInteger {

  set value(value: number) {
    this.setInteger('value', value);
  }

  get value(): number {
    const value = this.getInteger('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralNull extends ILiteralSpecification {
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralNull extends Entity implements ILiteralNull {

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralReal extends ILiteralSpecification {
  value: number;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralReal extends Entity implements ILiteralReal {

  set value(value: number) {
    this.setFloat('value', value);
  }

  get value(): number {
    const value = this.getFloat('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralSpecification extends IValueSpecification {
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralSpecification extends Entity implements ILiteralSpecification {

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralString extends ILiteralSpecification {
  value?: string;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralString extends Entity implements ILiteralString {

  set value(value: string | undefined) {
    this.setString('value', value);
  }

  get value(): string | undefined {
    return this.getString('value');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILiteralUnlimitedNatural extends ILiteralSpecification {
  value: number;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LiteralUnlimitedNatural extends Entity implements ILiteralUnlimitedNatural {

  set value(value: number) {
    this.setFloat('value', value);
  }

  get value(): number {
    const value = this.getFloat('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IObservation extends IPackageableElement {
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Observation extends Entity implements IObservation {

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IOpaqueExpression extends IValueSpecification {
  behavior?: IBehavior;
  body?: string[];
  language?: string[];
  result?: IParameter;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class OpaqueExpression extends Entity implements IOpaqueExpression {

  set behavior(value: Behavior | undefined) {
    this.setElement<Behavior>('behavior', value);
  }

  get behavior(): Behavior | undefined {
    return this.getElement<Behavior>('behavior');
  }

  set body(value: string[] | undefined) {
    this.setStrings('body', value);
  }

  get body(): string[] | undefined {
    return this.getStrings('body');
  }

  set language(value: string[] | undefined) {
    this.setStrings('language', value);
  }

  get language(): string[] | undefined {
    return this.getStrings('language');
  }

  set result(value: Parameter | undefined) {
    this.setElement<Parameter>('result', value);
  }

  get result(): Parameter | undefined {
    return this.getElement<Parameter>('result');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStringExpression extends ITemplateableElement, IExpression {
  owningExpression?: IStringExpression;
  subExpression?: IStringExpression[];
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  operand?: IValueSpecification[];
  symbol?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
}

export class StringExpression extends Entity implements IStringExpression {

  set owningExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('owningExpression', value);
  }

  get owningExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('owningExpression');
  }

  set subExpression(value: StringExpression[] | undefined) {
    this.setElements<StringExpression>('subExpression', value);
  }

  get subExpression(): StringExpression[] | undefined {
    return this.getElements<StringExpression>('subExpression');
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set operand(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('operand', value);
  }

  get operand(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('operand');
  }

  set symbol(value: string | undefined) {
    this.setString('symbol', value);
  }

  get symbol(): string | undefined {
    return this.getString('symbol');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }
}
export interface ITimeConstraint extends IIntervalConstraint {
  firstEvent?: boolean;
  specification: IValueSpecification;
  constrainedElement?: IElement[];
  context?: INamespace;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TimeConstraint extends Entity implements ITimeConstraint {

  set firstEvent(value: boolean | undefined) {
    this.setBoolean('firstEvent', value);
  }

  get firstEvent(): boolean | undefined {
    return this.getBoolean('firstEvent');
  }

  set specification(value: ValueSpecification) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('specification');
    if (!value) throw 'The value of specification is not set';
    return value;
  }

  set constrainedElement(value: Element[] | undefined) {
    this.setElements<Element>('constrainedElement', value);
  }

  get constrainedElement(): Element[] | undefined {
    return this.getElements<Element>('constrainedElement');
  }

  set context(value: Namespace | undefined) {
    this.setElement<Namespace>('context', value);
  }

  get context(): Namespace | undefined {
    return this.getElement<Namespace>('context');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITimeExpression extends IValueSpecification {
  expr?: IValueSpecification;
  observation?: IObservation[];
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TimeExpression extends Entity implements ITimeExpression {

  set expr(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('expr', value);
  }

  get expr(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('expr');
  }

  set observation(value: Observation[] | undefined) {
    this.setElements<Observation>('observation', value);
  }

  get observation(): Observation[] | undefined {
    return this.getElements<Observation>('observation');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITimeInterval extends IInterval {
  max: IValueSpecification;
  min: IValueSpecification;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TimeInterval extends Entity implements ITimeInterval {

  set max(value: ValueSpecification) {
    this.setElement<ValueSpecification>('max', value);
  }

  get max(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('max');
    if (!value) throw 'The value of max is not set';
    return value;
  }

  set min(value: ValueSpecification) {
    this.setElement<ValueSpecification>('min', value);
  }

  get min(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('min');
    if (!value) throw 'The value of min is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITimeObservation extends IObservation {
  event: INamedElement;
  firstEvent: boolean;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TimeObservation extends Entity implements ITimeObservation {

  set event(value: NamedElement) {
    this.setElement<NamedElement>('event', value);
  }

  get event(): NamedElement {
    const value = this.getElement<NamedElement>('event');
    if (!value) throw 'The value of event is not set';
    return value;
  }

  set firstEvent(value: boolean) {
    this.setBoolean('firstEvent', value);
  }

  get firstEvent(): boolean {
    const value = this.getBoolean('firstEvent');
    if (!value) throw 'The value of firstEvent is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IValueSpecification extends ITypedElement, IPackageableElement {
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ValueSpecification extends Entity implements IValueSpecification {

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}



export interface IActor extends IBehavioredClassifier {
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Actor extends Entity implements IActor {

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IExtend extends INamedElement, IDirectedRelationship {
  condition?: IConstraint;
  extendedCase: IUseCase;
  extension: IUseCase;
  extensionLocation: IExtensionPoint[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  source: IElement[];
  target: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  relatedElement: IElement[];
}

export class Extend extends Entity implements IExtend {

  set condition(value: Constraint | undefined) {
    this.setElement<Constraint>('condition', value);
  }

  get condition(): Constraint | undefined {
    return this.getElement<Constraint>('condition');
  }

  set extendedCase(value: UseCase) {
    this.setElement<UseCase>('extendedCase', value);
  }

  get extendedCase(): UseCase {
    const value = this.getElement<UseCase>('extendedCase');
    if (!value) throw 'The value of extendedCase is not set';
    return value;
  }

  set extension(value: UseCase) {
    this.setElement<UseCase>('extension', value);
  }

  get extension(): UseCase {
    const value = this.getElement<UseCase>('extension');
    if (!value) throw 'The value of extension is not set';
    return value;
  }

  set extensionLocation(value: ExtensionPoint[]) {
    this.setElements<ExtensionPoint>('extensionLocation', value);
  }

  get extensionLocation(): ExtensionPoint[] {
    const value = this.getElements<ExtensionPoint>('extensionLocation');
    if (!value) throw 'The value of extensionLocation is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }
}
export interface IExtensionPoint extends IRedefinableElement {
  useCase: IUseCase;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExtensionPoint extends Entity implements IExtensionPoint {

  set useCase(value: UseCase) {
    this.setElement<UseCase>('useCase', value);
  }

  get useCase(): UseCase {
    const value = this.getElement<UseCase>('useCase');
    if (!value) throw 'The value of useCase is not set';
    return value;
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInclude extends IDirectedRelationship, INamedElement {
  addition: IUseCase;
  includingCase: IUseCase;
  source: IElement[];
  target: IElement[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Include extends Entity implements IInclude {

  set addition(value: UseCase) {
    this.setElement<UseCase>('addition', value);
  }

  get addition(): UseCase {
    const value = this.getElement<UseCase>('addition');
    if (!value) throw 'The value of addition is not set';
    return value;
  }

  set includingCase(value: UseCase) {
    this.setElement<UseCase>('includingCase', value);
  }

  get includingCase(): UseCase {
    const value = this.getElement<UseCase>('includingCase');
    if (!value) throw 'The value of includingCase is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IUseCase extends IBehavioredClassifier {
  extend?: IExtend[];
  extensionPoint?: IExtensionPoint[];
  include?: IInclude[];
  subject?: IClassifier[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class UseCase extends Entity implements IUseCase {

  set extend(value: Extend[] | undefined) {
    this.setElements<Extend>('extend', value);
  }

  get extend(): Extend[] | undefined {
    return this.getElements<Extend>('extend');
  }

  set extensionPoint(value: ExtensionPoint[] | undefined) {
    this.setElements<ExtensionPoint>('extensionPoint', value);
  }

  get extensionPoint(): ExtensionPoint[] | undefined {
    return this.getElements<ExtensionPoint>('extensionPoint');
  }

  set include(value: Include[] | undefined) {
    this.setElements<Include>('include', value);
  }

  get include(): Include[] | undefined {
    return this.getElements<Include>('include');
  }

  set subject(value: Classifier[] | undefined) {
    this.setElements<Classifier>('subject', value);
  }

  get subject(): Classifier[] | undefined {
    return this.getElements<Classifier>('subject');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}


export enum ConnectorKind {
  assembly,
  delegation,
}

export interface IAssociation extends IRelationship, IClassifier {
  endType: IType[];
  isDerived: boolean;
  memberEnd: IProperty[];
  navigableOwnedEnd?: IProperty[];
  ownedEnd?: IProperty[];
  relatedElement: IElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
}

export class Association extends Entity implements IAssociation {

  set endType(value: Type[]) {
    this.setElements<Type>('endType', value);
  }

  get endType(): Type[] {
    const value = this.getElements<Type>('endType');
    if (!value) throw 'The value of endType is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set memberEnd(value: Property[]) {
    this.setElements<Property>('memberEnd', value);
  }

  get memberEnd(): Property[] {
    const value = this.getElements<Property>('memberEnd');
    if (!value) throw 'The value of memberEnd is not set';
    return value;
  }

  set navigableOwnedEnd(value: Property[] | undefined) {
    this.setElements<Property>('navigableOwnedEnd', value);
  }

  get navigableOwnedEnd(): Property[] | undefined {
    return this.getElements<Property>('navigableOwnedEnd');
  }

  set ownedEnd(value: Property[] | undefined) {
    this.setElements<Property>('ownedEnd', value);
  }

  get ownedEnd(): Property[] | undefined {
    return this.getElements<Property>('ownedEnd');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IAssociationClass extends IClass, IAssociation {
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  endType: IType[];
  isDerived: boolean;
  memberEnd: IProperty[];
  navigableOwnedEnd?: IProperty[];
  ownedEnd?: IProperty[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  relatedElement: IElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
}

export class AssociationClass extends Entity implements IAssociationClass {

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set endType(value: Type[]) {
    this.setElements<Type>('endType', value);
  }

  get endType(): Type[] {
    const value = this.getElements<Type>('endType');
    if (!value) throw 'The value of endType is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set memberEnd(value: Property[]) {
    this.setElements<Property>('memberEnd', value);
  }

  get memberEnd(): Property[] {
    const value = this.getElements<Property>('memberEnd');
    if (!value) throw 'The value of memberEnd is not set';
    return value;
  }

  set navigableOwnedEnd(value: Property[] | undefined) {
    this.setElements<Property>('navigableOwnedEnd', value);
  }

  get navigableOwnedEnd(): Property[] | undefined {
    return this.getElements<Property>('navigableOwnedEnd');
  }

  set ownedEnd(value: Property[] | undefined) {
    this.setElements<Property>('ownedEnd', value);
  }

  get ownedEnd(): Property[] | undefined {
    return this.getElements<Property>('ownedEnd');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IClass extends IBehavioredClassifier, IEncapsulatedClassifier {
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Class extends Entity implements IClass {

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ICollaboration extends IStructuredClassifier, IBehavioredClassifier {
  collaborationRole?: IConnectableElement[];
  ownedAttribute?: IProperty[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Collaboration extends Entity implements ICollaboration {

  set collaborationRole(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('collaborationRole', value);
  }

  get collaborationRole(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('collaborationRole');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ICollaborationUse extends INamedElement {
  roleBinding?: IDependency[];
  type: ICollaboration;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CollaborationUse extends Entity implements ICollaborationUse {

  set roleBinding(value: Dependency[] | undefined) {
    this.setElements<Dependency>('roleBinding', value);
  }

  get roleBinding(): Dependency[] | undefined {
    return this.getElements<Dependency>('roleBinding');
  }

  set type(value: Collaboration) {
    this.setElement<Collaboration>('type', value);
  }

  get type(): Collaboration {
    const value = this.getElement<Collaboration>('type');
    if (!value) throw 'The value of type is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IComponent extends IClass {
  isIndirectlyInstantiated: boolean;
  packagedElement?: IPackageableElement[];
  provided?: IInterface[];
  realization?: IComponentRealization[];
  required?: IInterface[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Component extends Entity implements IComponent {

  set isIndirectlyInstantiated(value: boolean) {
    this.setBoolean('isIndirectlyInstantiated', value);
  }

  get isIndirectlyInstantiated(): boolean {
    const value = this.getBoolean('isIndirectlyInstantiated');
    if (!value) throw 'The value of isIndirectlyInstantiated is not set';
    return value;
  }

  set packagedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('packagedElement', value);
  }

  get packagedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('packagedElement');
  }

  set provided(value: Interface[] | undefined) {
    this.setElements<Interface>('provided', value);
  }

  get provided(): Interface[] | undefined {
    return this.getElements<Interface>('provided');
  }

  set realization(value: ComponentRealization[] | undefined) {
    this.setElements<ComponentRealization>('realization', value);
  }

  get realization(): ComponentRealization[] | undefined {
    return this.getElements<ComponentRealization>('realization');
  }

  set required(value: Interface[] | undefined) {
    this.setElements<Interface>('required', value);
  }

  get required(): Interface[] | undefined {
    return this.getElements<Interface>('required');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IComponentRealization extends IRealization {
  abstraction?: IComponent;
  realizingClassifier: IClassifier[];
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ComponentRealization extends Entity implements IComponentRealization {

  set abstraction(value: Component | undefined) {
    this.setElement<Component>('abstraction', value);
  }

  get abstraction(): Component | undefined {
    return this.getElement<Component>('abstraction');
  }

  set realizingClassifier(value: Classifier[]) {
    this.setElements<Classifier>('realizingClassifier', value);
  }

  get realizingClassifier(): Classifier[] {
    const value = this.getElements<Classifier>('realizingClassifier');
    if (!value) throw 'The value of realizingClassifier is not set';
    return value;
  }

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConnectableElement extends ITypedElement, IParameterableElement {
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  type?: IType;
  owningTemplateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ConnectableElement extends Entity implements IConnectableElement {

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConnectableElementTemplateParameter extends ITemplateParameter {
  parameteredElement: IParameterableElement;
  default?: IParameterableElement;
  ownedDefault?: IParameterableElement;
  ownedParameteredElement?: IParameterableElement;
  signature: ITemplateSignature;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ConnectableElementTemplateParameter extends Entity implements IConnectableElementTemplateParameter {

  set parameteredElement(value: ParameterableElement) {
    this.setElement<ParameterableElement>('parameteredElement', value);
  }

  get parameteredElement(): ParameterableElement {
    const value = this.getElement<ParameterableElement>('parameteredElement');
    if (!value) throw 'The value of parameteredElement is not set';
    return value;
  }

  set default(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('default', value);
  }

  get default(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('default');
  }

  set ownedDefault(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedDefault', value);
  }

  get ownedDefault(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedDefault');
  }

  set ownedParameteredElement(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedParameteredElement', value);
  }

  get ownedParameteredElement(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedParameteredElement');
  }

  set signature(value: TemplateSignature) {
    this.setElement<TemplateSignature>('signature', value);
  }

  get signature(): TemplateSignature {
    const value = this.getElement<TemplateSignature>('signature');
    if (!value) throw 'The value of signature is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConnector extends IFeature {
  contract?: IBehavior[];
  end: IConnectorEnd[];
  kind: ConnectorKind;
  redefinedConnector?: IConnector[];
  type?: IAssociation;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Connector extends Entity implements IConnector {

  set contract(value: Behavior[] | undefined) {
    this.setElements<Behavior>('contract', value);
  }

  get contract(): Behavior[] | undefined {
    return this.getElements<Behavior>('contract');
  }

  set end(value: ConnectorEnd[]) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] {
    const value = this.getElements<ConnectorEnd>('end');
    if (!value) throw 'The value of end is not set';
    return value;
  }

  set kind(value: ConnectorKind) {
    this.setEnum('kind', value);
  }

  get kind(): ConnectorKind {
    const value = this.getEnum('kind');
    if (!value) throw 'The value of kind is not set';
    return value;
  }

  set redefinedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('redefinedConnector', value);
  }

  get redefinedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('redefinedConnector');
  }

  set type(value: Association | undefined) {
    this.setElement<Association>('type', value);
  }

  get type(): Association | undefined {
    return this.getElement<Association>('type');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConnectorEnd extends IMultiplicityElement {
  definingEnd?: IProperty;
  partWithPort?: IProperty;
  role: IConnectableElement;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ConnectorEnd extends Entity implements IConnectorEnd {

  set definingEnd(value: Property | undefined) {
    this.setElement<Property>('definingEnd', value);
  }

  get definingEnd(): Property | undefined {
    return this.getElement<Property>('definingEnd');
  }

  set partWithPort(value: Property | undefined) {
    this.setElement<Property>('partWithPort', value);
  }

  get partWithPort(): Property | undefined {
    return this.getElement<Property>('partWithPort');
  }

  set role(value: ConnectableElement) {
    this.setElement<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement {
    const value = this.getElement<ConnectableElement>('role');
    if (!value) throw 'The value of role is not set';
    return value;
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IEncapsulatedClassifier extends IStructuredClassifier {
  ownedPort?: IPort[];
  ownedAttribute?: IProperty[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class EncapsulatedClassifier extends Entity implements IEncapsulatedClassifier {

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IPort extends IProperty {
  isBehavior: boolean;
  isConjugated: boolean;
  isService: boolean;
  protocol?: IProtocolStateMachine;
  provided?: IInterface[];
  redefinedPort?: IPort[];
  required?: IInterface[];
  aggregation: AggregationKind;
  association?: IAssociation;
  associationEnd?: IProperty;
  class?: IClass;
  datatype?: IDataType;
  defaultValue?: IValueSpecification;
  interface?: IInterface;
  isComposite: boolean;
  isDerived: boolean;
  isDerivedUnion: boolean;
  isID: boolean;
  opposite?: IProperty;
  owningAssociation?: IAssociation;
  qualifier?: IProperty[];
  redefinedProperty?: IProperty[];
  subsettedProperty?: IProperty[];
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  isReadOnly: boolean;
  type?: IType;
  owningTemplateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class Port extends Entity implements IPort {

  set isBehavior(value: boolean) {
    this.setBoolean('isBehavior', value);
  }

  get isBehavior(): boolean {
    const value = this.getBoolean('isBehavior');
    if (!value) throw 'The value of isBehavior is not set';
    return value;
  }

  set isConjugated(value: boolean) {
    this.setBoolean('isConjugated', value);
  }

  get isConjugated(): boolean {
    const value = this.getBoolean('isConjugated');
    if (!value) throw 'The value of isConjugated is not set';
    return value;
  }

  set isService(value: boolean) {
    this.setBoolean('isService', value);
  }

  get isService(): boolean {
    const value = this.getBoolean('isService');
    if (!value) throw 'The value of isService is not set';
    return value;
  }

  set protocol(value: ProtocolStateMachine | undefined) {
    this.setElement<ProtocolStateMachine>('protocol', value);
  }

  get protocol(): ProtocolStateMachine | undefined {
    return this.getElement<ProtocolStateMachine>('protocol');
  }

  set provided(value: Interface[] | undefined) {
    this.setElements<Interface>('provided', value);
  }

  get provided(): Interface[] | undefined {
    return this.getElements<Interface>('provided');
  }

  set redefinedPort(value: Port[] | undefined) {
    this.setElements<Port>('redefinedPort', value);
  }

  get redefinedPort(): Port[] | undefined {
    return this.getElements<Port>('redefinedPort');
  }

  set required(value: Interface[] | undefined) {
    this.setElements<Interface>('required', value);
  }

  get required(): Interface[] | undefined {
    return this.getElements<Interface>('required');
  }

  set aggregation(value: AggregationKind) {
    this.setEnum('aggregation', value);
  }

  get aggregation(): AggregationKind {
    const value = this.getEnum('aggregation');
    if (!value) throw 'The value of aggregation is not set';
    return value;
  }

  set association(value: Association | undefined) {
    this.setElement<Association>('association', value);
  }

  get association(): Association | undefined {
    return this.getElement<Association>('association');
  }

  set associationEnd(value: Property | undefined) {
    this.setElement<Property>('associationEnd', value);
  }

  get associationEnd(): Property | undefined {
    return this.getElement<Property>('associationEnd');
  }

  set class(value: Class | undefined) {
    this.setElement<Class>('class', value);
  }

  get class(): Class | undefined {
    return this.getElement<Class>('class');
  }

  set datatype(value: DataType | undefined) {
    this.setElement<DataType>('datatype', value);
  }

  get datatype(): DataType | undefined {
    return this.getElement<DataType>('datatype');
  }

  set defaultValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('defaultValue', value);
  }

  get defaultValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('defaultValue');
  }

  set interface(value: Interface | undefined) {
    this.setElement<Interface>('interface', value);
  }

  get interface(): Interface | undefined {
    return this.getElement<Interface>('interface');
  }

  set isComposite(value: boolean) {
    this.setBoolean('isComposite', value);
  }

  get isComposite(): boolean {
    const value = this.getBoolean('isComposite');
    if (!value) throw 'The value of isComposite is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set isDerivedUnion(value: boolean) {
    this.setBoolean('isDerivedUnion', value);
  }

  get isDerivedUnion(): boolean {
    const value = this.getBoolean('isDerivedUnion');
    if (!value) throw 'The value of isDerivedUnion is not set';
    return value;
  }

  set isID(value: boolean) {
    this.setBoolean('isID', value);
  }

  get isID(): boolean {
    const value = this.getBoolean('isID');
    if (!value) throw 'The value of isID is not set';
    return value;
  }

  set opposite(value: Property | undefined) {
    this.setElement<Property>('opposite', value);
  }

  get opposite(): Property | undefined {
    return this.getElement<Property>('opposite');
  }

  set owningAssociation(value: Association | undefined) {
    this.setElement<Association>('owningAssociation', value);
  }

  get owningAssociation(): Association | undefined {
    return this.getElement<Association>('owningAssociation');
  }

  set qualifier(value: Property[] | undefined) {
    this.setElements<Property>('qualifier', value);
  }

  get qualifier(): Property[] | undefined {
    return this.getElements<Property>('qualifier');
  }

  set redefinedProperty(value: Property[] | undefined) {
    this.setElements<Property>('redefinedProperty', value);
  }

  get redefinedProperty(): Property[] | undefined {
    return this.getElements<Property>('redefinedProperty');
  }

  set subsettedProperty(value: Property[] | undefined) {
    this.setElements<Property>('subsettedProperty', value);
  }

  get subsettedProperty(): Property[] | undefined {
    return this.getElements<Property>('subsettedProperty');
  }

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set isReadOnly(value: boolean) {
    this.setBoolean('isReadOnly', value);
  }

  get isReadOnly(): boolean {
    const value = this.getBoolean('isReadOnly');
    if (!value) throw 'The value of isReadOnly is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IStructuredClassifier extends IClassifier {
  ownedAttribute?: IProperty[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class StructuredClassifier extends Entity implements IStructuredClassifier {

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}


export enum PseudostateKind {
  initial,
  deepHistory,
  shallowHistory,
  join,
  fork,
  junction,
  choice,
  entryPoint,
  exitPoint,
  terminate,
}
export enum TransitionKind {
  internal,
  local,
  external,
}

export interface IConnectionPointReference extends IVertex {
  entry?: IPseudostate[];
  exit?: IPseudostate[];
  state?: IState;
  container?: IRegion;
  incoming?: ITransition[];
  outgoing?: ITransition[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ConnectionPointReference extends Entity implements IConnectionPointReference {

  set entry(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('entry', value);
  }

  get entry(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('entry');
  }

  set exit(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('exit', value);
  }

  get exit(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('exit');
  }

  set state(value: State | undefined) {
    this.setElement<State>('state', value);
  }

  get state(): State | undefined {
    return this.getElement<State>('state');
  }

  set container(value: Region | undefined) {
    this.setElement<Region>('container', value);
  }

  get container(): Region | undefined {
    return this.getElement<Region>('container');
  }

  set incoming(value: Transition[] | undefined) {
    this.setElements<Transition>('incoming', value);
  }

  get incoming(): Transition[] | undefined {
    return this.getElements<Transition>('incoming');
  }

  set outgoing(value: Transition[] | undefined) {
    this.setElements<Transition>('outgoing', value);
  }

  get outgoing(): Transition[] | undefined {
    return this.getElements<Transition>('outgoing');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IFinalState extends IState {
  connection?: IConnectionPointReference[];
  connectionPoint?: IPseudostate[];
  deferrableTrigger?: ITrigger[];
  doActivity?: IBehavior;
  entry?: IBehavior;
  exit?: IBehavior;
  isComposite: boolean;
  isOrthogonal: boolean;
  isSimple: boolean;
  isSubmachineState: boolean;
  redefinedState?: IState;
  redefinitionContext?: IClassifier[];
  region?: IRegion[];
  stateInvariant?: IConstraint;
  submachine?: IStateMachine;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  container?: IRegion;
  incoming?: ITransition[];
  outgoing?: ITransition[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class FinalState extends Entity implements IFinalState {

  set connection(value: ConnectionPointReference[] | undefined) {
    this.setElements<ConnectionPointReference>('connection', value);
  }

  get connection(): ConnectionPointReference[] | undefined {
    return this.getElements<ConnectionPointReference>('connection');
  }

  set connectionPoint(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('connectionPoint', value);
  }

  get connectionPoint(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('connectionPoint');
  }

  set deferrableTrigger(value: Trigger[] | undefined) {
    this.setElements<Trigger>('deferrableTrigger', value);
  }

  get deferrableTrigger(): Trigger[] | undefined {
    return this.getElements<Trigger>('deferrableTrigger');
  }

  set doActivity(value: Behavior | undefined) {
    this.setElement<Behavior>('doActivity', value);
  }

  get doActivity(): Behavior | undefined {
    return this.getElement<Behavior>('doActivity');
  }

  set entry(value: Behavior | undefined) {
    this.setElement<Behavior>('entry', value);
  }

  get entry(): Behavior | undefined {
    return this.getElement<Behavior>('entry');
  }

  set exit(value: Behavior | undefined) {
    this.setElement<Behavior>('exit', value);
  }

  get exit(): Behavior | undefined {
    return this.getElement<Behavior>('exit');
  }

  set isComposite(value: boolean) {
    this.setBoolean('isComposite', value);
  }

  get isComposite(): boolean {
    const value = this.getBoolean('isComposite');
    if (!value) throw 'The value of isComposite is not set';
    return value;
  }

  set isOrthogonal(value: boolean) {
    this.setBoolean('isOrthogonal', value);
  }

  get isOrthogonal(): boolean {
    const value = this.getBoolean('isOrthogonal');
    if (!value) throw 'The value of isOrthogonal is not set';
    return value;
  }

  set isSimple(value: boolean) {
    this.setBoolean('isSimple', value);
  }

  get isSimple(): boolean {
    const value = this.getBoolean('isSimple');
    if (!value) throw 'The value of isSimple is not set';
    return value;
  }

  set isSubmachineState(value: boolean) {
    this.setBoolean('isSubmachineState', value);
  }

  get isSubmachineState(): boolean {
    const value = this.getBoolean('isSubmachineState');
    if (!value) throw 'The value of isSubmachineState is not set';
    return value;
  }

  set redefinedState(value: State | undefined) {
    this.setElement<State>('redefinedState', value);
  }

  get redefinedState(): State | undefined {
    return this.getElement<State>('redefinedState');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set region(value: Region[] | undefined) {
    this.setElements<Region>('region', value);
  }

  get region(): Region[] | undefined {
    return this.getElements<Region>('region');
  }

  set stateInvariant(value: Constraint | undefined) {
    this.setElement<Constraint>('stateInvariant', value);
  }

  get stateInvariant(): Constraint | undefined {
    return this.getElement<Constraint>('stateInvariant');
  }

  set submachine(value: StateMachine | undefined) {
    this.setElement<StateMachine>('submachine', value);
  }

  get submachine(): StateMachine | undefined {
    return this.getElement<StateMachine>('submachine');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set container(value: Region | undefined) {
    this.setElement<Region>('container', value);
  }

  get container(): Region | undefined {
    return this.getElement<Region>('container');
  }

  set incoming(value: Transition[] | undefined) {
    this.setElements<Transition>('incoming', value);
  }

  get incoming(): Transition[] | undefined {
    return this.getElements<Transition>('incoming');
  }

  set outgoing(value: Transition[] | undefined) {
    this.setElements<Transition>('outgoing', value);
  }

  get outgoing(): Transition[] | undefined {
    return this.getElements<Transition>('outgoing');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IProtocolConformance extends IDirectedRelationship {
  generalMachine: IProtocolStateMachine;
  specificMachine: IProtocolStateMachine;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ProtocolConformance extends Entity implements IProtocolConformance {

  set generalMachine(value: ProtocolStateMachine) {
    this.setElement<ProtocolStateMachine>('generalMachine', value);
  }

  get generalMachine(): ProtocolStateMachine {
    const value = this.getElement<ProtocolStateMachine>('generalMachine');
    if (!value) throw 'The value of generalMachine is not set';
    return value;
  }

  set specificMachine(value: ProtocolStateMachine) {
    this.setElement<ProtocolStateMachine>('specificMachine', value);
  }

  get specificMachine(): ProtocolStateMachine {
    const value = this.getElement<ProtocolStateMachine>('specificMachine');
    if (!value) throw 'The value of specificMachine is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IProtocolStateMachine extends IStateMachine {
  conformance?: IProtocolConformance[];
  connectionPoint?: IPseudostate[];
  extendedStateMachine?: IStateMachine[];
  region: IRegion[];
  submachineState?: IState[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class ProtocolStateMachine extends Entity implements IProtocolStateMachine {

  set conformance(value: ProtocolConformance[] | undefined) {
    this.setElements<ProtocolConformance>('conformance', value);
  }

  get conformance(): ProtocolConformance[] | undefined {
    return this.getElements<ProtocolConformance>('conformance');
  }

  set connectionPoint(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('connectionPoint', value);
  }

  get connectionPoint(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('connectionPoint');
  }

  set extendedStateMachine(value: StateMachine[] | undefined) {
    this.setElements<StateMachine>('extendedStateMachine', value);
  }

  get extendedStateMachine(): StateMachine[] | undefined {
    return this.getElements<StateMachine>('extendedStateMachine');
  }

  set region(value: Region[]) {
    this.setElements<Region>('region', value);
  }

  get region(): Region[] {
    const value = this.getElements<Region>('region');
    if (!value) throw 'The value of region is not set';
    return value;
  }

  set submachineState(value: State[] | undefined) {
    this.setElements<State>('submachineState', value);
  }

  get submachineState(): State[] | undefined {
    return this.getElements<State>('submachineState');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IProtocolTransition extends ITransition {
  postCondition?: IConstraint;
  preCondition?: IConstraint;
  referred?: IOperation[];
  container: IRegion;
  effect?: IBehavior;
  guard?: IConstraint;
  kind: TransitionKind;
  redefinedTransition?: ITransition;
  redefinitionContext?: IClassifier[];
  source: IVertex;
  target: IVertex;
  trigger?: ITrigger[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ProtocolTransition extends Entity implements IProtocolTransition {

  set postCondition(value: Constraint | undefined) {
    this.setElement<Constraint>('postCondition', value);
  }

  get postCondition(): Constraint | undefined {
    return this.getElement<Constraint>('postCondition');
  }

  set preCondition(value: Constraint | undefined) {
    this.setElement<Constraint>('preCondition', value);
  }

  get preCondition(): Constraint | undefined {
    return this.getElement<Constraint>('preCondition');
  }

  set referred(value: Operation[] | undefined) {
    this.setElements<Operation>('referred', value);
  }

  get referred(): Operation[] | undefined {
    return this.getElements<Operation>('referred');
  }

  set container(value: Region) {
    this.setElement<Region>('container', value);
  }

  get container(): Region {
    const value = this.getElement<Region>('container');
    if (!value) throw 'The value of container is not set';
    return value;
  }

  set effect(value: Behavior | undefined) {
    this.setElement<Behavior>('effect', value);
  }

  get effect(): Behavior | undefined {
    return this.getElement<Behavior>('effect');
  }

  set guard(value: Constraint | undefined) {
    this.setElement<Constraint>('guard', value);
  }

  get guard(): Constraint | undefined {
    return this.getElement<Constraint>('guard');
  }

  set kind(value: TransitionKind) {
    this.setEnum('kind', value);
  }

  get kind(): TransitionKind {
    const value = this.getEnum('kind');
    if (!value) throw 'The value of kind is not set';
    return value;
  }

  set redefinedTransition(value: Transition | undefined) {
    this.setElement<Transition>('redefinedTransition', value);
  }

  get redefinedTransition(): Transition | undefined {
    return this.getElement<Transition>('redefinedTransition');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set source(value: Vertex) {
    this.setElement<Vertex>('source', value);
  }

  get source(): Vertex {
    const value = this.getElement<Vertex>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Vertex) {
    this.setElement<Vertex>('target', value);
  }

  get target(): Vertex {
    const value = this.getElement<Vertex>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set trigger(value: Trigger[] | undefined) {
    this.setElements<Trigger>('trigger', value);
  }

  get trigger(): Trigger[] | undefined {
    return this.getElements<Trigger>('trigger');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPseudostate extends IVertex {
  kind: PseudostateKind;
  state?: IState;
  stateMachine?: IStateMachine;
  container?: IRegion;
  incoming?: ITransition[];
  outgoing?: ITransition[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Pseudostate extends Entity implements IPseudostate {

  set kind(value: PseudostateKind) {
    this.setEnum('kind', value);
  }

  get kind(): PseudostateKind {
    const value = this.getEnum('kind');
    if (!value) throw 'The value of kind is not set';
    return value;
  }

  set state(value: State | undefined) {
    this.setElement<State>('state', value);
  }

  get state(): State | undefined {
    return this.getElement<State>('state');
  }

  set stateMachine(value: StateMachine | undefined) {
    this.setElement<StateMachine>('stateMachine', value);
  }

  get stateMachine(): StateMachine | undefined {
    return this.getElement<StateMachine>('stateMachine');
  }

  set container(value: Region | undefined) {
    this.setElement<Region>('container', value);
  }

  get container(): Region | undefined {
    return this.getElement<Region>('container');
  }

  set incoming(value: Transition[] | undefined) {
    this.setElements<Transition>('incoming', value);
  }

  get incoming(): Transition[] | undefined {
    return this.getElements<Transition>('incoming');
  }

  set outgoing(value: Transition[] | undefined) {
    this.setElements<Transition>('outgoing', value);
  }

  get outgoing(): Transition[] | undefined {
    return this.getElements<Transition>('outgoing');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRegion extends INamespace, IRedefinableElement {
  extendedRegion?: IRegion;
  redefinitionContext?: IClassifier[];
  state?: IState;
  stateMachine?: IStateMachine;
  subvertex?: IVertex[];
  transition?: ITransition[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Region extends Entity implements IRegion {

  set extendedRegion(value: Region | undefined) {
    this.setElement<Region>('extendedRegion', value);
  }

  get extendedRegion(): Region | undefined {
    return this.getElement<Region>('extendedRegion');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set state(value: State | undefined) {
    this.setElement<State>('state', value);
  }

  get state(): State | undefined {
    return this.getElement<State>('state');
  }

  set stateMachine(value: StateMachine | undefined) {
    this.setElement<StateMachine>('stateMachine', value);
  }

  get stateMachine(): StateMachine | undefined {
    return this.getElement<StateMachine>('stateMachine');
  }

  set subvertex(value: Vertex[] | undefined) {
    this.setElements<Vertex>('subvertex', value);
  }

  get subvertex(): Vertex[] | undefined {
    return this.getElements<Vertex>('subvertex');
  }

  set transition(value: Transition[] | undefined) {
    this.setElements<Transition>('transition', value);
  }

  get transition(): Transition[] | undefined {
    return this.getElements<Transition>('transition');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IState extends IRedefinableElement, INamespace, IVertex {
  connection?: IConnectionPointReference[];
  connectionPoint?: IPseudostate[];
  deferrableTrigger?: ITrigger[];
  doActivity?: IBehavior;
  entry?: IBehavior;
  exit?: IBehavior;
  isComposite: boolean;
  isOrthogonal: boolean;
  isSimple: boolean;
  isSubmachineState: boolean;
  redefinedState?: IState;
  redefinitionContext?: IClassifier[];
  region?: IRegion[];
  stateInvariant?: IConstraint;
  submachine?: IStateMachine;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  container?: IRegion;
  incoming?: ITransition[];
  outgoing?: ITransition[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class State extends Entity implements IState {

  set connection(value: ConnectionPointReference[] | undefined) {
    this.setElements<ConnectionPointReference>('connection', value);
  }

  get connection(): ConnectionPointReference[] | undefined {
    return this.getElements<ConnectionPointReference>('connection');
  }

  set connectionPoint(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('connectionPoint', value);
  }

  get connectionPoint(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('connectionPoint');
  }

  set deferrableTrigger(value: Trigger[] | undefined) {
    this.setElements<Trigger>('deferrableTrigger', value);
  }

  get deferrableTrigger(): Trigger[] | undefined {
    return this.getElements<Trigger>('deferrableTrigger');
  }

  set doActivity(value: Behavior | undefined) {
    this.setElement<Behavior>('doActivity', value);
  }

  get doActivity(): Behavior | undefined {
    return this.getElement<Behavior>('doActivity');
  }

  set entry(value: Behavior | undefined) {
    this.setElement<Behavior>('entry', value);
  }

  get entry(): Behavior | undefined {
    return this.getElement<Behavior>('entry');
  }

  set exit(value: Behavior | undefined) {
    this.setElement<Behavior>('exit', value);
  }

  get exit(): Behavior | undefined {
    return this.getElement<Behavior>('exit');
  }

  set isComposite(value: boolean) {
    this.setBoolean('isComposite', value);
  }

  get isComposite(): boolean {
    const value = this.getBoolean('isComposite');
    if (!value) throw 'The value of isComposite is not set';
    return value;
  }

  set isOrthogonal(value: boolean) {
    this.setBoolean('isOrthogonal', value);
  }

  get isOrthogonal(): boolean {
    const value = this.getBoolean('isOrthogonal');
    if (!value) throw 'The value of isOrthogonal is not set';
    return value;
  }

  set isSimple(value: boolean) {
    this.setBoolean('isSimple', value);
  }

  get isSimple(): boolean {
    const value = this.getBoolean('isSimple');
    if (!value) throw 'The value of isSimple is not set';
    return value;
  }

  set isSubmachineState(value: boolean) {
    this.setBoolean('isSubmachineState', value);
  }

  get isSubmachineState(): boolean {
    const value = this.getBoolean('isSubmachineState');
    if (!value) throw 'The value of isSubmachineState is not set';
    return value;
  }

  set redefinedState(value: State | undefined) {
    this.setElement<State>('redefinedState', value);
  }

  get redefinedState(): State | undefined {
    return this.getElement<State>('redefinedState');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set region(value: Region[] | undefined) {
    this.setElements<Region>('region', value);
  }

  get region(): Region[] | undefined {
    return this.getElements<Region>('region');
  }

  set stateInvariant(value: Constraint | undefined) {
    this.setElement<Constraint>('stateInvariant', value);
  }

  get stateInvariant(): Constraint | undefined {
    return this.getElement<Constraint>('stateInvariant');
  }

  set submachine(value: StateMachine | undefined) {
    this.setElement<StateMachine>('submachine', value);
  }

  get submachine(): StateMachine | undefined {
    return this.getElement<StateMachine>('submachine');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set container(value: Region | undefined) {
    this.setElement<Region>('container', value);
  }

  get container(): Region | undefined {
    return this.getElement<Region>('container');
  }

  set incoming(value: Transition[] | undefined) {
    this.setElements<Transition>('incoming', value);
  }

  get incoming(): Transition[] | undefined {
    return this.getElements<Transition>('incoming');
  }

  set outgoing(value: Transition[] | undefined) {
    this.setElements<Transition>('outgoing', value);
  }

  get outgoing(): Transition[] | undefined {
    return this.getElements<Transition>('outgoing');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStateMachine extends IBehavior {
  connectionPoint?: IPseudostate[];
  extendedStateMachine?: IStateMachine[];
  region: IRegion[];
  submachineState?: IState[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class StateMachine extends Entity implements IStateMachine {

  set connectionPoint(value: Pseudostate[] | undefined) {
    this.setElements<Pseudostate>('connectionPoint', value);
  }

  get connectionPoint(): Pseudostate[] | undefined {
    return this.getElements<Pseudostate>('connectionPoint');
  }

  set extendedStateMachine(value: StateMachine[] | undefined) {
    this.setElements<StateMachine>('extendedStateMachine', value);
  }

  get extendedStateMachine(): StateMachine[] | undefined {
    return this.getElements<StateMachine>('extendedStateMachine');
  }

  set region(value: Region[]) {
    this.setElements<Region>('region', value);
  }

  get region(): Region[] {
    const value = this.getElements<Region>('region');
    if (!value) throw 'The value of region is not set';
    return value;
  }

  set submachineState(value: State[] | undefined) {
    this.setElements<State>('submachineState', value);
  }

  get submachineState(): State[] | undefined {
    return this.getElements<State>('submachineState');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ITransition extends INamespace, IRedefinableElement {
  container: IRegion;
  effect?: IBehavior;
  guard?: IConstraint;
  kind: TransitionKind;
  redefinedTransition?: ITransition;
  redefinitionContext?: IClassifier[];
  source: IVertex;
  target: IVertex;
  trigger?: ITrigger[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Transition extends Entity implements ITransition {

  set container(value: Region) {
    this.setElement<Region>('container', value);
  }

  get container(): Region {
    const value = this.getElement<Region>('container');
    if (!value) throw 'The value of container is not set';
    return value;
  }

  set effect(value: Behavior | undefined) {
    this.setElement<Behavior>('effect', value);
  }

  get effect(): Behavior | undefined {
    return this.getElement<Behavior>('effect');
  }

  set guard(value: Constraint | undefined) {
    this.setElement<Constraint>('guard', value);
  }

  get guard(): Constraint | undefined {
    return this.getElement<Constraint>('guard');
  }

  set kind(value: TransitionKind) {
    this.setEnum('kind', value);
  }

  get kind(): TransitionKind {
    const value = this.getEnum('kind');
    if (!value) throw 'The value of kind is not set';
    return value;
  }

  set redefinedTransition(value: Transition | undefined) {
    this.setElement<Transition>('redefinedTransition', value);
  }

  get redefinedTransition(): Transition | undefined {
    return this.getElement<Transition>('redefinedTransition');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set source(value: Vertex) {
    this.setElement<Vertex>('source', value);
  }

  get source(): Vertex {
    const value = this.getElement<Vertex>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Vertex) {
    this.setElement<Vertex>('target', value);
  }

  get target(): Vertex {
    const value = this.getElement<Vertex>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set trigger(value: Trigger[] | undefined) {
    this.setElements<Trigger>('trigger', value);
  }

  get trigger(): Trigger[] | undefined {
    return this.getElements<Trigger>('trigger');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IVertex extends INamedElement {
  container?: IRegion;
  incoming?: ITransition[];
  outgoing?: ITransition[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Vertex extends Entity implements IVertex {

  set container(value: Region | undefined) {
    this.setElement<Region>('container', value);
  }

  get container(): Region | undefined {
    return this.getElement<Region>('container');
  }

  set incoming(value: Transition[] | undefined) {
    this.setElements<Transition>('incoming', value);
  }

  get incoming(): Transition[] | undefined {
    return this.getElements<Transition>('incoming');
  }

  set outgoing(value: Transition[] | undefined) {
    this.setElements<Transition>('outgoing', value);
  }

  get outgoing(): Transition[] | undefined {
    return this.getElements<Transition>('outgoing');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}



export interface IBehavioredClassifier extends IClassifier {
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class BehavioredClassifier extends Entity implements IBehavioredClassifier {

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IDataType extends IClassifier {
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class DataType extends Entity implements IDataType {

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IEnumeration extends IDataType {
  ownedLiteral?: IEnumerationLiteral[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Enumeration extends Entity implements IEnumeration {

  set ownedLiteral(value: EnumerationLiteral[] | undefined) {
    this.setElements<EnumerationLiteral>('ownedLiteral', value);
  }

  get ownedLiteral(): EnumerationLiteral[] | undefined {
    return this.getElements<EnumerationLiteral>('ownedLiteral');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IEnumerationLiteral extends IInstanceSpecification {
  classifier?: IClassifier[];
  enumeration: IEnumeration;
  slot?: ISlot[];
  specification?: IValueSpecification;
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class EnumerationLiteral extends Entity implements IEnumerationLiteral {

  set classifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('classifier', value);
  }

  get classifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('classifier');
  }

  set enumeration(value: Enumeration) {
    this.setElement<Enumeration>('enumeration', value);
  }

  get enumeration(): Enumeration {
    const value = this.getElement<Enumeration>('enumeration');
    if (!value) throw 'The value of enumeration is not set';
    return value;
  }

  set slot(value: Slot[] | undefined) {
    this.setElements<Slot>('slot', value);
  }

  get slot(): Slot[] | undefined {
    return this.getElements<Slot>('slot');
  }

  set specification(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('specification');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInterface extends IClassifier {
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  protocol?: IProtocolStateMachine;
  redefinedInterface?: IInterface[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Interface extends Entity implements IInterface {

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set protocol(value: ProtocolStateMachine | undefined) {
    this.setElement<ProtocolStateMachine>('protocol', value);
  }

  get protocol(): ProtocolStateMachine | undefined {
    return this.getElement<ProtocolStateMachine>('protocol');
  }

  set redefinedInterface(value: Interface[] | undefined) {
    this.setElements<Interface>('redefinedInterface', value);
  }

  get redefinedInterface(): Interface[] | undefined {
    return this.getElements<Interface>('redefinedInterface');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IInterfaceRealization extends IRealization {
  contract: IInterface;
  implementingClassifier: IBehavioredClassifier;
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InterfaceRealization extends Entity implements IInterfaceRealization {

  set contract(value: Interface) {
    this.setElement<Interface>('contract', value);
  }

  get contract(): Interface {
    const value = this.getElement<Interface>('contract');
    if (!value) throw 'The value of contract is not set';
    return value;
  }

  set implementingClassifier(value: BehavioredClassifier) {
    this.setElement<BehavioredClassifier>('implementingClassifier', value);
  }

  get implementingClassifier(): BehavioredClassifier {
    const value = this.getElement<BehavioredClassifier>('implementingClassifier');
    if (!value) throw 'The value of implementingClassifier is not set';
    return value;
  }

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPrimitiveType extends IDataType {
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class PrimitiveType extends Entity implements IPrimitiveType {

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IReception extends IBehavioralFeature {
  signal: ISignal;
  concurrency: CallConcurrencyKind;
  isAbstract: boolean;
  method?: IBehavior[];
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  raisedException?: IType[];
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Reception extends Entity implements IReception {

  set signal(value: Signal) {
    this.setElement<Signal>('signal', value);
  }

  get signal(): Signal {
    const value = this.getElement<Signal>('signal');
    if (!value) throw 'The value of signal is not set';
    return value;
  }

  set concurrency(value: CallConcurrencyKind) {
    this.setEnum('concurrency', value);
  }

  get concurrency(): CallConcurrencyKind {
    const value = this.getEnum('concurrency');
    if (!value) throw 'The value of concurrency is not set';
    return value;
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set method(value: Behavior[] | undefined) {
    this.setElements<Behavior>('method', value);
  }

  get method(): Behavior[] | undefined {
    return this.getElements<Behavior>('method');
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set raisedException(value: Type[] | undefined) {
    this.setElements<Type>('raisedException', value);
  }

  get raisedException(): Type[] | undefined {
    return this.getElements<Type>('raisedException');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ISignal extends IClassifier {
  ownedAttribute?: IProperty[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Signal extends Entity implements ISignal {

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}



export interface IExtension extends IAssociation {
  isRequired: boolean;
  metaclass: IClass;
  ownedEnd?: IProperty[];
  endType: IType[];
  isDerived: boolean;
  memberEnd: IProperty[];
  navigableOwnedEnd?: IProperty[];
  relatedElement: IElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
}

export class Extension extends Entity implements IExtension {

  set isRequired(value: boolean) {
    this.setBoolean('isRequired', value);
  }

  get isRequired(): boolean {
    const value = this.getBoolean('isRequired');
    if (!value) throw 'The value of isRequired is not set';
    return value;
  }

  set metaclass(value: Class) {
    this.setElement<Class>('metaclass', value);
  }

  get metaclass(): Class {
    const value = this.getElement<Class>('metaclass');
    if (!value) throw 'The value of metaclass is not set';
    return value;
  }

  set ownedEnd(value: Property[] | undefined) {
    this.setElements<Property>('ownedEnd', value);
  }

  get ownedEnd(): Property[] | undefined {
    return this.getElements<Property>('ownedEnd');
  }

  set endType(value: Type[]) {
    this.setElements<Type>('endType', value);
  }

  get endType(): Type[] {
    const value = this.getElements<Type>('endType');
    if (!value) throw 'The value of endType is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set memberEnd(value: Property[]) {
    this.setElements<Property>('memberEnd', value);
  }

  get memberEnd(): Property[] {
    const value = this.getElements<Property>('memberEnd');
    if (!value) throw 'The value of memberEnd is not set';
    return value;
  }

  set navigableOwnedEnd(value: Property[] | undefined) {
    this.setElements<Property>('navigableOwnedEnd', value);
  }

  get navigableOwnedEnd(): Property[] | undefined {
    return this.getElements<Property>('navigableOwnedEnd');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IExtensionEnd extends IProperty {
  lower: number;
  type?: IType;
  aggregation: AggregationKind;
  association?: IAssociation;
  associationEnd?: IProperty;
  class?: IClass;
  datatype?: IDataType;
  defaultValue?: IValueSpecification;
  interface?: IInterface;
  isComposite: boolean;
  isDerived: boolean;
  isDerivedUnion: boolean;
  isID: boolean;
  opposite?: IProperty;
  owningAssociation?: IAssociation;
  qualifier?: IProperty[];
  redefinedProperty?: IProperty[];
  subsettedProperty?: IProperty[];
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  isReadOnly: boolean;
  owningTemplateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isOrdered: boolean;
  isUnique: boolean;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class ExtensionEnd extends Entity implements IExtensionEnd {

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set aggregation(value: AggregationKind) {
    this.setEnum('aggregation', value);
  }

  get aggregation(): AggregationKind {
    const value = this.getEnum('aggregation');
    if (!value) throw 'The value of aggregation is not set';
    return value;
  }

  set association(value: Association | undefined) {
    this.setElement<Association>('association', value);
  }

  get association(): Association | undefined {
    return this.getElement<Association>('association');
  }

  set associationEnd(value: Property | undefined) {
    this.setElement<Property>('associationEnd', value);
  }

  get associationEnd(): Property | undefined {
    return this.getElement<Property>('associationEnd');
  }

  set class(value: Class | undefined) {
    this.setElement<Class>('class', value);
  }

  get class(): Class | undefined {
    return this.getElement<Class>('class');
  }

  set datatype(value: DataType | undefined) {
    this.setElement<DataType>('datatype', value);
  }

  get datatype(): DataType | undefined {
    return this.getElement<DataType>('datatype');
  }

  set defaultValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('defaultValue', value);
  }

  get defaultValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('defaultValue');
  }

  set interface(value: Interface | undefined) {
    this.setElement<Interface>('interface', value);
  }

  get interface(): Interface | undefined {
    return this.getElement<Interface>('interface');
  }

  set isComposite(value: boolean) {
    this.setBoolean('isComposite', value);
  }

  get isComposite(): boolean {
    const value = this.getBoolean('isComposite');
    if (!value) throw 'The value of isComposite is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set isDerivedUnion(value: boolean) {
    this.setBoolean('isDerivedUnion', value);
  }

  get isDerivedUnion(): boolean {
    const value = this.getBoolean('isDerivedUnion');
    if (!value) throw 'The value of isDerivedUnion is not set';
    return value;
  }

  set isID(value: boolean) {
    this.setBoolean('isID', value);
  }

  get isID(): boolean {
    const value = this.getBoolean('isID');
    if (!value) throw 'The value of isID is not set';
    return value;
  }

  set opposite(value: Property | undefined) {
    this.setElement<Property>('opposite', value);
  }

  get opposite(): Property | undefined {
    return this.getElement<Property>('opposite');
  }

  set owningAssociation(value: Association | undefined) {
    this.setElement<Association>('owningAssociation', value);
  }

  get owningAssociation(): Association | undefined {
    return this.getElement<Association>('owningAssociation');
  }

  set qualifier(value: Property[] | undefined) {
    this.setElements<Property>('qualifier', value);
  }

  get qualifier(): Property[] | undefined {
    return this.getElements<Property>('qualifier');
  }

  set redefinedProperty(value: Property[] | undefined) {
    this.setElements<Property>('redefinedProperty', value);
  }

  get redefinedProperty(): Property[] | undefined {
    return this.getElements<Property>('redefinedProperty');
  }

  set subsettedProperty(value: Property[] | undefined) {
    this.setElements<Property>('subsettedProperty', value);
  }

  get subsettedProperty(): Property[] | undefined {
    return this.getElements<Property>('subsettedProperty');
  }

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set isReadOnly(value: boolean) {
    this.setBoolean('isReadOnly', value);
  }

  get isReadOnly(): boolean {
    const value = this.getBoolean('isReadOnly');
    if (!value) throw 'The value of isReadOnly is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IImage extends IElement {
  content?: string;
  format?: string;
  location?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Image extends Entity implements IImage {

  set content(value: string | undefined) {
    this.setString('content', value);
  }

  get content(): string | undefined {
    return this.getString('content');
  }

  set format(value: string | undefined) {
    this.setString('format', value);
  }

  get format(): string | undefined {
    return this.getString('format');
  }

  set location(value: string | undefined) {
    this.setString('location', value);
  }

  get location(): string | undefined {
    return this.getString('location');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IModel extends IPackage {
  viewpoint?: string;
  URI?: string;
  nestedPackage?: IPackage[];
  nestingPackage?: IPackage;
  ownedStereotype?: IStereotype[];
  ownedType?: IType[];
  packageMerge?: IPackageMerge[];
  packagedElement?: IPackageableElement[];
  profileApplication?: IProfileApplication[];
  visibility?: VisibilityKind;
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Model extends Entity implements IModel {

  set viewpoint(value: string | undefined) {
    this.setString('viewpoint', value);
  }

  get viewpoint(): string | undefined {
    return this.getString('viewpoint');
  }

  set URI(value: string | undefined) {
    this.setString('URI', value);
  }

  get URI(): string | undefined {
    return this.getString('URI');
  }

  set nestedPackage(value: Package[] | undefined) {
    this.setElements<Package>('nestedPackage', value);
  }

  get nestedPackage(): Package[] | undefined {
    return this.getElements<Package>('nestedPackage');
  }

  set nestingPackage(value: Package | undefined) {
    this.setElement<Package>('nestingPackage', value);
  }

  get nestingPackage(): Package | undefined {
    return this.getElement<Package>('nestingPackage');
  }

  set ownedStereotype(value: Stereotype[] | undefined) {
    this.setElements<Stereotype>('ownedStereotype', value);
  }

  get ownedStereotype(): Stereotype[] | undefined {
    return this.getElements<Stereotype>('ownedStereotype');
  }

  set ownedType(value: Type[] | undefined) {
    this.setElements<Type>('ownedType', value);
  }

  get ownedType(): Type[] | undefined {
    return this.getElements<Type>('ownedType');
  }

  set packageMerge(value: PackageMerge[] | undefined) {
    this.setElements<PackageMerge>('packageMerge', value);
  }

  get packageMerge(): PackageMerge[] | undefined {
    return this.getElements<PackageMerge>('packageMerge');
  }

  set packagedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('packagedElement', value);
  }

  get packagedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('packagedElement');
  }

  set profileApplication(value: ProfileApplication[] | undefined) {
    this.setElements<ProfileApplication>('profileApplication', value);
  }

  get profileApplication(): ProfileApplication[] | undefined {
    return this.getElements<ProfileApplication>('profileApplication');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPackage extends IPackageableElement, ITemplateableElement, INamespace {
  URI?: string;
  nestedPackage?: IPackage[];
  nestingPackage?: IPackage;
  ownedStereotype?: IStereotype[];
  ownedType?: IType[];
  packageMerge?: IPackageMerge[];
  packagedElement?: IPackageableElement[];
  profileApplication?: IProfileApplication[];
  visibility?: VisibilityKind;
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Package extends Entity implements IPackage {

  set URI(value: string | undefined) {
    this.setString('URI', value);
  }

  get URI(): string | undefined {
    return this.getString('URI');
  }

  set nestedPackage(value: Package[] | undefined) {
    this.setElements<Package>('nestedPackage', value);
  }

  get nestedPackage(): Package[] | undefined {
    return this.getElements<Package>('nestedPackage');
  }

  set nestingPackage(value: Package | undefined) {
    this.setElement<Package>('nestingPackage', value);
  }

  get nestingPackage(): Package | undefined {
    return this.getElement<Package>('nestingPackage');
  }

  set ownedStereotype(value: Stereotype[] | undefined) {
    this.setElements<Stereotype>('ownedStereotype', value);
  }

  get ownedStereotype(): Stereotype[] | undefined {
    return this.getElements<Stereotype>('ownedStereotype');
  }

  set ownedType(value: Type[] | undefined) {
    this.setElements<Type>('ownedType', value);
  }

  get ownedType(): Type[] | undefined {
    return this.getElements<Type>('ownedType');
  }

  set packageMerge(value: PackageMerge[] | undefined) {
    this.setElements<PackageMerge>('packageMerge', value);
  }

  get packageMerge(): PackageMerge[] | undefined {
    return this.getElements<PackageMerge>('packageMerge');
  }

  set packagedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('packagedElement', value);
  }

  get packagedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('packagedElement');
  }

  set profileApplication(value: ProfileApplication[] | undefined) {
    this.setElements<ProfileApplication>('profileApplication', value);
  }

  get profileApplication(): ProfileApplication[] | undefined {
    return this.getElements<ProfileApplication>('profileApplication');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPackageMerge extends IDirectedRelationship {
  mergedPackage: IPackage;
  receivingPackage: IPackage;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class PackageMerge extends Entity implements IPackageMerge {

  set mergedPackage(value: Package) {
    this.setElement<Package>('mergedPackage', value);
  }

  get mergedPackage(): Package {
    const value = this.getElement<Package>('mergedPackage');
    if (!value) throw 'The value of mergedPackage is not set';
    return value;
  }

  set receivingPackage(value: Package) {
    this.setElement<Package>('receivingPackage', value);
  }

  get receivingPackage(): Package {
    const value = this.getElement<Package>('receivingPackage');
    if (!value) throw 'The value of receivingPackage is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IProfile extends IPackage {
  metaclassReference?: IElementImport[];
  metamodelReference?: IPackageImport[];
  URI?: string;
  nestedPackage?: IPackage[];
  nestingPackage?: IPackage;
  ownedStereotype?: IStereotype[];
  ownedType?: IType[];
  packageMerge?: IPackageMerge[];
  packagedElement?: IPackageableElement[];
  profileApplication?: IProfileApplication[];
  visibility?: VisibilityKind;
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Profile extends Entity implements IProfile {

  set metaclassReference(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('metaclassReference', value);
  }

  get metaclassReference(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('metaclassReference');
  }

  set metamodelReference(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('metamodelReference', value);
  }

  get metamodelReference(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('metamodelReference');
  }

  set URI(value: string | undefined) {
    this.setString('URI', value);
  }

  get URI(): string | undefined {
    return this.getString('URI');
  }

  set nestedPackage(value: Package[] | undefined) {
    this.setElements<Package>('nestedPackage', value);
  }

  get nestedPackage(): Package[] | undefined {
    return this.getElements<Package>('nestedPackage');
  }

  set nestingPackage(value: Package | undefined) {
    this.setElement<Package>('nestingPackage', value);
  }

  get nestingPackage(): Package | undefined {
    return this.getElement<Package>('nestingPackage');
  }

  set ownedStereotype(value: Stereotype[] | undefined) {
    this.setElements<Stereotype>('ownedStereotype', value);
  }

  get ownedStereotype(): Stereotype[] | undefined {
    return this.getElements<Stereotype>('ownedStereotype');
  }

  set ownedType(value: Type[] | undefined) {
    this.setElements<Type>('ownedType', value);
  }

  get ownedType(): Type[] | undefined {
    return this.getElements<Type>('ownedType');
  }

  set packageMerge(value: PackageMerge[] | undefined) {
    this.setElements<PackageMerge>('packageMerge', value);
  }

  get packageMerge(): PackageMerge[] | undefined {
    return this.getElements<PackageMerge>('packageMerge');
  }

  set packagedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('packagedElement', value);
  }

  get packagedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('packagedElement');
  }

  set profileApplication(value: ProfileApplication[] | undefined) {
    this.setElements<ProfileApplication>('profileApplication', value);
  }

  get profileApplication(): ProfileApplication[] | undefined {
    return this.getElements<ProfileApplication>('profileApplication');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IProfileApplication extends IDirectedRelationship {
  appliedProfile: IProfile;
  applyingPackage: IPackage;
  isStrict: boolean;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ProfileApplication extends Entity implements IProfileApplication {

  set appliedProfile(value: Profile) {
    this.setElement<Profile>('appliedProfile', value);
  }

  get appliedProfile(): Profile {
    const value = this.getElement<Profile>('appliedProfile');
    if (!value) throw 'The value of appliedProfile is not set';
    return value;
  }

  set applyingPackage(value: Package) {
    this.setElement<Package>('applyingPackage', value);
  }

  get applyingPackage(): Package {
    const value = this.getElement<Package>('applyingPackage');
    if (!value) throw 'The value of applyingPackage is not set';
    return value;
  }

  set isStrict(value: boolean) {
    this.setBoolean('isStrict', value);
  }

  get isStrict(): boolean {
    const value = this.getBoolean('isStrict');
    if (!value) throw 'The value of isStrict is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStereotype extends IClass {
  icon?: IImage[];
  profile: IProfile;
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Stereotype extends Entity implements IStereotype {

  set icon(value: Image[] | undefined) {
    this.setElements<Image>('icon', value);
  }

  get icon(): Image[] | undefined {
    return this.getElements<Image>('icon');
  }

  set profile(value: Profile) {
    this.setElement<Profile>('profile', value);
  }

  get profile(): Profile {
    const value = this.getElement<Profile>('profile');
    if (!value) throw 'The value of profile is not set';
    return value;
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}


export enum InteractionOperatorKind {
  seq,
  alt,
  opt,
  break,
  par,
  strict,
  loop,
  critical,
  neg,
  assert,
  ignore,
  consider,
}
export enum MessageKind {
  complete,
  lost,
  found,
  unknown,
}
export enum MessageSort {
  synchCall,
  asynchCall,
  asynchSignal,
  createMessage,
  deleteMessage,
  reply,
}

export interface IActionExecutionSpecification extends IExecutionSpecification {
  action: IAction;
  finish: IOccurrenceSpecification;
  start: IOccurrenceSpecification;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ActionExecutionSpecification extends Entity implements IActionExecutionSpecification {

  set action(value: Action) {
    this.setElement<Action>('action', value);
  }

  get action(): Action {
    const value = this.getElement<Action>('action');
    if (!value) throw 'The value of action is not set';
    return value;
  }

  set finish(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('finish', value);
  }

  get finish(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('finish');
    if (!value) throw 'The value of finish is not set';
    return value;
  }

  set start(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('start', value);
  }

  get start(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('start');
    if (!value) throw 'The value of start is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IBehaviorExecutionSpecification extends IExecutionSpecification {
  behavior?: IBehavior;
  finish: IOccurrenceSpecification;
  start: IOccurrenceSpecification;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class BehaviorExecutionSpecification extends Entity implements IBehaviorExecutionSpecification {

  set behavior(value: Behavior | undefined) {
    this.setElement<Behavior>('behavior', value);
  }

  get behavior(): Behavior | undefined {
    return this.getElement<Behavior>('behavior');
  }

  set finish(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('finish', value);
  }

  get finish(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('finish');
    if (!value) throw 'The value of finish is not set';
    return value;
  }

  set start(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('start', value);
  }

  get start(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('start');
    if (!value) throw 'The value of start is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICombinedFragment extends IInteractionFragment {
  cfragmentGate?: IGate[];
  interactionOperator: InteractionOperatorKind;
  operand: IInteractionOperand[];
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CombinedFragment extends Entity implements ICombinedFragment {

  set cfragmentGate(value: Gate[] | undefined) {
    this.setElements<Gate>('cfragmentGate', value);
  }

  get cfragmentGate(): Gate[] | undefined {
    return this.getElements<Gate>('cfragmentGate');
  }

  set interactionOperator(value: InteractionOperatorKind) {
    this.setEnum('interactionOperator', value);
  }

  get interactionOperator(): InteractionOperatorKind {
    const value = this.getEnum('interactionOperator');
    if (!value) throw 'The value of interactionOperator is not set';
    return value;
  }

  set operand(value: InteractionOperand[]) {
    this.setElements<InteractionOperand>('operand', value);
  }

  get operand(): InteractionOperand[] {
    const value = this.getElements<InteractionOperand>('operand');
    if (!value) throw 'The value of operand is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConsiderIgnoreFragment extends ICombinedFragment {
  message?: INamedElement[];
  cfragmentGate?: IGate[];
  interactionOperator: InteractionOperatorKind;
  operand: IInteractionOperand[];
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ConsiderIgnoreFragment extends Entity implements IConsiderIgnoreFragment {

  set message(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('message', value);
  }

  get message(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('message');
  }

  set cfragmentGate(value: Gate[] | undefined) {
    this.setElements<Gate>('cfragmentGate', value);
  }

  get cfragmentGate(): Gate[] | undefined {
    return this.getElements<Gate>('cfragmentGate');
  }

  set interactionOperator(value: InteractionOperatorKind) {
    this.setEnum('interactionOperator', value);
  }

  get interactionOperator(): InteractionOperatorKind {
    const value = this.getEnum('interactionOperator');
    if (!value) throw 'The value of interactionOperator is not set';
    return value;
  }

  set operand(value: InteractionOperand[]) {
    this.setElements<InteractionOperand>('operand', value);
  }

  get operand(): InteractionOperand[] {
    const value = this.getElements<InteractionOperand>('operand');
    if (!value) throw 'The value of operand is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IContinuation extends IInteractionFragment {
  setting: boolean;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Continuation extends Entity implements IContinuation {

  set setting(value: boolean) {
    this.setBoolean('setting', value);
  }

  get setting(): boolean {
    const value = this.getBoolean('setting');
    if (!value) throw 'The value of setting is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDestructionOccurrenceSpecification extends IMessageOccurrenceSpecification {
  message?: IMessage;
  covered?: ILifeline[];
  toAfter?: IGeneralOrdering[];
  toBefore?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DestructionOccurrenceSpecification extends Entity implements IDestructionOccurrenceSpecification {

  set message(value: Message | undefined) {
    this.setElement<Message>('message', value);
  }

  get message(): Message | undefined {
    return this.getElement<Message>('message');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set toAfter(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toAfter', value);
  }

  get toAfter(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toAfter');
  }

  set toBefore(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toBefore', value);
  }

  get toBefore(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toBefore');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExecutionOccurrenceSpecification extends IOccurrenceSpecification {
  execution: IExecutionSpecification;
  covered?: ILifeline[];
  toAfter?: IGeneralOrdering[];
  toBefore?: IGeneralOrdering[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExecutionOccurrenceSpecification extends Entity implements IExecutionOccurrenceSpecification {

  set execution(value: ExecutionSpecification) {
    this.setElement<ExecutionSpecification>('execution', value);
  }

  get execution(): ExecutionSpecification {
    const value = this.getElement<ExecutionSpecification>('execution');
    if (!value) throw 'The value of execution is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set toAfter(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toAfter', value);
  }

  get toAfter(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toAfter');
  }

  set toBefore(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toBefore', value);
  }

  get toBefore(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toBefore');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExecutionSpecification extends IInteractionFragment {
  finish: IOccurrenceSpecification;
  start: IOccurrenceSpecification;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExecutionSpecification extends Entity implements IExecutionSpecification {

  set finish(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('finish', value);
  }

  get finish(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('finish');
    if (!value) throw 'The value of finish is not set';
    return value;
  }

  set start(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('start', value);
  }

  get start(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('start');
    if (!value) throw 'The value of start is not set';
    return value;
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IGate extends IMessageEnd {
  message?: IMessage;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Gate extends Entity implements IGate {

  set message(value: Message | undefined) {
    this.setElement<Message>('message', value);
  }

  get message(): Message | undefined {
    return this.getElement<Message>('message');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IGeneralOrdering extends INamedElement {
  after: IOccurrenceSpecification;
  before: IOccurrenceSpecification;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class GeneralOrdering extends Entity implements IGeneralOrdering {

  set after(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('after', value);
  }

  get after(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('after');
    if (!value) throw 'The value of after is not set';
    return value;
  }

  set before(value: OccurrenceSpecification) {
    this.setElement<OccurrenceSpecification>('before', value);
  }

  get before(): OccurrenceSpecification {
    const value = this.getElement<OccurrenceSpecification>('before');
    if (!value) throw 'The value of before is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInteraction extends IInteractionFragment, IBehavior {
  action?: IAction[];
  formalGate?: IGate[];
  fragment?: IInteractionFragment[];
  lifeline?: ILifeline[];
  message?: IMessage[];
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  owningTemplateParameter?: ITemplateParameter;
}

export class Interaction extends Entity implements IInteraction {

  set action(value: Action[] | undefined) {
    this.setElements<Action>('action', value);
  }

  get action(): Action[] | undefined {
    return this.getElements<Action>('action');
  }

  set formalGate(value: Gate[] | undefined) {
    this.setElements<Gate>('formalGate', value);
  }

  get formalGate(): Gate[] | undefined {
    return this.getElements<Gate>('formalGate');
  }

  set fragment(value: InteractionFragment[] | undefined) {
    this.setElements<InteractionFragment>('fragment', value);
  }

  get fragment(): InteractionFragment[] | undefined {
    return this.getElements<InteractionFragment>('fragment');
  }

  set lifeline(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('lifeline', value);
  }

  get lifeline(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('lifeline');
  }

  set message(value: Message[] | undefined) {
    this.setElements<Message>('message', value);
  }

  get message(): Message[] | undefined {
    return this.getElements<Message>('message');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IInteractionConstraint extends IConstraint {
  maxint?: IValueSpecification;
  minint?: IValueSpecification;
  constrainedElement?: IElement[];
  context?: INamespace;
  specification: IValueSpecification;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InteractionConstraint extends Entity implements IInteractionConstraint {

  set maxint(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('maxint', value);
  }

  get maxint(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('maxint');
  }

  set minint(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('minint', value);
  }

  get minint(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('minint');
  }

  set constrainedElement(value: Element[] | undefined) {
    this.setElements<Element>('constrainedElement', value);
  }

  get constrainedElement(): Element[] | undefined {
    return this.getElements<Element>('constrainedElement');
  }

  set context(value: Namespace | undefined) {
    this.setElement<Namespace>('context', value);
  }

  get context(): Namespace | undefined {
    return this.getElement<Namespace>('context');
  }

  set specification(value: ValueSpecification) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('specification');
    if (!value) throw 'The value of specification is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInteractionFragment extends INamedElement {
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InteractionFragment extends Entity implements IInteractionFragment {

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInteractionOperand extends IInteractionFragment, INamespace {
  fragment?: IInteractionFragment[];
  guard?: IInteractionConstraint;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InteractionOperand extends Entity implements IInteractionOperand {

  set fragment(value: InteractionFragment[] | undefined) {
    this.setElements<InteractionFragment>('fragment', value);
  }

  get fragment(): InteractionFragment[] | undefined {
    return this.getElements<InteractionFragment>('fragment');
  }

  set guard(value: InteractionConstraint | undefined) {
    this.setElement<InteractionConstraint>('guard', value);
  }

  get guard(): InteractionConstraint | undefined {
    return this.getElement<InteractionConstraint>('guard');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInteractionUse extends IInteractionFragment {
  actualGate?: IGate[];
  argument?: IValueSpecification[];
  refersTo: IInteraction;
  returnValue?: IValueSpecification;
  returnValueRecipient?: IProperty;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InteractionUse extends Entity implements IInteractionUse {

  set actualGate(value: Gate[] | undefined) {
    this.setElements<Gate>('actualGate', value);
  }

  get actualGate(): Gate[] | undefined {
    return this.getElements<Gate>('actualGate');
  }

  set argument(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('argument', value);
  }

  get argument(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('argument');
  }

  set refersTo(value: Interaction) {
    this.setElement<Interaction>('refersTo', value);
  }

  get refersTo(): Interaction {
    const value = this.getElement<Interaction>('refersTo');
    if (!value) throw 'The value of refersTo is not set';
    return value;
  }

  set returnValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('returnValue', value);
  }

  get returnValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('returnValue');
  }

  set returnValueRecipient(value: Property | undefined) {
    this.setElement<Property>('returnValueRecipient', value);
  }

  get returnValueRecipient(): Property | undefined {
    return this.getElement<Property>('returnValueRecipient');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILifeline extends INamedElement {
  coveredBy?: IInteractionFragment[];
  decomposedAs?: IPartDecomposition;
  interaction: IInteraction;
  represents?: IConnectableElement;
  selector?: IValueSpecification;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Lifeline extends Entity implements ILifeline {

  set coveredBy(value: InteractionFragment[] | undefined) {
    this.setElements<InteractionFragment>('coveredBy', value);
  }

  get coveredBy(): InteractionFragment[] | undefined {
    return this.getElements<InteractionFragment>('coveredBy');
  }

  set decomposedAs(value: PartDecomposition | undefined) {
    this.setElement<PartDecomposition>('decomposedAs', value);
  }

  get decomposedAs(): PartDecomposition | undefined {
    return this.getElement<PartDecomposition>('decomposedAs');
  }

  set interaction(value: Interaction) {
    this.setElement<Interaction>('interaction', value);
  }

  get interaction(): Interaction {
    const value = this.getElement<Interaction>('interaction');
    if (!value) throw 'The value of interaction is not set';
    return value;
  }

  set represents(value: ConnectableElement | undefined) {
    this.setElement<ConnectableElement>('represents', value);
  }

  get represents(): ConnectableElement | undefined {
    return this.getElement<ConnectableElement>('represents');
  }

  set selector(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('selector', value);
  }

  get selector(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('selector');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IMessage extends INamedElement {
  argument?: IValueSpecification[];
  connector?: IConnector;
  interaction: IInteraction;
  messageKind: MessageKind;
  messageSort: MessageSort;
  receiveEvent?: IMessageEnd;
  sendEvent?: IMessageEnd;
  signature?: INamedElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Message extends Entity implements IMessage {

  set argument(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('argument', value);
  }

  get argument(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('argument');
  }

  set connector(value: Connector | undefined) {
    this.setElement<Connector>('connector', value);
  }

  get connector(): Connector | undefined {
    return this.getElement<Connector>('connector');
  }

  set interaction(value: Interaction) {
    this.setElement<Interaction>('interaction', value);
  }

  get interaction(): Interaction {
    const value = this.getElement<Interaction>('interaction');
    if (!value) throw 'The value of interaction is not set';
    return value;
  }

  set messageKind(value: MessageKind) {
    this.setEnum('messageKind', value);
  }

  get messageKind(): MessageKind {
    const value = this.getEnum('messageKind');
    if (!value) throw 'The value of messageKind is not set';
    return value;
  }

  set messageSort(value: MessageSort) {
    this.setEnum('messageSort', value);
  }

  get messageSort(): MessageSort {
    const value = this.getEnum('messageSort');
    if (!value) throw 'The value of messageSort is not set';
    return value;
  }

  set receiveEvent(value: MessageEnd | undefined) {
    this.setElement<MessageEnd>('receiveEvent', value);
  }

  get receiveEvent(): MessageEnd | undefined {
    return this.getElement<MessageEnd>('receiveEvent');
  }

  set sendEvent(value: MessageEnd | undefined) {
    this.setElement<MessageEnd>('sendEvent', value);
  }

  get sendEvent(): MessageEnd | undefined {
    return this.getElement<MessageEnd>('sendEvent');
  }

  set signature(value: NamedElement | undefined) {
    this.setElement<NamedElement>('signature', value);
  }

  get signature(): NamedElement | undefined {
    return this.getElement<NamedElement>('signature');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IMessageEnd extends INamedElement {
  message?: IMessage;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class MessageEnd extends Entity implements IMessageEnd {

  set message(value: Message | undefined) {
    this.setElement<Message>('message', value);
  }

  get message(): Message | undefined {
    return this.getElement<Message>('message');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IMessageOccurrenceSpecification extends IMessageEnd, IOccurrenceSpecification {
  message?: IMessage;
  covered?: ILifeline[];
  toAfter?: IGeneralOrdering[];
  toBefore?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class MessageOccurrenceSpecification extends Entity implements IMessageOccurrenceSpecification {

  set message(value: Message | undefined) {
    this.setElement<Message>('message', value);
  }

  get message(): Message | undefined {
    return this.getElement<Message>('message');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set toAfter(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toAfter', value);
  }

  get toAfter(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toAfter');
  }

  set toBefore(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toBefore', value);
  }

  get toBefore(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toBefore');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IOccurrenceSpecification extends IInteractionFragment {
  covered?: ILifeline[];
  toAfter?: IGeneralOrdering[];
  toBefore?: IGeneralOrdering[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class OccurrenceSpecification extends Entity implements IOccurrenceSpecification {

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set toAfter(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toAfter', value);
  }

  get toAfter(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toAfter');
  }

  set toBefore(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('toBefore', value);
  }

  get toBefore(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('toBefore');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPartDecomposition extends IInteractionUse {
  actualGate?: IGate[];
  argument?: IValueSpecification[];
  refersTo: IInteraction;
  returnValue?: IValueSpecification;
  returnValueRecipient?: IProperty;
  covered?: ILifeline[];
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class PartDecomposition extends Entity implements IPartDecomposition {

  set actualGate(value: Gate[] | undefined) {
    this.setElements<Gate>('actualGate', value);
  }

  get actualGate(): Gate[] | undefined {
    return this.getElements<Gate>('actualGate');
  }

  set argument(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('argument', value);
  }

  get argument(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('argument');
  }

  set refersTo(value: Interaction) {
    this.setElement<Interaction>('refersTo', value);
  }

  get refersTo(): Interaction {
    const value = this.getElement<Interaction>('refersTo');
    if (!value) throw 'The value of refersTo is not set';
    return value;
  }

  set returnValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('returnValue', value);
  }

  get returnValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('returnValue');
  }

  set returnValueRecipient(value: Property | undefined) {
    this.setElement<Property>('returnValueRecipient', value);
  }

  get returnValueRecipient(): Property | undefined {
    return this.getElement<Property>('returnValueRecipient');
  }

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStateInvariant extends IInteractionFragment {
  covered?: ILifeline[];
  invariant: IConstraint;
  enclosingInteraction?: IInteraction;
  enclosingOperand?: IInteractionOperand;
  generalOrdering?: IGeneralOrdering[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class StateInvariant extends Entity implements IStateInvariant {

  set covered(value: Lifeline[] | undefined) {
    this.setElements<Lifeline>('covered', value);
  }

  get covered(): Lifeline[] | undefined {
    return this.getElements<Lifeline>('covered');
  }

  set invariant(value: Constraint) {
    this.setElement<Constraint>('invariant', value);
  }

  get invariant(): Constraint {
    const value = this.getElement<Constraint>('invariant');
    if (!value) throw 'The value of invariant is not set';
    return value;
  }

  set enclosingInteraction(value: Interaction | undefined) {
    this.setElement<Interaction>('enclosingInteraction', value);
  }

  get enclosingInteraction(): Interaction | undefined {
    return this.getElement<Interaction>('enclosingInteraction');
  }

  set enclosingOperand(value: InteractionOperand | undefined) {
    this.setElement<InteractionOperand>('enclosingOperand', value);
  }

  get enclosingOperand(): InteractionOperand | undefined {
    return this.getElement<InteractionOperand>('enclosingOperand');
  }

  set generalOrdering(value: GeneralOrdering[] | undefined) {
    this.setElements<GeneralOrdering>('generalOrdering', value);
  }

  get generalOrdering(): GeneralOrdering[] | undefined {
    return this.getElements<GeneralOrdering>('generalOrdering');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}



export interface IInformationFlow extends IDirectedRelationship, IPackageableElement {
  conveyed: IClassifier[];
  informationSource: INamedElement[];
  informationTarget: INamedElement[];
  realization?: IRelationship[];
  realizingActivityEdge?: IActivityEdge[];
  realizingConnector?: IConnector[];
  realizingMessage?: IMessage[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InformationFlow extends Entity implements IInformationFlow {

  set conveyed(value: Classifier[]) {
    this.setElements<Classifier>('conveyed', value);
  }

  get conveyed(): Classifier[] {
    const value = this.getElements<Classifier>('conveyed');
    if (!value) throw 'The value of conveyed is not set';
    return value;
  }

  set informationSource(value: NamedElement[]) {
    this.setElements<NamedElement>('informationSource', value);
  }

  get informationSource(): NamedElement[] {
    const value = this.getElements<NamedElement>('informationSource');
    if (!value) throw 'The value of informationSource is not set';
    return value;
  }

  set informationTarget(value: NamedElement[]) {
    this.setElements<NamedElement>('informationTarget', value);
  }

  get informationTarget(): NamedElement[] {
    const value = this.getElements<NamedElement>('informationTarget');
    if (!value) throw 'The value of informationTarget is not set';
    return value;
  }

  set realization(value: Relationship[] | undefined) {
    this.setElements<Relationship>('realization', value);
  }

  get realization(): Relationship[] | undefined {
    return this.getElements<Relationship>('realization');
  }

  set realizingActivityEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('realizingActivityEdge', value);
  }

  get realizingActivityEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('realizingActivityEdge');
  }

  set realizingConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('realizingConnector', value);
  }

  get realizingConnector(): Connector[] | undefined {
    return this.getElements<Connector>('realizingConnector');
  }

  set realizingMessage(value: Message[] | undefined) {
    this.setElements<Message>('realizingMessage', value);
  }

  get realizingMessage(): Message[] | undefined {
    return this.getElements<Message>('realizingMessage');
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInformationItem extends IClassifier {
  represented?: IClassifier[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class InformationItem extends Entity implements IInformationItem {

  set represented(value: Classifier[] | undefined) {
    this.setElements<Classifier>('represented', value);
  }

  get represented(): Classifier[] | undefined {
    return this.getElements<Classifier>('represented');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}



export interface IArtifact extends IClassifier, IDeployedArtifact {
  fileName?: string;
  manifestation?: IManifestation[];
  nestedArtifact?: IArtifact[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Artifact extends Entity implements IArtifact {

  set fileName(value: string | undefined) {
    this.setString('fileName', value);
  }

  get fileName(): string | undefined {
    return this.getString('fileName');
  }

  set manifestation(value: Manifestation[] | undefined) {
    this.setElements<Manifestation>('manifestation', value);
  }

  get manifestation(): Manifestation[] | undefined {
    return this.getElements<Manifestation>('manifestation');
  }

  set nestedArtifact(value: Artifact[] | undefined) {
    this.setElements<Artifact>('nestedArtifact', value);
  }

  get nestedArtifact(): Artifact[] | undefined {
    return this.getElements<Artifact>('nestedArtifact');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ICommunicationPath extends IAssociation {
  endType: IType[];
  isDerived: boolean;
  memberEnd: IProperty[];
  navigableOwnedEnd?: IProperty[];
  ownedEnd?: IProperty[];
  relatedElement: IElement[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
}

export class CommunicationPath extends Entity implements ICommunicationPath {

  set endType(value: Type[]) {
    this.setElements<Type>('endType', value);
  }

  get endType(): Type[] {
    const value = this.getElements<Type>('endType');
    if (!value) throw 'The value of endType is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set memberEnd(value: Property[]) {
    this.setElements<Property>('memberEnd', value);
  }

  get memberEnd(): Property[] {
    const value = this.getElements<Property>('memberEnd');
    if (!value) throw 'The value of memberEnd is not set';
    return value;
  }

  set navigableOwnedEnd(value: Property[] | undefined) {
    this.setElements<Property>('navigableOwnedEnd', value);
  }

  get navigableOwnedEnd(): Property[] | undefined {
    return this.getElements<Property>('navigableOwnedEnd');
  }

  set ownedEnd(value: Property[] | undefined) {
    this.setElements<Property>('ownedEnd', value);
  }

  get ownedEnd(): Property[] | undefined {
    return this.getElements<Property>('ownedEnd');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IDeployedArtifact extends INamedElement {
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DeployedArtifact extends Entity implements IDeployedArtifact {

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDeployment extends IDependency {
  configuration?: IDeploymentSpecification[];
  deployedArtifact?: IDeployedArtifact[];
  location: IDeploymentTarget;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Deployment extends Entity implements IDeployment {

  set configuration(value: DeploymentSpecification[] | undefined) {
    this.setElements<DeploymentSpecification>('configuration', value);
  }

  get configuration(): DeploymentSpecification[] | undefined {
    return this.getElements<DeploymentSpecification>('configuration');
  }

  set deployedArtifact(value: DeployedArtifact[] | undefined) {
    this.setElements<DeployedArtifact>('deployedArtifact', value);
  }

  get deployedArtifact(): DeployedArtifact[] | undefined {
    return this.getElements<DeployedArtifact>('deployedArtifact');
  }

  set location(value: DeploymentTarget) {
    this.setElement<DeploymentTarget>('location', value);
  }

  get location(): DeploymentTarget {
    const value = this.getElement<DeploymentTarget>('location');
    if (!value) throw 'The value of location is not set';
    return value;
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDeploymentSpecification extends IArtifact {
  deployment?: IDeployment;
  deploymentLocation?: string;
  executionLocation?: string;
  fileName?: string;
  manifestation?: IManifestation[];
  nestedArtifact?: IArtifact[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class DeploymentSpecification extends Entity implements IDeploymentSpecification {

  set deployment(value: Deployment | undefined) {
    this.setElement<Deployment>('deployment', value);
  }

  get deployment(): Deployment | undefined {
    return this.getElement<Deployment>('deployment');
  }

  set deploymentLocation(value: string | undefined) {
    this.setString('deploymentLocation', value);
  }

  get deploymentLocation(): string | undefined {
    return this.getString('deploymentLocation');
  }

  set executionLocation(value: string | undefined) {
    this.setString('executionLocation', value);
  }

  get executionLocation(): string | undefined {
    return this.getString('executionLocation');
  }

  set fileName(value: string | undefined) {
    this.setString('fileName', value);
  }

  get fileName(): string | undefined {
    return this.getString('fileName');
  }

  set manifestation(value: Manifestation[] | undefined) {
    this.setElements<Manifestation>('manifestation', value);
  }

  get manifestation(): Manifestation[] | undefined {
    return this.getElements<Manifestation>('manifestation');
  }

  set nestedArtifact(value: Artifact[] | undefined) {
    this.setElements<Artifact>('nestedArtifact', value);
  }

  get nestedArtifact(): Artifact[] | undefined {
    return this.getElements<Artifact>('nestedArtifact');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IDeploymentTarget extends INamedElement {
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DeploymentTarget extends Entity implements IDeploymentTarget {

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDevice extends INode {
  nestedNode?: INode[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  owningTemplateParameter?: ITemplateParameter;
}

export class Device extends Entity implements IDevice {

  set nestedNode(value: Node[] | undefined) {
    this.setElements<Node>('nestedNode', value);
  }

  get nestedNode(): Node[] | undefined {
    return this.getElements<Node>('nestedNode');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IExecutionEnvironment extends INode {
  nestedNode?: INode[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  owningTemplateParameter?: ITemplateParameter;
}

export class ExecutionEnvironment extends Entity implements IExecutionEnvironment {

  set nestedNode(value: Node[] | undefined) {
    this.setElements<Node>('nestedNode', value);
  }

  get nestedNode(): Node[] | undefined {
    return this.getElements<Node>('nestedNode');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IManifestation extends IAbstraction {
  utilizedElement: IPackageableElement;
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Manifestation extends Entity implements IManifestation {

  set utilizedElement(value: PackageableElement) {
    this.setElement<PackageableElement>('utilizedElement', value);
  }

  get utilizedElement(): PackageableElement {
    const value = this.getElement<PackageableElement>('utilizedElement');
    if (!value) throw 'The value of utilizedElement is not set';
    return value;
  }

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface INode extends IClass, IDeploymentTarget {
  nestedNode?: INode[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  owningTemplateParameter?: ITemplateParameter;
}

export class Node extends Entity implements INode {

  set nestedNode(value: Node[] | undefined) {
    this.setElements<Node>('nestedNode', value);
  }

  get nestedNode(): Node[] | undefined {
    return this.getElements<Node>('nestedNode');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}


export enum VisibilityKind {
  public,
  private,
  protected,
  package,
}

export interface IAbstraction extends IDependency {
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Abstraction extends Entity implements IAbstraction {

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IComment extends IElement {
  annotatedElement?: IElement[];
  body?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Comment extends Entity implements IComment {

  set annotatedElement(value: Element[] | undefined) {
    this.setElements<Element>('annotatedElement', value);
  }

  get annotatedElement(): Element[] | undefined {
    return this.getElements<Element>('annotatedElement');
  }

  set body(value: string | undefined) {
    this.setString('body', value);
  }

  get body(): string | undefined {
    return this.getString('body');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConstraint extends IPackageableElement {
  constrainedElement?: IElement[];
  context?: INamespace;
  specification: IValueSpecification;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Constraint extends Entity implements IConstraint {

  set constrainedElement(value: Element[] | undefined) {
    this.setElements<Element>('constrainedElement', value);
  }

  get constrainedElement(): Element[] | undefined {
    return this.getElements<Element>('constrainedElement');
  }

  set context(value: Namespace | undefined) {
    this.setElement<Namespace>('context', value);
  }

  get context(): Namespace | undefined {
    return this.getElement<Namespace>('context');
  }

  set specification(value: ValueSpecification) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('specification');
    if (!value) throw 'The value of specification is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDependency extends IDirectedRelationship, IPackageableElement {
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Dependency extends Entity implements IDependency {

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDirectedRelationship extends IRelationship {
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DirectedRelationship extends Entity implements IDirectedRelationship {

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IElement {
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Element extends Entity implements IElement {

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IElementImport extends IDirectedRelationship {
  alias?: string;
  importedElement: IPackageableElement;
  importingNamespace: INamespace;
  visibility: VisibilityKind;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ElementImport extends Entity implements IElementImport {

  set alias(value: string | undefined) {
    this.setString('alias', value);
  }

  get alias(): string | undefined {
    return this.getString('alias');
  }

  set importedElement(value: PackageableElement) {
    this.setElement<PackageableElement>('importedElement', value);
  }

  get importedElement(): PackageableElement {
    const value = this.getElement<PackageableElement>('importedElement');
    if (!value) throw 'The value of importedElement is not set';
    return value;
  }

  set importingNamespace(value: Namespace) {
    this.setElement<Namespace>('importingNamespace', value);
  }

  get importingNamespace(): Namespace {
    const value = this.getElement<Namespace>('importingNamespace');
    if (!value) throw 'The value of importingNamespace is not set';
    return value;
  }

  set visibility(value: VisibilityKind) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind {
    const value = this.getEnum('visibility');
    if (!value) throw 'The value of visibility is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IMultiplicityElement extends IElement {
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class MultiplicityElement extends Entity implements IMultiplicityElement {

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface INamedElement extends IElement {
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class NamedElement extends Entity implements INamedElement {

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface INamespace extends INamedElement {
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Namespace extends Entity implements INamespace {

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPackageableElement extends IParameterableElement, INamedElement {
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class PackageableElement extends Entity implements IPackageableElement {

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IPackageImport extends IDirectedRelationship {
  importedPackage: IPackage;
  importingNamespace: INamespace;
  visibility: VisibilityKind;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class PackageImport extends Entity implements IPackageImport {

  set importedPackage(value: Package) {
    this.setElement<Package>('importedPackage', value);
  }

  get importedPackage(): Package {
    const value = this.getElement<Package>('importedPackage');
    if (!value) throw 'The value of importedPackage is not set';
    return value;
  }

  set importingNamespace(value: Namespace) {
    this.setElement<Namespace>('importingNamespace', value);
  }

  get importingNamespace(): Namespace {
    const value = this.getElement<Namespace>('importingNamespace');
    if (!value) throw 'The value of importingNamespace is not set';
    return value;
  }

  set visibility(value: VisibilityKind) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind {
    const value = this.getEnum('visibility');
    if (!value) throw 'The value of visibility is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IParameterableElement extends IElement {
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ParameterableElement extends Entity implements IParameterableElement {

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRealization extends IAbstraction {
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Realization extends Entity implements IRealization {

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRelationship extends IElement {
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Relationship extends Entity implements IRelationship {

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITemplateableElement extends IElement {
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TemplateableElement extends Entity implements ITemplateableElement {

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITemplateBinding extends IDirectedRelationship {
  boundElement: ITemplateableElement;
  parameterSubstitution?: ITemplateParameterSubstitution[];
  signature: ITemplateSignature;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TemplateBinding extends Entity implements ITemplateBinding {

  set boundElement(value: TemplateableElement) {
    this.setElement<TemplateableElement>('boundElement', value);
  }

  get boundElement(): TemplateableElement {
    const value = this.getElement<TemplateableElement>('boundElement');
    if (!value) throw 'The value of boundElement is not set';
    return value;
  }

  set parameterSubstitution(value: TemplateParameterSubstitution[] | undefined) {
    this.setElements<TemplateParameterSubstitution>('parameterSubstitution', value);
  }

  get parameterSubstitution(): TemplateParameterSubstitution[] | undefined {
    return this.getElements<TemplateParameterSubstitution>('parameterSubstitution');
  }

  set signature(value: TemplateSignature) {
    this.setElement<TemplateSignature>('signature', value);
  }

  get signature(): TemplateSignature {
    const value = this.getElement<TemplateSignature>('signature');
    if (!value) throw 'The value of signature is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITemplateParameter extends IElement {
  default?: IParameterableElement;
  ownedDefault?: IParameterableElement;
  ownedParameteredElement?: IParameterableElement;
  parameteredElement: IParameterableElement;
  signature: ITemplateSignature;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TemplateParameter extends Entity implements ITemplateParameter {

  set default(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('default', value);
  }

  get default(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('default');
  }

  set ownedDefault(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedDefault', value);
  }

  get ownedDefault(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedDefault');
  }

  set ownedParameteredElement(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedParameteredElement', value);
  }

  get ownedParameteredElement(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedParameteredElement');
  }

  set parameteredElement(value: ParameterableElement) {
    this.setElement<ParameterableElement>('parameteredElement', value);
  }

  get parameteredElement(): ParameterableElement {
    const value = this.getElement<ParameterableElement>('parameteredElement');
    if (!value) throw 'The value of parameteredElement is not set';
    return value;
  }

  set signature(value: TemplateSignature) {
    this.setElement<TemplateSignature>('signature', value);
  }

  get signature(): TemplateSignature {
    const value = this.getElement<TemplateSignature>('signature');
    if (!value) throw 'The value of signature is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITemplateParameterSubstitution extends IElement {
  actual: IParameterableElement;
  formal: ITemplateParameter;
  ownedActual?: IParameterableElement;
  templateBinding: ITemplateBinding;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TemplateParameterSubstitution extends Entity implements ITemplateParameterSubstitution {

  set actual(value: ParameterableElement) {
    this.setElement<ParameterableElement>('actual', value);
  }

  get actual(): ParameterableElement {
    const value = this.getElement<ParameterableElement>('actual');
    if (!value) throw 'The value of actual is not set';
    return value;
  }

  set formal(value: TemplateParameter) {
    this.setElement<TemplateParameter>('formal', value);
  }

  get formal(): TemplateParameter {
    const value = this.getElement<TemplateParameter>('formal');
    if (!value) throw 'The value of formal is not set';
    return value;
  }

  set ownedActual(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedActual', value);
  }

  get ownedActual(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedActual');
  }

  set templateBinding(value: TemplateBinding) {
    this.setElement<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding {
    const value = this.getElement<TemplateBinding>('templateBinding');
    if (!value) throw 'The value of templateBinding is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITemplateSignature extends IElement {
  ownedParameter?: ITemplateParameter[];
  parameter: ITemplateParameter[];
  template: ITemplateableElement;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TemplateSignature extends Entity implements ITemplateSignature {

  set ownedParameter(value: TemplateParameter[] | undefined) {
    this.setElements<TemplateParameter>('ownedParameter', value);
  }

  get ownedParameter(): TemplateParameter[] | undefined {
    return this.getElements<TemplateParameter>('ownedParameter');
  }

  set parameter(value: TemplateParameter[]) {
    this.setElements<TemplateParameter>('parameter', value);
  }

  get parameter(): TemplateParameter[] {
    const value = this.getElements<TemplateParameter>('parameter');
    if (!value) throw 'The value of parameter is not set';
    return value;
  }

  set template(value: TemplateableElement) {
    this.setElement<TemplateableElement>('template', value);
  }

  get template(): TemplateableElement {
    const value = this.getElement<TemplateableElement>('template');
    if (!value) throw 'The value of template is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IType extends IPackageableElement {
  package?: IPackage;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Type extends Entity implements IType {

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITypedElement extends INamedElement {
  type?: IType;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TypedElement extends Entity implements ITypedElement {

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IUsage extends IDependency {
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Usage extends Entity implements IUsage {

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}



export interface IAnyReceiveEvent extends IMessageEvent {
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class AnyReceiveEvent extends Entity implements IAnyReceiveEvent {

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IBehavior extends IClass {
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Behavior extends Entity implements IBehavior {

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ICallEvent extends IMessageEvent {
  operation: IOperation;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CallEvent extends Entity implements ICallEvent {

  set operation(value: Operation) {
    this.setElement<Operation>('operation', value);
  }

  get operation(): Operation {
    const value = this.getElement<Operation>('operation');
    if (!value) throw 'The value of operation is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IChangeEvent extends IEvent {
  changeExpression: IValueSpecification;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ChangeEvent extends Entity implements IChangeEvent {

  set changeExpression(value: ValueSpecification) {
    this.setElement<ValueSpecification>('changeExpression', value);
  }

  get changeExpression(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('changeExpression');
    if (!value) throw 'The value of changeExpression is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IEvent extends IPackageableElement {
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Event extends Entity implements IEvent {

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IFunctionBehavior extends IOpaqueBehavior {
  body?: string[];
  language?: string[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class FunctionBehavior extends Entity implements IFunctionBehavior {

  set body(value: string[] | undefined) {
    this.setStrings('body', value);
  }

  get body(): string[] | undefined {
    return this.getStrings('body');
  }

  set language(value: string[] | undefined) {
    this.setStrings('language', value);
  }

  get language(): string[] | undefined {
    return this.getStrings('language');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IMessageEvent extends IEvent {
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class MessageEvent extends Entity implements IMessageEvent {

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IOpaqueBehavior extends IBehavior {
  body?: string[];
  language?: string[];
  context?: IBehavioredClassifier;
  isReentrant: boolean;
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  specification?: IBehavioralFeature;
  redefinedBehavior?: IBehavior[];
  extension?: IExtension[];
  isAbstract: boolean;
  isActive: boolean;
  nestedClassifier?: IClassifier[];
  ownedAttribute?: IProperty[];
  ownedOperation?: IOperation[];
  ownedReception?: IReception[];
  superClass?: IClass[];
  classifierBehavior?: IBehavior;
  interfaceRealization?: IInterfaceRealization[];
  ownedBehavior?: IBehavior[];
  ownedPort?: IPort[];
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  ownedConnector?: IConnector[];
  part?: IProperty[];
  role?: IConnectableElement[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class OpaqueBehavior extends Entity implements IOpaqueBehavior {

  set body(value: string[] | undefined) {
    this.setStrings('body', value);
  }

  get body(): string[] | undefined {
    return this.getStrings('body');
  }

  set language(value: string[] | undefined) {
    this.setStrings('language', value);
  }

  get language(): string[] | undefined {
    return this.getStrings('language');
  }

  set context(value: BehavioredClassifier | undefined) {
    this.setElement<BehavioredClassifier>('context', value);
  }

  get context(): BehavioredClassifier | undefined {
    return this.getElement<BehavioredClassifier>('context');
  }

  set isReentrant(value: boolean) {
    this.setBoolean('isReentrant', value);
  }

  get isReentrant(): boolean {
    const value = this.getBoolean('isReentrant');
    if (!value) throw 'The value of isReentrant is not set';
    return value;
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set specification(value: BehavioralFeature | undefined) {
    this.setElement<BehavioralFeature>('specification', value);
  }

  get specification(): BehavioralFeature | undefined {
    return this.getElement<BehavioralFeature>('specification');
  }

  set redefinedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('redefinedBehavior', value);
  }

  get redefinedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('redefinedBehavior');
  }

  set extension(value: Extension[] | undefined) {
    this.setElements<Extension>('extension', value);
  }

  get extension(): Extension[] | undefined {
    return this.getElements<Extension>('extension');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isActive(value: boolean) {
    this.setBoolean('isActive', value);
  }

  get isActive(): boolean {
    const value = this.getBoolean('isActive');
    if (!value) throw 'The value of isActive is not set';
    return value;
  }

  set nestedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('nestedClassifier', value);
  }

  get nestedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('nestedClassifier');
  }

  set ownedAttribute(value: Property[] | undefined) {
    this.setElements<Property>('ownedAttribute', value);
  }

  get ownedAttribute(): Property[] | undefined {
    return this.getElements<Property>('ownedAttribute');
  }

  set ownedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('ownedOperation', value);
  }

  get ownedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('ownedOperation');
  }

  set ownedReception(value: Reception[] | undefined) {
    this.setElements<Reception>('ownedReception', value);
  }

  get ownedReception(): Reception[] | undefined {
    return this.getElements<Reception>('ownedReception');
  }

  set superClass(value: Class[] | undefined) {
    this.setElements<Class>('superClass', value);
  }

  get superClass(): Class[] | undefined {
    return this.getElements<Class>('superClass');
  }

  set classifierBehavior(value: Behavior | undefined) {
    this.setElement<Behavior>('classifierBehavior', value);
  }

  get classifierBehavior(): Behavior | undefined {
    return this.getElement<Behavior>('classifierBehavior');
  }

  set interfaceRealization(value: InterfaceRealization[] | undefined) {
    this.setElements<InterfaceRealization>('interfaceRealization', value);
  }

  get interfaceRealization(): InterfaceRealization[] | undefined {
    return this.getElements<InterfaceRealization>('interfaceRealization');
  }

  set ownedBehavior(value: Behavior[] | undefined) {
    this.setElements<Behavior>('ownedBehavior', value);
  }

  get ownedBehavior(): Behavior[] | undefined {
    return this.getElements<Behavior>('ownedBehavior');
  }

  set ownedPort(value: Port[] | undefined) {
    this.setElements<Port>('ownedPort', value);
  }

  get ownedPort(): Port[] | undefined {
    return this.getElements<Port>('ownedPort');
  }

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set ownedConnector(value: Connector[] | undefined) {
    this.setElements<Connector>('ownedConnector', value);
  }

  get ownedConnector(): Connector[] | undefined {
    return this.getElements<Connector>('ownedConnector');
  }

  set part(value: Property[] | undefined) {
    this.setElements<Property>('part', value);
  }

  get part(): Property[] | undefined {
    return this.getElements<Property>('part');
  }

  set role(value: ConnectableElement[] | undefined) {
    this.setElements<ConnectableElement>('role', value);
  }

  get role(): ConnectableElement[] | undefined {
    return this.getElements<ConnectableElement>('role');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface ISignalEvent extends IMessageEvent {
  signal: ISignal;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class SignalEvent extends Entity implements ISignalEvent {

  set signal(value: Signal) {
    this.setElement<Signal>('signal', value);
  }

  get signal(): Signal {
    const value = this.getElement<Signal>('signal');
    if (!value) throw 'The value of signal is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITimeEvent extends IEvent {
  isRelative: boolean;
  when: ITimeExpression;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TimeEvent extends Entity implements ITimeEvent {

  set isRelative(value: boolean) {
    this.setBoolean('isRelative', value);
  }

  get isRelative(): boolean {
    const value = this.getBoolean('isRelative');
    if (!value) throw 'The value of isRelative is not set';
    return value;
  }

  set when(value: TimeExpression) {
    this.setElement<TimeExpression>('when', value);
  }

  get when(): TimeExpression {
    const value = this.getElement<TimeExpression>('when');
    if (!value) throw 'The value of when is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ITrigger extends INamedElement {
  event: IEvent;
  port?: IPort[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Trigger extends Entity implements ITrigger {

  set event(value: Event) {
    this.setElement<Event>('event', value);
  }

  get event(): Event {
    const value = this.getElement<Event>('event');
    if (!value) throw 'The value of event is not set';
    return value;
  }

  set port(value: Port[] | undefined) {
    this.setElements<Port>('port', value);
  }

  get port(): Port[] | undefined {
    return this.getElements<Port>('port');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}


export enum AggregationKind {
  none,
  shared,
  composite,
}
export enum CallConcurrencyKind {
  sequential,
  guarded,
  concurrent,
}
export enum ParameterDirectionKind {
  in,
  inout,
  out,
  return,
}
export enum ParameterEffectKind {
  create,
  read,
  update,
  delete,
}

export interface ISubstitution extends IRealization {
  contract: IClassifier;
  substitutingClassifier: IClassifier;
  mapping?: IOpaqueExpression;
  client: INamedElement[];
  supplier: INamedElement[];
  source: IElement[];
  target: IElement[];
  visibility?: VisibilityKind;
  relatedElement: IElement[];
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Substitution extends Entity implements ISubstitution {

  set contract(value: Classifier) {
    this.setElement<Classifier>('contract', value);
  }

  get contract(): Classifier {
    const value = this.getElement<Classifier>('contract');
    if (!value) throw 'The value of contract is not set';
    return value;
  }

  set substitutingClassifier(value: Classifier) {
    this.setElement<Classifier>('substitutingClassifier', value);
  }

  get substitutingClassifier(): Classifier {
    const value = this.getElement<Classifier>('substitutingClassifier');
    if (!value) throw 'The value of substitutingClassifier is not set';
    return value;
  }

  set mapping(value: OpaqueExpression | undefined) {
    this.setElement<OpaqueExpression>('mapping', value);
  }

  get mapping(): OpaqueExpression | undefined {
    return this.getElement<OpaqueExpression>('mapping');
  }

  set client(value: NamedElement[]) {
    this.setElements<NamedElement>('client', value);
  }

  get client(): NamedElement[] {
    const value = this.getElements<NamedElement>('client');
    if (!value) throw 'The value of client is not set';
    return value;
  }

  set supplier(value: NamedElement[]) {
    this.setElements<NamedElement>('supplier', value);
  }

  get supplier(): NamedElement[] {
    const value = this.getElements<NamedElement>('supplier');
    if (!value) throw 'The value of supplier is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IBehavioralFeature extends IFeature, INamespace {
  concurrency: CallConcurrencyKind;
  isAbstract: boolean;
  method?: IBehavior[];
  ownedParameter?: IParameter[];
  ownedParameterSet?: IParameterSet[];
  raisedException?: IType[];
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class BehavioralFeature extends Entity implements IBehavioralFeature {

  set concurrency(value: CallConcurrencyKind) {
    this.setEnum('concurrency', value);
  }

  get concurrency(): CallConcurrencyKind {
    const value = this.getEnum('concurrency');
    if (!value) throw 'The value of concurrency is not set';
    return value;
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set method(value: Behavior[] | undefined) {
    this.setElements<Behavior>('method', value);
  }

  get method(): Behavior[] | undefined {
    return this.getElements<Behavior>('method');
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set raisedException(value: Type[] | undefined) {
    this.setElements<Type>('raisedException', value);
  }

  get raisedException(): Type[] | undefined {
    return this.getElements<Type>('raisedException');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IClassifier extends INamespace, IType, ITemplateableElement, IRedefinableElement {
  attribute?: IProperty[];
  collaborationUse?: ICollaborationUse[];
  feature?: IFeature[];
  general?: IClassifier[];
  generalization?: IGeneralization[];
  inheritedMember?: INamedElement[];
  isAbstract: boolean;
  isFinalSpecialization: boolean;
  ownedTemplateSignature?: ITemplateSignature;
  ownedUseCase?: IUseCase[];
  powertypeExtent?: IGeneralizationSet[];
  redefinedClassifier?: IClassifier[];
  representation?: ICollaborationUse;
  substitution?: ISubstitution[];
  templateParameter?: ITemplateParameter;
  useCase?: IUseCase[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  package?: IPackage;
  templateBinding?: ITemplateBinding[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  owningTemplateParameter?: ITemplateParameter;
}

export class Classifier extends Entity implements IClassifier {

  set attribute(value: Property[] | undefined) {
    this.setElements<Property>('attribute', value);
  }

  get attribute(): Property[] | undefined {
    return this.getElements<Property>('attribute');
  }

  set collaborationUse(value: CollaborationUse[] | undefined) {
    this.setElements<CollaborationUse>('collaborationUse', value);
  }

  get collaborationUse(): CollaborationUse[] | undefined {
    return this.getElements<CollaborationUse>('collaborationUse');
  }

  set feature(value: Feature[] | undefined) {
    this.setElements<Feature>('feature', value);
  }

  get feature(): Feature[] | undefined {
    return this.getElements<Feature>('feature');
  }

  set general(value: Classifier[] | undefined) {
    this.setElements<Classifier>('general', value);
  }

  get general(): Classifier[] | undefined {
    return this.getElements<Classifier>('general');
  }

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set inheritedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('inheritedMember', value);
  }

  get inheritedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('inheritedMember');
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set isFinalSpecialization(value: boolean) {
    this.setBoolean('isFinalSpecialization', value);
  }

  get isFinalSpecialization(): boolean {
    const value = this.getBoolean('isFinalSpecialization');
    if (!value) throw 'The value of isFinalSpecialization is not set';
    return value;
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set ownedUseCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('ownedUseCase', value);
  }

  get ownedUseCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('ownedUseCase');
  }

  set powertypeExtent(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('powertypeExtent', value);
  }

  get powertypeExtent(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('powertypeExtent');
  }

  set redefinedClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinedClassifier', value);
  }

  get redefinedClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinedClassifier');
  }

  set representation(value: CollaborationUse | undefined) {
    this.setElement<CollaborationUse>('representation', value);
  }

  get representation(): CollaborationUse | undefined {
    return this.getElement<CollaborationUse>('representation');
  }

  set substitution(value: Substitution[] | undefined) {
    this.setElements<Substitution>('substitution', value);
  }

  get substitution(): Substitution[] | undefined {
    return this.getElements<Substitution>('substitution');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set useCase(value: UseCase[] | undefined) {
    this.setElements<UseCase>('useCase', value);
  }

  get useCase(): UseCase[] | undefined {
    return this.getElements<UseCase>('useCase');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set package(value: Package | undefined) {
    this.setElement<Package>('package', value);
  }

  get package(): Package | undefined {
    return this.getElement<Package>('package');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }
}
export interface IClassifierTemplateParameter extends ITemplateParameter {
  allowSubstitutable: boolean;
  constrainingClassifier?: IClassifier[];
  parameteredElement: IParameterableElement;
  default?: IParameterableElement;
  ownedDefault?: IParameterableElement;
  ownedParameteredElement?: IParameterableElement;
  signature: ITemplateSignature;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ClassifierTemplateParameter extends Entity implements IClassifierTemplateParameter {

  set allowSubstitutable(value: boolean) {
    this.setBoolean('allowSubstitutable', value);
  }

  get allowSubstitutable(): boolean {
    const value = this.getBoolean('allowSubstitutable');
    if (!value) throw 'The value of allowSubstitutable is not set';
    return value;
  }

  set constrainingClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('constrainingClassifier', value);
  }

  get constrainingClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('constrainingClassifier');
  }

  set parameteredElement(value: ParameterableElement) {
    this.setElement<ParameterableElement>('parameteredElement', value);
  }

  get parameteredElement(): ParameterableElement {
    const value = this.getElement<ParameterableElement>('parameteredElement');
    if (!value) throw 'The value of parameteredElement is not set';
    return value;
  }

  set default(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('default', value);
  }

  get default(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('default');
  }

  set ownedDefault(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedDefault', value);
  }

  get ownedDefault(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedDefault');
  }

  set ownedParameteredElement(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedParameteredElement', value);
  }

  get ownedParameteredElement(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedParameteredElement');
  }

  set signature(value: TemplateSignature) {
    this.setElement<TemplateSignature>('signature', value);
  }

  get signature(): TemplateSignature {
    const value = this.getElement<TemplateSignature>('signature');
    if (!value) throw 'The value of signature is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IFeature extends IRedefinableElement {
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Feature extends Entity implements IFeature {

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IGeneralization extends IDirectedRelationship {
  general: IClassifier;
  generalizationSet?: IGeneralizationSet[];
  isSubstitutable?: boolean;
  specific: IClassifier;
  source: IElement[];
  target: IElement[];
  relatedElement: IElement[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Generalization extends Entity implements IGeneralization {

  set general(value: Classifier) {
    this.setElement<Classifier>('general', value);
  }

  get general(): Classifier {
    const value = this.getElement<Classifier>('general');
    if (!value) throw 'The value of general is not set';
    return value;
  }

  set generalizationSet(value: GeneralizationSet[] | undefined) {
    this.setElements<GeneralizationSet>('generalizationSet', value);
  }

  get generalizationSet(): GeneralizationSet[] | undefined {
    return this.getElements<GeneralizationSet>('generalizationSet');
  }

  set isSubstitutable(value: boolean | undefined) {
    this.setBoolean('isSubstitutable', value);
  }

  get isSubstitutable(): boolean | undefined {
    return this.getBoolean('isSubstitutable');
  }

  set specific(value: Classifier) {
    this.setElement<Classifier>('specific', value);
  }

  get specific(): Classifier {
    const value = this.getElement<Classifier>('specific');
    if (!value) throw 'The value of specific is not set';
    return value;
  }

  set source(value: Element[]) {
    this.setElements<Element>('source', value);
  }

  get source(): Element[] {
    const value = this.getElements<Element>('source');
    if (!value) throw 'The value of source is not set';
    return value;
  }

  set target(value: Element[]) {
    this.setElements<Element>('target', value);
  }

  get target(): Element[] {
    const value = this.getElements<Element>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set relatedElement(value: Element[]) {
    this.setElements<Element>('relatedElement', value);
  }

  get relatedElement(): Element[] {
    const value = this.getElements<Element>('relatedElement');
    if (!value) throw 'The value of relatedElement is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IGeneralizationSet extends IPackageableElement {
  generalization?: IGeneralization[];
  isCovering: boolean;
  isDisjoint: boolean;
  powertype?: IClassifier;
  visibility?: VisibilityKind;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class GeneralizationSet extends Entity implements IGeneralizationSet {

  set generalization(value: Generalization[] | undefined) {
    this.setElements<Generalization>('generalization', value);
  }

  get generalization(): Generalization[] | undefined {
    return this.getElements<Generalization>('generalization');
  }

  set isCovering(value: boolean) {
    this.setBoolean('isCovering', value);
  }

  get isCovering(): boolean {
    const value = this.getBoolean('isCovering');
    if (!value) throw 'The value of isCovering is not set';
    return value;
  }

  set isDisjoint(value: boolean) {
    this.setBoolean('isDisjoint', value);
  }

  get isDisjoint(): boolean {
    const value = this.getBoolean('isDisjoint');
    if (!value) throw 'The value of isDisjoint is not set';
    return value;
  }

  set powertype(value: Classifier | undefined) {
    this.setElement<Classifier>('powertype', value);
  }

  get powertype(): Classifier | undefined {
    return this.getElement<Classifier>('powertype');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInstanceSpecification extends IDeploymentTarget, IPackageableElement, IDeployedArtifact {
  classifier?: IClassifier[];
  slot?: ISlot[];
  specification?: IValueSpecification;
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InstanceSpecification extends Entity implements IInstanceSpecification {

  set classifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('classifier', value);
  }

  get classifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('classifier');
  }

  set slot(value: Slot[] | undefined) {
    this.setElements<Slot>('slot', value);
  }

  get slot(): Slot[] | undefined {
    return this.getElements<Slot>('slot');
  }

  set specification(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('specification', value);
  }

  get specification(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('specification');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IInstanceValue extends IValueSpecification {
  instance: IInstanceSpecification;
  type?: IType;
  visibility?: VisibilityKind;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  owningTemplateParameter?: ITemplateParameter;
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InstanceValue extends Entity implements IInstanceValue {

  set instance(value: InstanceSpecification) {
    this.setElement<InstanceSpecification>('instance', value);
  }

  get instance(): InstanceSpecification {
    const value = this.getElement<InstanceSpecification>('instance');
    if (!value) throw 'The value of instance is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IOperation extends ITemplateableElement, IParameterableElement, IBehavioralFeature {
  bodyCondition?: IConstraint;
  class?: IClass;
  datatype?: IDataType;
  interface?: IInterface;
  isOrdered: boolean;
  isQuery: boolean;
  isUnique: boolean;
  lower?: number;
  ownedParameter?: IParameter[];
  postcondition?: IConstraint[];
  precondition?: IConstraint[];
  raisedException?: IType[];
  redefinedOperation?: IOperation[];
  templateParameter?: ITemplateParameter;
  type?: IType;
  upper?: number;
  ownedTemplateSignature?: ITemplateSignature;
  templateBinding?: ITemplateBinding[];
  owningTemplateParameter?: ITemplateParameter;
  concurrency: CallConcurrencyKind;
  isAbstract: boolean;
  method?: IBehavior[];
  ownedParameterSet?: IParameterSet[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
}

export class Operation extends Entity implements IOperation {

  set bodyCondition(value: Constraint | undefined) {
    this.setElement<Constraint>('bodyCondition', value);
  }

  get bodyCondition(): Constraint | undefined {
    return this.getElement<Constraint>('bodyCondition');
  }

  set class(value: Class | undefined) {
    this.setElement<Class>('class', value);
  }

  get class(): Class | undefined {
    return this.getElement<Class>('class');
  }

  set datatype(value: DataType | undefined) {
    this.setElement<DataType>('datatype', value);
  }

  get datatype(): DataType | undefined {
    return this.getElement<DataType>('datatype');
  }

  set interface(value: Interface | undefined) {
    this.setElement<Interface>('interface', value);
  }

  get interface(): Interface | undefined {
    return this.getElement<Interface>('interface');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isQuery(value: boolean) {
    this.setBoolean('isQuery', value);
  }

  get isQuery(): boolean {
    const value = this.getBoolean('isQuery');
    if (!value) throw 'The value of isQuery is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number | undefined) {
    this.setInteger('lower', value);
  }

  get lower(): number | undefined {
    return this.getInteger('lower');
  }

  set ownedParameter(value: Parameter[] | undefined) {
    this.setElements<Parameter>('ownedParameter', value);
  }

  get ownedParameter(): Parameter[] | undefined {
    return this.getElements<Parameter>('ownedParameter');
  }

  set postcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('postcondition', value);
  }

  get postcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('postcondition');
  }

  set precondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('precondition', value);
  }

  get precondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('precondition');
  }

  set raisedException(value: Type[] | undefined) {
    this.setElements<Type>('raisedException', value);
  }

  get raisedException(): Type[] | undefined {
    return this.getElements<Type>('raisedException');
  }

  set redefinedOperation(value: Operation[] | undefined) {
    this.setElements<Operation>('redefinedOperation', value);
  }

  get redefinedOperation(): Operation[] | undefined {
    return this.getElements<Operation>('redefinedOperation');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set upper(value: number | undefined) {
    this.setFloat('upper', value);
  }

  get upper(): number | undefined {
    return this.getFloat('upper');
  }

  set ownedTemplateSignature(value: TemplateSignature | undefined) {
    this.setElement<TemplateSignature>('ownedTemplateSignature', value);
  }

  get ownedTemplateSignature(): TemplateSignature | undefined {
    return this.getElement<TemplateSignature>('ownedTemplateSignature');
  }

  set templateBinding(value: TemplateBinding[] | undefined) {
    this.setElements<TemplateBinding>('templateBinding', value);
  }

  get templateBinding(): TemplateBinding[] | undefined {
    return this.getElements<TemplateBinding>('templateBinding');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set concurrency(value: CallConcurrencyKind) {
    this.setEnum('concurrency', value);
  }

  get concurrency(): CallConcurrencyKind {
    const value = this.getEnum('concurrency');
    if (!value) throw 'The value of concurrency is not set';
    return value;
  }

  set isAbstract(value: boolean) {
    this.setBoolean('isAbstract', value);
  }

  get isAbstract(): boolean {
    const value = this.getBoolean('isAbstract');
    if (!value) throw 'The value of isAbstract is not set';
    return value;
  }

  set method(value: Behavior[] | undefined) {
    this.setElements<Behavior>('method', value);
  }

  get method(): Behavior[] | undefined {
    return this.getElements<Behavior>('method');
  }

  set ownedParameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('ownedParameterSet', value);
  }

  get ownedParameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('ownedParameterSet');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }
}
export interface IOperationTemplateParameter extends ITemplateParameter {
  parameteredElement: IParameterableElement;
  default?: IParameterableElement;
  ownedDefault?: IParameterableElement;
  ownedParameteredElement?: IParameterableElement;
  signature: ITemplateSignature;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class OperationTemplateParameter extends Entity implements IOperationTemplateParameter {

  set parameteredElement(value: ParameterableElement) {
    this.setElement<ParameterableElement>('parameteredElement', value);
  }

  get parameteredElement(): ParameterableElement {
    const value = this.getElement<ParameterableElement>('parameteredElement');
    if (!value) throw 'The value of parameteredElement is not set';
    return value;
  }

  set default(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('default', value);
  }

  get default(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('default');
  }

  set ownedDefault(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedDefault', value);
  }

  get ownedDefault(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedDefault');
  }

  set ownedParameteredElement(value: ParameterableElement | undefined) {
    this.setElement<ParameterableElement>('ownedParameteredElement', value);
  }

  get ownedParameteredElement(): ParameterableElement | undefined {
    return this.getElement<ParameterableElement>('ownedParameteredElement');
  }

  set signature(value: TemplateSignature) {
    this.setElement<TemplateSignature>('signature', value);
  }

  get signature(): TemplateSignature {
    const value = this.getElement<TemplateSignature>('signature');
    if (!value) throw 'The value of signature is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IParameter extends IMultiplicityElement, IConnectableElement {
  default?: string;
  defaultValue?: IValueSpecification;
  direction: ParameterDirectionKind;
  effect?: ParameterEffectKind;
  isException: boolean;
  isStream: boolean;
  operation?: IOperation;
  parameterSet?: IParameterSet[];
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  type?: IType;
  owningTemplateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
}

export class Parameter extends Entity implements IParameter {

  set default(value: string | undefined) {
    this.setString('default', value);
  }

  get default(): string | undefined {
    return this.getString('default');
  }

  set defaultValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('defaultValue', value);
  }

  get defaultValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('defaultValue');
  }

  set direction(value: ParameterDirectionKind) {
    this.setEnum('direction', value);
  }

  get direction(): ParameterDirectionKind {
    const value = this.getEnum('direction');
    if (!value) throw 'The value of direction is not set';
    return value;
  }

  set effect(value: ParameterEffectKind | undefined) {
    this.setEnum('effect', value);
  }

  get effect(): ParameterEffectKind | undefined {
    return this.getEnum('effect');
  }

  set isException(value: boolean) {
    this.setBoolean('isException', value);
  }

  get isException(): boolean {
    const value = this.getBoolean('isException');
    if (!value) throw 'The value of isException is not set';
    return value;
  }

  set isStream(value: boolean) {
    this.setBoolean('isStream', value);
  }

  get isStream(): boolean {
    const value = this.getBoolean('isStream');
    if (!value) throw 'The value of isStream is not set';
    return value;
  }

  set operation(value: Operation | undefined) {
    this.setElement<Operation>('operation', value);
  }

  get operation(): Operation | undefined {
    return this.getElement<Operation>('operation');
  }

  set parameterSet(value: ParameterSet[] | undefined) {
    this.setElements<ParameterSet>('parameterSet', value);
  }

  get parameterSet(): ParameterSet[] | undefined {
    return this.getElements<ParameterSet>('parameterSet');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }
}
export interface IParameterSet extends INamedElement {
  condition?: IConstraint[];
  parameter: IParameter[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ParameterSet extends Entity implements IParameterSet {

  set condition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('condition', value);
  }

  get condition(): Constraint[] | undefined {
    return this.getElements<Constraint>('condition');
  }

  set parameter(value: Parameter[]) {
    this.setElements<Parameter>('parameter', value);
  }

  get parameter(): Parameter[] {
    const value = this.getElements<Parameter>('parameter');
    if (!value) throw 'The value of parameter is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IProperty extends IConnectableElement, IDeploymentTarget, IStructuralFeature {
  aggregation: AggregationKind;
  association?: IAssociation;
  associationEnd?: IProperty;
  class?: IClass;
  datatype?: IDataType;
  defaultValue?: IValueSpecification;
  interface?: IInterface;
  isComposite: boolean;
  isDerived: boolean;
  isDerivedUnion: boolean;
  isID: boolean;
  opposite?: IProperty;
  owningAssociation?: IAssociation;
  qualifier?: IProperty[];
  redefinedProperty?: IProperty[];
  subsettedProperty?: IProperty[];
  end?: IConnectorEnd[];
  templateParameter?: ITemplateParameter;
  deployedElement?: IPackageableElement[];
  deployment?: IDeployment[];
  isReadOnly: boolean;
  type?: IType;
  owningTemplateParameter?: ITemplateParameter;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class Property extends Entity implements IProperty {

  set aggregation(value: AggregationKind) {
    this.setEnum('aggregation', value);
  }

  get aggregation(): AggregationKind {
    const value = this.getEnum('aggregation');
    if (!value) throw 'The value of aggregation is not set';
    return value;
  }

  set association(value: Association | undefined) {
    this.setElement<Association>('association', value);
  }

  get association(): Association | undefined {
    return this.getElement<Association>('association');
  }

  set associationEnd(value: Property | undefined) {
    this.setElement<Property>('associationEnd', value);
  }

  get associationEnd(): Property | undefined {
    return this.getElement<Property>('associationEnd');
  }

  set class(value: Class | undefined) {
    this.setElement<Class>('class', value);
  }

  get class(): Class | undefined {
    return this.getElement<Class>('class');
  }

  set datatype(value: DataType | undefined) {
    this.setElement<DataType>('datatype', value);
  }

  get datatype(): DataType | undefined {
    return this.getElement<DataType>('datatype');
  }

  set defaultValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('defaultValue', value);
  }

  get defaultValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('defaultValue');
  }

  set interface(value: Interface | undefined) {
    this.setElement<Interface>('interface', value);
  }

  get interface(): Interface | undefined {
    return this.getElement<Interface>('interface');
  }

  set isComposite(value: boolean) {
    this.setBoolean('isComposite', value);
  }

  get isComposite(): boolean {
    const value = this.getBoolean('isComposite');
    if (!value) throw 'The value of isComposite is not set';
    return value;
  }

  set isDerived(value: boolean) {
    this.setBoolean('isDerived', value);
  }

  get isDerived(): boolean {
    const value = this.getBoolean('isDerived');
    if (!value) throw 'The value of isDerived is not set';
    return value;
  }

  set isDerivedUnion(value: boolean) {
    this.setBoolean('isDerivedUnion', value);
  }

  get isDerivedUnion(): boolean {
    const value = this.getBoolean('isDerivedUnion');
    if (!value) throw 'The value of isDerivedUnion is not set';
    return value;
  }

  set isID(value: boolean) {
    this.setBoolean('isID', value);
  }

  get isID(): boolean {
    const value = this.getBoolean('isID');
    if (!value) throw 'The value of isID is not set';
    return value;
  }

  set opposite(value: Property | undefined) {
    this.setElement<Property>('opposite', value);
  }

  get opposite(): Property | undefined {
    return this.getElement<Property>('opposite');
  }

  set owningAssociation(value: Association | undefined) {
    this.setElement<Association>('owningAssociation', value);
  }

  get owningAssociation(): Association | undefined {
    return this.getElement<Association>('owningAssociation');
  }

  set qualifier(value: Property[] | undefined) {
    this.setElements<Property>('qualifier', value);
  }

  get qualifier(): Property[] | undefined {
    return this.getElements<Property>('qualifier');
  }

  set redefinedProperty(value: Property[] | undefined) {
    this.setElements<Property>('redefinedProperty', value);
  }

  get redefinedProperty(): Property[] | undefined {
    return this.getElements<Property>('redefinedProperty');
  }

  set subsettedProperty(value: Property[] | undefined) {
    this.setElements<Property>('subsettedProperty', value);
  }

  get subsettedProperty(): Property[] | undefined {
    return this.getElements<Property>('subsettedProperty');
  }

  set end(value: ConnectorEnd[] | undefined) {
    this.setElements<ConnectorEnd>('end', value);
  }

  get end(): ConnectorEnd[] | undefined {
    return this.getElements<ConnectorEnd>('end');
  }

  set templateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('templateParameter', value);
  }

  get templateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('templateParameter');
  }

  set deployedElement(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('deployedElement', value);
  }

  get deployedElement(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('deployedElement');
  }

  set deployment(value: Deployment[] | undefined) {
    this.setElements<Deployment>('deployment', value);
  }

  get deployment(): Deployment[] | undefined {
    return this.getElements<Deployment>('deployment');
  }

  set isReadOnly(value: boolean) {
    this.setBoolean('isReadOnly', value);
  }

  get isReadOnly(): boolean {
    const value = this.getBoolean('isReadOnly');
    if (!value) throw 'The value of isReadOnly is not set';
    return value;
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set owningTemplateParameter(value: TemplateParameter | undefined) {
    this.setElement<TemplateParameter>('owningTemplateParameter', value);
  }

  get owningTemplateParameter(): TemplateParameter | undefined {
    return this.getElement<TemplateParameter>('owningTemplateParameter');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IRedefinableElement extends INamedElement {
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class RedefinableElement extends Entity implements IRedefinableElement {

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRedefinableTemplateSignature extends IRedefinableElement, ITemplateSignature {
  classifier: IClassifier;
  extendedSignature?: IRedefinableTemplateSignature[];
  inheritedParameter?: ITemplateParameter[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedParameter?: ITemplateParameter[];
  parameter: ITemplateParameter[];
  template: ITemplateableElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class RedefinableTemplateSignature extends Entity implements IRedefinableTemplateSignature {

  set classifier(value: Classifier) {
    this.setElement<Classifier>('classifier', value);
  }

  get classifier(): Classifier {
    const value = this.getElement<Classifier>('classifier');
    if (!value) throw 'The value of classifier is not set';
    return value;
  }

  set extendedSignature(value: RedefinableTemplateSignature[] | undefined) {
    this.setElements<RedefinableTemplateSignature>('extendedSignature', value);
  }

  get extendedSignature(): RedefinableTemplateSignature[] | undefined {
    return this.getElements<RedefinableTemplateSignature>('extendedSignature');
  }

  set inheritedParameter(value: TemplateParameter[] | undefined) {
    this.setElements<TemplateParameter>('inheritedParameter', value);
  }

  get inheritedParameter(): TemplateParameter[] | undefined {
    return this.getElements<TemplateParameter>('inheritedParameter');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedParameter(value: TemplateParameter[] | undefined) {
    this.setElements<TemplateParameter>('ownedParameter', value);
  }

  get ownedParameter(): TemplateParameter[] | undefined {
    return this.getElements<TemplateParameter>('ownedParameter');
  }

  set parameter(value: TemplateParameter[]) {
    this.setElements<TemplateParameter>('parameter', value);
  }

  get parameter(): TemplateParameter[] {
    const value = this.getElements<TemplateParameter>('parameter');
    if (!value) throw 'The value of parameter is not set';
    return value;
  }

  set template(value: TemplateableElement) {
    this.setElement<TemplateableElement>('template', value);
  }

  get template(): TemplateableElement {
    const value = this.getElement<TemplateableElement>('template');
    if (!value) throw 'The value of template is not set';
    return value;
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ISlot extends IElement {
  definingFeature: IStructuralFeature;
  owningInstance: IInstanceSpecification;
  value?: IValueSpecification[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Slot extends Entity implements ISlot {

  set definingFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('definingFeature', value);
  }

  get definingFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('definingFeature');
    if (!value) throw 'The value of definingFeature is not set';
    return value;
  }

  set owningInstance(value: InstanceSpecification) {
    this.setElement<InstanceSpecification>('owningInstance', value);
  }

  get owningInstance(): InstanceSpecification {
    const value = this.getElement<InstanceSpecification>('owningInstance');
    if (!value) throw 'The value of owningInstance is not set';
    return value;
  }

  set value(value: ValueSpecification[] | undefined) {
    this.setElements<ValueSpecification>('value', value);
  }

  get value(): ValueSpecification[] | undefined {
    return this.getElements<ValueSpecification>('value');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStructuralFeature extends IMultiplicityElement, ITypedElement, IFeature {
  isReadOnly: boolean;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  featuringClassifier?: IClassifier;
  isStatic: boolean;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class StructuralFeature extends Entity implements IStructuralFeature {

  set isReadOnly(value: boolean) {
    this.setBoolean('isReadOnly', value);
  }

  get isReadOnly(): boolean {
    const value = this.getBoolean('isReadOnly');
    if (!value) throw 'The value of isReadOnly is not set';
    return value;
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set featuringClassifier(value: Classifier | undefined) {
    this.setElement<Classifier>('featuringClassifier', value);
  }

  get featuringClassifier(): Classifier | undefined {
    return this.getElement<Classifier>('featuringClassifier');
  }

  set isStatic(value: boolean) {
    this.setBoolean('isStatic', value);
  }

  get isStatic(): boolean {
    const value = this.getBoolean('isStatic');
    if (!value) throw 'The value of isStatic is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}


export enum ExpansionKind {
  parallel,
  iterative,
  stream,
}

export interface IValueSpecificationAction extends IAction {
  result: IOutputPin;
  value: IValueSpecification;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ValueSpecificationAction extends Entity implements IValueSpecificationAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set value(value: ValueSpecification) {
    this.setElement<ValueSpecification>('value', value);
  }

  get value(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IVariableAction extends IAction {
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class VariableAction extends Entity implements IVariableAction {

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IWriteLinkAction extends ILinkAction {
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class WriteLinkAction extends Entity implements IWriteLinkAction {

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IWriteStructuralFeatureAction extends IStructuralFeatureAction {
  result?: IOutputPin;
  value?: IInputPin;
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class WriteStructuralFeatureAction extends Entity implements IWriteStructuralFeatureAction {

  set result(value: OutputPin | undefined) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin | undefined {
    return this.getElement<OutputPin>('result');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IWriteVariableAction extends IVariableAction {
  value?: IInputPin;
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class WriteVariableAction extends Entity implements IWriteVariableAction {

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IAcceptCallAction extends IAcceptEventAction {
  returnInformation: IOutputPin;
  isUnmarshall: boolean;
  result?: IOutputPin[];
  trigger: ITrigger[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class AcceptCallAction extends Entity implements IAcceptCallAction {

  set returnInformation(value: OutputPin) {
    this.setElement<OutputPin>('returnInformation', value);
  }

  get returnInformation(): OutputPin {
    const value = this.getElement<OutputPin>('returnInformation');
    if (!value) throw 'The value of returnInformation is not set';
    return value;
  }

  set isUnmarshall(value: boolean) {
    this.setBoolean('isUnmarshall', value);
  }

  get isUnmarshall(): boolean {
    const value = this.getBoolean('isUnmarshall');
    if (!value) throw 'The value of isUnmarshall is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set trigger(value: Trigger[]) {
    this.setElements<Trigger>('trigger', value);
  }

  get trigger(): Trigger[] {
    const value = this.getElements<Trigger>('trigger');
    if (!value) throw 'The value of trigger is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IAcceptEventAction extends IAction {
  isUnmarshall: boolean;
  result?: IOutputPin[];
  trigger: ITrigger[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class AcceptEventAction extends Entity implements IAcceptEventAction {

  set isUnmarshall(value: boolean) {
    this.setBoolean('isUnmarshall', value);
  }

  get isUnmarshall(): boolean {
    const value = this.getBoolean('isUnmarshall');
    if (!value) throw 'The value of isUnmarshall is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set trigger(value: Trigger[]) {
    this.setElements<Trigger>('trigger', value);
  }

  get trigger(): Trigger[] {
    const value = this.getElements<Trigger>('trigger');
    if (!value) throw 'The value of trigger is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IAction extends IExecutableNode {
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Action extends Entity implements IAction {

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IActionInputPin extends IInputPin {
  fromAction: IAction;
  isControl: boolean;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class ActionInputPin extends Entity implements IActionInputPin {

  set fromAction(value: Action) {
    this.setElement<Action>('fromAction', value);
  }

  get fromAction(): Action {
    const value = this.getElement<Action>('fromAction');
    if (!value) throw 'The value of fromAction is not set';
    return value;
  }

  set isControl(value: boolean) {
    this.setBoolean('isControl', value);
  }

  get isControl(): boolean {
    const value = this.getBoolean('isControl');
    if (!value) throw 'The value of isControl is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IAddStructuralFeatureValueAction extends IWriteStructuralFeatureAction {
  insertAt?: IInputPin;
  isReplaceAll: boolean;
  result?: IOutputPin;
  value?: IInputPin;
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class AddStructuralFeatureValueAction extends Entity implements IAddStructuralFeatureValueAction {

  set insertAt(value: InputPin | undefined) {
    this.setElement<InputPin>('insertAt', value);
  }

  get insertAt(): InputPin | undefined {
    return this.getElement<InputPin>('insertAt');
  }

  set isReplaceAll(value: boolean) {
    this.setBoolean('isReplaceAll', value);
  }

  get isReplaceAll(): boolean {
    const value = this.getBoolean('isReplaceAll');
    if (!value) throw 'The value of isReplaceAll is not set';
    return value;
  }

  set result(value: OutputPin | undefined) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin | undefined {
    return this.getElement<OutputPin>('result');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IAddVariableValueAction extends IWriteVariableAction {
  insertAt?: IInputPin;
  isReplaceAll: boolean;
  value?: IInputPin;
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class AddVariableValueAction extends Entity implements IAddVariableValueAction {

  set insertAt(value: InputPin | undefined) {
    this.setElement<InputPin>('insertAt', value);
  }

  get insertAt(): InputPin | undefined {
    return this.getElement<InputPin>('insertAt');
  }

  set isReplaceAll(value: boolean) {
    this.setBoolean('isReplaceAll', value);
  }

  get isReplaceAll(): boolean {
    const value = this.getBoolean('isReplaceAll');
    if (!value) throw 'The value of isReplaceAll is not set';
    return value;
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IBroadcastSignalAction extends IInvocationAction {
  signal: ISignal;
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class BroadcastSignalAction extends Entity implements IBroadcastSignalAction {

  set signal(value: Signal) {
    this.setElement<Signal>('signal', value);
  }

  get signal(): Signal {
    const value = this.getElement<Signal>('signal');
    if (!value) throw 'The value of signal is not set';
    return value;
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICallAction extends IInvocationAction {
  isSynchronous: boolean;
  result?: IOutputPin[];
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CallAction extends Entity implements ICallAction {

  set isSynchronous(value: boolean) {
    this.setBoolean('isSynchronous', value);
  }

  get isSynchronous(): boolean {
    const value = this.getBoolean('isSynchronous');
    if (!value) throw 'The value of isSynchronous is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICallBehaviorAction extends ICallAction {
  behavior: IBehavior;
  isSynchronous: boolean;
  result?: IOutputPin[];
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CallBehaviorAction extends Entity implements ICallBehaviorAction {

  set behavior(value: Behavior) {
    this.setElement<Behavior>('behavior', value);
  }

  get behavior(): Behavior {
    const value = this.getElement<Behavior>('behavior');
    if (!value) throw 'The value of behavior is not set';
    return value;
  }

  set isSynchronous(value: boolean) {
    this.setBoolean('isSynchronous', value);
  }

  get isSynchronous(): boolean {
    const value = this.getBoolean('isSynchronous');
    if (!value) throw 'The value of isSynchronous is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICallOperationAction extends ICallAction {
  operation: IOperation;
  target: IInputPin;
  isSynchronous: boolean;
  result?: IOutputPin[];
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CallOperationAction extends Entity implements ICallOperationAction {

  set operation(value: Operation) {
    this.setElement<Operation>('operation', value);
  }

  get operation(): Operation {
    const value = this.getElement<Operation>('operation');
    if (!value) throw 'The value of operation is not set';
    return value;
  }

  set target(value: InputPin) {
    this.setElement<InputPin>('target', value);
  }

  get target(): InputPin {
    const value = this.getElement<InputPin>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set isSynchronous(value: boolean) {
    this.setBoolean('isSynchronous', value);
  }

  get isSynchronous(): boolean {
    const value = this.getBoolean('isSynchronous');
    if (!value) throw 'The value of isSynchronous is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IClause extends IElement {
  body?: IExecutableNode[];
  bodyOutput?: IOutputPin[];
  decider: IOutputPin;
  predecessorClause?: IClause[];
  successorClause?: IClause[];
  test: IExecutableNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class Clause extends Entity implements IClause {

  set body(value: ExecutableNode[] | undefined) {
    this.setElements<ExecutableNode>('body', value);
  }

  get body(): ExecutableNode[] | undefined {
    return this.getElements<ExecutableNode>('body');
  }

  set bodyOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('bodyOutput', value);
  }

  get bodyOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('bodyOutput');
  }

  set decider(value: OutputPin) {
    this.setElement<OutputPin>('decider', value);
  }

  get decider(): OutputPin {
    const value = this.getElement<OutputPin>('decider');
    if (!value) throw 'The value of decider is not set';
    return value;
  }

  set predecessorClause(value: Clause[] | undefined) {
    this.setElements<Clause>('predecessorClause', value);
  }

  get predecessorClause(): Clause[] | undefined {
    return this.getElements<Clause>('predecessorClause');
  }

  set successorClause(value: Clause[] | undefined) {
    this.setElements<Clause>('successorClause', value);
  }

  get successorClause(): Clause[] | undefined {
    return this.getElements<Clause>('successorClause');
  }

  set test(value: ExecutableNode[]) {
    this.setElements<ExecutableNode>('test', value);
  }

  get test(): ExecutableNode[] {
    const value = this.getElements<ExecutableNode>('test');
    if (!value) throw 'The value of test is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IClearAssociationAction extends IAction {
  association: IAssociation;
  object: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ClearAssociationAction extends Entity implements IClearAssociationAction {

  set association(value: Association) {
    this.setElement<Association>('association', value);
  }

  get association(): Association {
    const value = this.getElement<Association>('association');
    if (!value) throw 'The value of association is not set';
    return value;
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IClearStructuralFeatureAction extends IStructuralFeatureAction {
  result?: IOutputPin;
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ClearStructuralFeatureAction extends Entity implements IClearStructuralFeatureAction {

  set result(value: OutputPin | undefined) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin | undefined {
    return this.getElement<OutputPin>('result');
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IClearVariableAction extends IVariableAction {
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ClearVariableAction extends Entity implements IClearVariableAction {

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IConditionalNode extends IStructuredActivityNode {
  clause: IClause[];
  isAssured: boolean;
  isDeterminate: boolean;
  result?: IOutputPin[];
  activity?: IActivity;
  edge?: IActivityEdge[];
  mustIsolate: boolean;
  node?: IActivityNode[];
  structuredNodeInput?: IInputPin[];
  structuredNodeOutput?: IOutputPin[];
  variable?: IVariable[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  handler?: IExceptionHandler[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class ConditionalNode extends Entity implements IConditionalNode {

  set clause(value: Clause[]) {
    this.setElements<Clause>('clause', value);
  }

  get clause(): Clause[] {
    const value = this.getElements<Clause>('clause');
    if (!value) throw 'The value of clause is not set';
    return value;
  }

  set isAssured(value: boolean) {
    this.setBoolean('isAssured', value);
  }

  get isAssured(): boolean {
    const value = this.getBoolean('isAssured');
    if (!value) throw 'The value of isAssured is not set';
    return value;
  }

  set isDeterminate(value: boolean) {
    this.setBoolean('isDeterminate', value);
  }

  get isDeterminate(): boolean {
    const value = this.getBoolean('isDeterminate');
    if (!value) throw 'The value of isDeterminate is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set mustIsolate(value: boolean) {
    this.setBoolean('mustIsolate', value);
  }

  get mustIsolate(): boolean {
    const value = this.getBoolean('mustIsolate');
    if (!value) throw 'The value of mustIsolate is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set structuredNodeInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('structuredNodeInput', value);
  }

  get structuredNodeInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('structuredNodeInput');
  }

  set structuredNodeOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('structuredNodeOutput', value);
  }

  get structuredNodeOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('structuredNodeOutput');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface ICreateLinkAction extends IWriteLinkAction {
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CreateLinkAction extends Entity implements ICreateLinkAction {

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICreateLinkObjectAction extends ICreateLinkAction {
  result: IOutputPin;
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CreateLinkObjectAction extends Entity implements ICreateLinkObjectAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ICreateObjectAction extends IAction {
  classifier: IClassifier;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class CreateObjectAction extends Entity implements ICreateObjectAction {

  set classifier(value: Classifier) {
    this.setElement<Classifier>('classifier', value);
  }

  get classifier(): Classifier {
    const value = this.getElement<Classifier>('classifier');
    if (!value) throw 'The value of classifier is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDestroyLinkAction extends IWriteLinkAction {
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DestroyLinkAction extends Entity implements IDestroyLinkAction {

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IDestroyObjectAction extends IAction {
  isDestroyLinks: boolean;
  isDestroyOwnedObjects: boolean;
  target: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class DestroyObjectAction extends Entity implements IDestroyObjectAction {

  set isDestroyLinks(value: boolean) {
    this.setBoolean('isDestroyLinks', value);
  }

  get isDestroyLinks(): boolean {
    const value = this.getBoolean('isDestroyLinks');
    if (!value) throw 'The value of isDestroyLinks is not set';
    return value;
  }

  set isDestroyOwnedObjects(value: boolean) {
    this.setBoolean('isDestroyOwnedObjects', value);
  }

  get isDestroyOwnedObjects(): boolean {
    const value = this.getBoolean('isDestroyOwnedObjects');
    if (!value) throw 'The value of isDestroyOwnedObjects is not set';
    return value;
  }

  set target(value: InputPin) {
    this.setElement<InputPin>('target', value);
  }

  get target(): InputPin {
    const value = this.getElement<InputPin>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExpansionNode extends IObjectNode {
  regionAsInput?: IExpansionRegion;
  regionAsOutput?: IExpansionRegion;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ExpansionNode extends Entity implements IExpansionNode {

  set regionAsInput(value: ExpansionRegion | undefined) {
    this.setElement<ExpansionRegion>('regionAsInput', value);
  }

  get regionAsInput(): ExpansionRegion | undefined {
    return this.getElement<ExpansionRegion>('regionAsInput');
  }

  set regionAsOutput(value: ExpansionRegion | undefined) {
    this.setElement<ExpansionRegion>('regionAsOutput', value);
  }

  get regionAsOutput(): ExpansionRegion | undefined {
    return this.getElement<ExpansionRegion>('regionAsOutput');
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IExpansionRegion extends IStructuredActivityNode {
  inputElement: IExpansionNode[];
  mode: ExpansionKind;
  outputElement?: IExpansionNode[];
  activity?: IActivity;
  edge?: IActivityEdge[];
  mustIsolate: boolean;
  node?: IActivityNode[];
  structuredNodeInput?: IInputPin[];
  structuredNodeOutput?: IOutputPin[];
  variable?: IVariable[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  handler?: IExceptionHandler[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class ExpansionRegion extends Entity implements IExpansionRegion {

  set inputElement(value: ExpansionNode[]) {
    this.setElements<ExpansionNode>('inputElement', value);
  }

  get inputElement(): ExpansionNode[] {
    const value = this.getElements<ExpansionNode>('inputElement');
    if (!value) throw 'The value of inputElement is not set';
    return value;
  }

  set mode(value: ExpansionKind) {
    this.setEnum('mode', value);
  }

  get mode(): ExpansionKind {
    const value = this.getEnum('mode');
    if (!value) throw 'The value of mode is not set';
    return value;
  }

  set outputElement(value: ExpansionNode[] | undefined) {
    this.setElements<ExpansionNode>('outputElement', value);
  }

  get outputElement(): ExpansionNode[] | undefined {
    return this.getElements<ExpansionNode>('outputElement');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set mustIsolate(value: boolean) {
    this.setBoolean('mustIsolate', value);
  }

  get mustIsolate(): boolean {
    const value = this.getBoolean('mustIsolate');
    if (!value) throw 'The value of mustIsolate is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set structuredNodeInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('structuredNodeInput', value);
  }

  get structuredNodeInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('structuredNodeInput');
  }

  set structuredNodeOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('structuredNodeOutput', value);
  }

  get structuredNodeOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('structuredNodeOutput');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IInputPin extends IPin {
  isControl: boolean;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class InputPin extends Entity implements IInputPin {

  set isControl(value: boolean) {
    this.setBoolean('isControl', value);
  }

  get isControl(): boolean {
    const value = this.getBoolean('isControl');
    if (!value) throw 'The value of isControl is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IInvocationAction extends IAction {
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class InvocationAction extends Entity implements IInvocationAction {

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILinkAction extends IAction {
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LinkAction extends Entity implements ILinkAction {

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILinkEndCreationData extends ILinkEndData {
  insertAt?: IInputPin;
  isReplaceAll: boolean;
  end: IProperty;
  qualifier?: IQualifierValue[];
  value?: IInputPin;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LinkEndCreationData extends Entity implements ILinkEndCreationData {

  set insertAt(value: InputPin | undefined) {
    this.setElement<InputPin>('insertAt', value);
  }

  get insertAt(): InputPin | undefined {
    return this.getElement<InputPin>('insertAt');
  }

  set isReplaceAll(value: boolean) {
    this.setBoolean('isReplaceAll', value);
  }

  get isReplaceAll(): boolean {
    const value = this.getBoolean('isReplaceAll');
    if (!value) throw 'The value of isReplaceAll is not set';
    return value;
  }

  set end(value: Property) {
    this.setElement<Property>('end', value);
  }

  get end(): Property {
    const value = this.getElement<Property>('end');
    if (!value) throw 'The value of end is not set';
    return value;
  }

  set qualifier(value: QualifierValue[] | undefined) {
    this.setElements<QualifierValue>('qualifier', value);
  }

  get qualifier(): QualifierValue[] | undefined {
    return this.getElements<QualifierValue>('qualifier');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILinkEndData extends IElement {
  end: IProperty;
  qualifier?: IQualifierValue[];
  value?: IInputPin;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LinkEndData extends Entity implements ILinkEndData {

  set end(value: Property) {
    this.setElement<Property>('end', value);
  }

  get end(): Property {
    const value = this.getElement<Property>('end');
    if (!value) throw 'The value of end is not set';
    return value;
  }

  set qualifier(value: QualifierValue[] | undefined) {
    this.setElements<QualifierValue>('qualifier', value);
  }

  get qualifier(): QualifierValue[] | undefined {
    return this.getElements<QualifierValue>('qualifier');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILinkEndDestructionData extends ILinkEndData {
  destroyAt?: IInputPin;
  isDestroyDuplicates: boolean;
  end: IProperty;
  qualifier?: IQualifierValue[];
  value?: IInputPin;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class LinkEndDestructionData extends Entity implements ILinkEndDestructionData {

  set destroyAt(value: InputPin | undefined) {
    this.setElement<InputPin>('destroyAt', value);
  }

  get destroyAt(): InputPin | undefined {
    return this.getElement<InputPin>('destroyAt');
  }

  set isDestroyDuplicates(value: boolean) {
    this.setBoolean('isDestroyDuplicates', value);
  }

  get isDestroyDuplicates(): boolean {
    const value = this.getBoolean('isDestroyDuplicates');
    if (!value) throw 'The value of isDestroyDuplicates is not set';
    return value;
  }

  set end(value: Property) {
    this.setElement<Property>('end', value);
  }

  get end(): Property {
    const value = this.getElement<Property>('end');
    if (!value) throw 'The value of end is not set';
    return value;
  }

  set qualifier(value: QualifierValue[] | undefined) {
    this.setElements<QualifierValue>('qualifier', value);
  }

  get qualifier(): QualifierValue[] | undefined {
    return this.getElements<QualifierValue>('qualifier');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ILoopNode extends IStructuredActivityNode {
  bodyOutput?: IOutputPin[];
  bodyPart?: IExecutableNode[];
  decider: IOutputPin;
  isTestedFirst: boolean;
  loopVariable?: IOutputPin[];
  loopVariableInput?: IInputPin[];
  result?: IOutputPin[];
  setupPart?: IExecutableNode[];
  test: IExecutableNode[];
  activity?: IActivity;
  edge?: IActivityEdge[];
  mustIsolate: boolean;
  node?: IActivityNode[];
  structuredNodeInput?: IInputPin[];
  structuredNodeOutput?: IOutputPin[];
  variable?: IVariable[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  handler?: IExceptionHandler[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class LoopNode extends Entity implements ILoopNode {

  set bodyOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('bodyOutput', value);
  }

  get bodyOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('bodyOutput');
  }

  set bodyPart(value: ExecutableNode[] | undefined) {
    this.setElements<ExecutableNode>('bodyPart', value);
  }

  get bodyPart(): ExecutableNode[] | undefined {
    return this.getElements<ExecutableNode>('bodyPart');
  }

  set decider(value: OutputPin) {
    this.setElement<OutputPin>('decider', value);
  }

  get decider(): OutputPin {
    const value = this.getElement<OutputPin>('decider');
    if (!value) throw 'The value of decider is not set';
    return value;
  }

  set isTestedFirst(value: boolean) {
    this.setBoolean('isTestedFirst', value);
  }

  get isTestedFirst(): boolean {
    const value = this.getBoolean('isTestedFirst');
    if (!value) throw 'The value of isTestedFirst is not set';
    return value;
  }

  set loopVariable(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('loopVariable', value);
  }

  get loopVariable(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('loopVariable');
  }

  set loopVariableInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('loopVariableInput', value);
  }

  get loopVariableInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('loopVariableInput');
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set setupPart(value: ExecutableNode[] | undefined) {
    this.setElements<ExecutableNode>('setupPart', value);
  }

  get setupPart(): ExecutableNode[] | undefined {
    return this.getElements<ExecutableNode>('setupPart');
  }

  set test(value: ExecutableNode[]) {
    this.setElements<ExecutableNode>('test', value);
  }

  get test(): ExecutableNode[] {
    const value = this.getElements<ExecutableNode>('test');
    if (!value) throw 'The value of test is not set';
    return value;
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set mustIsolate(value: boolean) {
    this.setBoolean('mustIsolate', value);
  }

  get mustIsolate(): boolean {
    const value = this.getBoolean('mustIsolate');
    if (!value) throw 'The value of mustIsolate is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set structuredNodeInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('structuredNodeInput', value);
  }

  get structuredNodeInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('structuredNodeInput');
  }

  set structuredNodeOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('structuredNodeOutput', value);
  }

  get structuredNodeOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('structuredNodeOutput');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IOpaqueAction extends IAction {
  body?: string[];
  inputValue?: IInputPin[];
  language?: string[];
  outputValue?: IOutputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class OpaqueAction extends Entity implements IOpaqueAction {

  set body(value: string[] | undefined) {
    this.setStrings('body', value);
  }

  get body(): string[] | undefined {
    return this.getStrings('body');
  }

  set inputValue(value: InputPin[] | undefined) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] | undefined {
    return this.getElements<InputPin>('inputValue');
  }

  set language(value: string[] | undefined) {
    this.setStrings('language', value);
  }

  get language(): string[] | undefined {
    return this.getStrings('language');
  }

  set outputValue(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('outputValue', value);
  }

  get outputValue(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('outputValue');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IOutputPin extends IPin {
  isControl: boolean;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class OutputPin extends Entity implements IOutputPin {

  set isControl(value: boolean) {
    this.setBoolean('isControl', value);
  }

  get isControl(): boolean {
    const value = this.getBoolean('isControl');
    if (!value) throw 'The value of isControl is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IPin extends IObjectNode, IMultiplicityElement {
  isControl: boolean;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class Pin extends Entity implements IPin {

  set isControl(value: boolean) {
    this.setBoolean('isControl', value);
  }

  get isControl(): boolean {
    const value = this.getBoolean('isControl');
    if (!value) throw 'The value of isControl is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IQualifierValue extends IElement {
  qualifier: IProperty;
  value: IInputPin;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class QualifierValue extends Entity implements IQualifierValue {

  set qualifier(value: Property) {
    this.setElement<Property>('qualifier', value);
  }

  get qualifier(): Property {
    const value = this.getElement<Property>('qualifier');
    if (!value) throw 'The value of qualifier is not set';
    return value;
  }

  set value(value: InputPin) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin {
    const value = this.getElement<InputPin>('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRaiseExceptionAction extends IAction {
  exception: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class RaiseExceptionAction extends Entity implements IRaiseExceptionAction {

  set exception(value: InputPin) {
    this.setElement<InputPin>('exception', value);
  }

  get exception(): InputPin {
    const value = this.getElement<InputPin>('exception');
    if (!value) throw 'The value of exception is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadExtentAction extends IAction {
  classifier: IClassifier;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadExtentAction extends Entity implements IReadExtentAction {

  set classifier(value: Classifier) {
    this.setElement<Classifier>('classifier', value);
  }

  get classifier(): Classifier {
    const value = this.getElement<Classifier>('classifier');
    if (!value) throw 'The value of classifier is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadIsClassifiedObjectAction extends IAction {
  classifier: IClassifier;
  isDirect: boolean;
  object: IInputPin;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadIsClassifiedObjectAction extends Entity implements IReadIsClassifiedObjectAction {

  set classifier(value: Classifier) {
    this.setElement<Classifier>('classifier', value);
  }

  get classifier(): Classifier {
    const value = this.getElement<Classifier>('classifier');
    if (!value) throw 'The value of classifier is not set';
    return value;
  }

  set isDirect(value: boolean) {
    this.setBoolean('isDirect', value);
  }

  get isDirect(): boolean {
    const value = this.getBoolean('isDirect');
    if (!value) throw 'The value of isDirect is not set';
    return value;
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadLinkAction extends ILinkAction {
  result: IOutputPin;
  endData: ILinkEndData[];
  inputValue: IInputPin[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadLinkAction extends Entity implements IReadLinkAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set endData(value: LinkEndData[]) {
    this.setElements<LinkEndData>('endData', value);
  }

  get endData(): LinkEndData[] {
    const value = this.getElements<LinkEndData>('endData');
    if (!value) throw 'The value of endData is not set';
    return value;
  }

  set inputValue(value: InputPin[]) {
    this.setElements<InputPin>('inputValue', value);
  }

  get inputValue(): InputPin[] {
    const value = this.getElements<InputPin>('inputValue');
    if (!value) throw 'The value of inputValue is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadLinkObjectEndAction extends IAction {
  end: IProperty;
  object: IInputPin;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadLinkObjectEndAction extends Entity implements IReadLinkObjectEndAction {

  set end(value: Property) {
    this.setElement<Property>('end', value);
  }

  get end(): Property {
    const value = this.getElement<Property>('end');
    if (!value) throw 'The value of end is not set';
    return value;
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadLinkObjectEndQualifierAction extends IAction {
  object: IInputPin;
  qualifier: IProperty;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadLinkObjectEndQualifierAction extends Entity implements IReadLinkObjectEndQualifierAction {

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set qualifier(value: Property) {
    this.setElement<Property>('qualifier', value);
  }

  get qualifier(): Property {
    const value = this.getElement<Property>('qualifier');
    if (!value) throw 'The value of qualifier is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadSelfAction extends IAction {
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadSelfAction extends Entity implements IReadSelfAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadStructuralFeatureAction extends IStructuralFeatureAction {
  result: IOutputPin;
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadStructuralFeatureAction extends Entity implements IReadStructuralFeatureAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReadVariableAction extends IVariableAction {
  result: IOutputPin;
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReadVariableAction extends Entity implements IReadVariableAction {

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReclassifyObjectAction extends IAction {
  isReplaceAll: boolean;
  newClassifier?: IClassifier[];
  object: IInputPin;
  oldClassifier?: IClassifier[];
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReclassifyObjectAction extends Entity implements IReclassifyObjectAction {

  set isReplaceAll(value: boolean) {
    this.setBoolean('isReplaceAll', value);
  }

  get isReplaceAll(): boolean {
    const value = this.getBoolean('isReplaceAll');
    if (!value) throw 'The value of isReplaceAll is not set';
    return value;
  }

  set newClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('newClassifier', value);
  }

  get newClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('newClassifier');
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set oldClassifier(value: Classifier[] | undefined) {
    this.setElements<Classifier>('oldClassifier', value);
  }

  get oldClassifier(): Classifier[] | undefined {
    return this.getElements<Classifier>('oldClassifier');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReduceAction extends IAction {
  collection: IInputPin;
  isOrdered: boolean;
  reducer: IBehavior;
  result: IOutputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReduceAction extends Entity implements IReduceAction {

  set collection(value: InputPin) {
    this.setElement<InputPin>('collection', value);
  }

  get collection(): InputPin {
    const value = this.getElement<InputPin>('collection');
    if (!value) throw 'The value of collection is not set';
    return value;
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set reducer(value: Behavior) {
    this.setElement<Behavior>('reducer', value);
  }

  get reducer(): Behavior {
    const value = this.getElement<Behavior>('reducer');
    if (!value) throw 'The value of reducer is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRemoveStructuralFeatureValueAction extends IWriteStructuralFeatureAction {
  isRemoveDuplicates: boolean;
  removeAt?: IInputPin;
  result?: IOutputPin;
  value?: IInputPin;
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class RemoveStructuralFeatureValueAction extends Entity implements IRemoveStructuralFeatureValueAction {

  set isRemoveDuplicates(value: boolean) {
    this.setBoolean('isRemoveDuplicates', value);
  }

  get isRemoveDuplicates(): boolean {
    const value = this.getBoolean('isRemoveDuplicates');
    if (!value) throw 'The value of isRemoveDuplicates is not set';
    return value;
  }

  set removeAt(value: InputPin | undefined) {
    this.setElement<InputPin>('removeAt', value);
  }

  get removeAt(): InputPin | undefined {
    return this.getElement<InputPin>('removeAt');
  }

  set result(value: OutputPin | undefined) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin | undefined {
    return this.getElement<OutputPin>('result');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IRemoveVariableValueAction extends IWriteVariableAction {
  isRemoveDuplicates: boolean;
  removeAt?: IInputPin;
  value?: IInputPin;
  variable: IVariable;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class RemoveVariableValueAction extends Entity implements IRemoveVariableValueAction {

  set isRemoveDuplicates(value: boolean) {
    this.setBoolean('isRemoveDuplicates', value);
  }

  get isRemoveDuplicates(): boolean {
    const value = this.getBoolean('isRemoveDuplicates');
    if (!value) throw 'The value of isRemoveDuplicates is not set';
    return value;
  }

  set removeAt(value: InputPin | undefined) {
    this.setElement<InputPin>('removeAt', value);
  }

  get removeAt(): InputPin | undefined {
    return this.getElement<InputPin>('removeAt');
  }

  set value(value: InputPin | undefined) {
    this.setElement<InputPin>('value', value);
  }

  get value(): InputPin | undefined {
    return this.getElement<InputPin>('value');
  }

  set variable(value: Variable) {
    this.setElement<Variable>('variable', value);
  }

  get variable(): Variable {
    const value = this.getElement<Variable>('variable');
    if (!value) throw 'The value of variable is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IReplyAction extends IAction {
  replyToCall: ITrigger;
  replyValue?: IInputPin[];
  returnInformation: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class ReplyAction extends Entity implements IReplyAction {

  set replyToCall(value: Trigger) {
    this.setElement<Trigger>('replyToCall', value);
  }

  get replyToCall(): Trigger {
    const value = this.getElement<Trigger>('replyToCall');
    if (!value) throw 'The value of replyToCall is not set';
    return value;
  }

  set replyValue(value: InputPin[] | undefined) {
    this.setElements<InputPin>('replyValue', value);
  }

  get replyValue(): InputPin[] | undefined {
    return this.getElements<InputPin>('replyValue');
  }

  set returnInformation(value: InputPin) {
    this.setElement<InputPin>('returnInformation', value);
  }

  get returnInformation(): InputPin {
    const value = this.getElement<InputPin>('returnInformation');
    if (!value) throw 'The value of returnInformation is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ISendObjectAction extends IInvocationAction {
  request: IInputPin;
  target: IInputPin;
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class SendObjectAction extends Entity implements ISendObjectAction {

  set request(value: InputPin) {
    this.setElement<InputPin>('request', value);
  }

  get request(): InputPin {
    const value = this.getElement<InputPin>('request');
    if (!value) throw 'The value of request is not set';
    return value;
  }

  set target(value: InputPin) {
    this.setElement<InputPin>('target', value);
  }

  get target(): InputPin {
    const value = this.getElement<InputPin>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ISendSignalAction extends IInvocationAction {
  signal: ISignal;
  target: IInputPin;
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class SendSignalAction extends Entity implements ISendSignalAction {

  set signal(value: Signal) {
    this.setElement<Signal>('signal', value);
  }

  get signal(): Signal {
    const value = this.getElement<Signal>('signal');
    if (!value) throw 'The value of signal is not set';
    return value;
  }

  set target(value: InputPin) {
    this.setElement<InputPin>('target', value);
  }

  get target(): InputPin {
    const value = this.getElement<InputPin>('target');
    if (!value) throw 'The value of target is not set';
    return value;
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface ISequenceNode extends IStructuredActivityNode {
  executableNode?: IExecutableNode[];
  activity?: IActivity;
  edge?: IActivityEdge[];
  mustIsolate: boolean;
  node?: IActivityNode[];
  structuredNodeInput?: IInputPin[];
  structuredNodeOutput?: IOutputPin[];
  variable?: IVariable[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  handler?: IExceptionHandler[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class SequenceNode extends Entity implements ISequenceNode {

  set executableNode(value: ExecutableNode[] | undefined) {
    this.setElements<ExecutableNode>('executableNode', value);
  }

  get executableNode(): ExecutableNode[] | undefined {
    return this.getElements<ExecutableNode>('executableNode');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set mustIsolate(value: boolean) {
    this.setBoolean('mustIsolate', value);
  }

  get mustIsolate(): boolean {
    const value = this.getBoolean('mustIsolate');
    if (!value) throw 'The value of mustIsolate is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set structuredNodeInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('structuredNodeInput', value);
  }

  get structuredNodeInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('structuredNodeInput');
  }

  set structuredNodeOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('structuredNodeOutput', value);
  }

  get structuredNodeOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('structuredNodeOutput');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface IStartClassifierBehaviorAction extends IAction {
  object: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class StartClassifierBehaviorAction extends Entity implements IStartClassifierBehaviorAction {

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStartObjectBehaviorAction extends ICallAction {
  object: IInputPin;
  isSynchronous: boolean;
  result?: IOutputPin[];
  argument?: IInputPin[];
  onPort?: IPort;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class StartObjectBehaviorAction extends Entity implements IStartObjectBehaviorAction {

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set isSynchronous(value: boolean) {
    this.setBoolean('isSynchronous', value);
  }

  get isSynchronous(): boolean {
    const value = this.getBoolean('isSynchronous');
    if (!value) throw 'The value of isSynchronous is not set';
    return value;
  }

  set result(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('result');
  }

  set argument(value: InputPin[] | undefined) {
    this.setElements<InputPin>('argument', value);
  }

  get argument(): InputPin[] | undefined {
    return this.getElements<InputPin>('argument');
  }

  set onPort(value: Port | undefined) {
    this.setElement<Port>('onPort', value);
  }

  get onPort(): Port | undefined {
    return this.getElement<Port>('onPort');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStructuralFeatureAction extends IAction {
  object: IInputPin;
  structuralFeature: IStructuralFeature;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class StructuralFeatureAction extends Entity implements IStructuralFeatureAction {

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set structuralFeature(value: StructuralFeature) {
    this.setElement<StructuralFeature>('structuralFeature', value);
  }

  get structuralFeature(): StructuralFeature {
    const value = this.getElement<StructuralFeature>('structuralFeature');
    if (!value) throw 'The value of structuralFeature is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IStructuredActivityNode extends INamespace, IActivityGroup, IAction {
  activity?: IActivity;
  edge?: IActivityEdge[];
  mustIsolate: boolean;
  node?: IActivityNode[];
  structuredNodeInput?: IInputPin[];
  structuredNodeOutput?: IOutputPin[];
  variable?: IVariable[];
  elementImport?: IElementImport[];
  importedMember?: IPackageableElement[];
  member?: INamedElement[];
  ownedMember?: INamedElement[];
  ownedRule?: IConstraint[];
  packageImport?: IPackageImport[];
  containedEdge?: IActivityEdge[];
  containedNode?: IActivityNode[];
  inActivity?: IActivity;
  subgroup?: IActivityGroup[];
  superGroup?: IActivityGroup;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  handler?: IExceptionHandler[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class StructuredActivityNode extends Entity implements IStructuredActivityNode {

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set edge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('edge', value);
  }

  get edge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('edge');
  }

  set mustIsolate(value: boolean) {
    this.setBoolean('mustIsolate', value);
  }

  get mustIsolate(): boolean {
    const value = this.getBoolean('mustIsolate');
    if (!value) throw 'The value of mustIsolate is not set';
    return value;
  }

  set node(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('node', value);
  }

  get node(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('node');
  }

  set structuredNodeInput(value: InputPin[] | undefined) {
    this.setElements<InputPin>('structuredNodeInput', value);
  }

  get structuredNodeInput(): InputPin[] | undefined {
    return this.getElements<InputPin>('structuredNodeInput');
  }

  set structuredNodeOutput(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('structuredNodeOutput', value);
  }

  get structuredNodeOutput(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('structuredNodeOutput');
  }

  set variable(value: Variable[] | undefined) {
    this.setElements<Variable>('variable', value);
  }

  get variable(): Variable[] | undefined {
    return this.getElements<Variable>('variable');
  }

  set elementImport(value: ElementImport[] | undefined) {
    this.setElements<ElementImport>('elementImport', value);
  }

  get elementImport(): ElementImport[] | undefined {
    return this.getElements<ElementImport>('elementImport');
  }

  set importedMember(value: PackageableElement[] | undefined) {
    this.setElements<PackageableElement>('importedMember', value);
  }

  get importedMember(): PackageableElement[] | undefined {
    return this.getElements<PackageableElement>('importedMember');
  }

  set member(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('member', value);
  }

  get member(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('member');
  }

  set ownedMember(value: NamedElement[] | undefined) {
    this.setElements<NamedElement>('ownedMember', value);
  }

  get ownedMember(): NamedElement[] | undefined {
    return this.getElements<NamedElement>('ownedMember');
  }

  set ownedRule(value: Constraint[] | undefined) {
    this.setElements<Constraint>('ownedRule', value);
  }

  get ownedRule(): Constraint[] | undefined {
    return this.getElements<Constraint>('ownedRule');
  }

  set packageImport(value: PackageImport[] | undefined) {
    this.setElements<PackageImport>('packageImport', value);
  }

  get packageImport(): PackageImport[] | undefined {
    return this.getElements<PackageImport>('packageImport');
  }

  set containedEdge(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('containedEdge', value);
  }

  get containedEdge(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('containedEdge');
  }

  set containedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('containedNode', value);
  }

  get containedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('containedNode');
  }

  set inActivity(value: Activity | undefined) {
    this.setElement<Activity>('inActivity', value);
  }

  get inActivity(): Activity | undefined {
    return this.getElement<Activity>('inActivity');
  }

  set subgroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('subgroup', value);
  }

  get subgroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('subgroup');
  }

  set superGroup(value: ActivityGroup | undefined) {
    this.setElement<ActivityGroup>('superGroup', value);
  }

  get superGroup(): ActivityGroup | undefined {
    return this.getElement<ActivityGroup>('superGroup');
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}
export interface ITestIdentityAction extends IAction {
  first: IInputPin;
  result: IOutputPin;
  second: IInputPin;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class TestIdentityAction extends Entity implements ITestIdentityAction {

  set first(value: InputPin) {
    this.setElement<InputPin>('first', value);
  }

  get first(): InputPin {
    const value = this.getElement<InputPin>('first');
    if (!value) throw 'The value of first is not set';
    return value;
  }

  set result(value: OutputPin) {
    this.setElement<OutputPin>('result', value);
  }

  get result(): OutputPin {
    const value = this.getElement<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set second(value: InputPin) {
    this.setElement<InputPin>('second', value);
  }

  get second(): InputPin {
    const value = this.getElement<InputPin>('second');
    if (!value) throw 'The value of second is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IUnmarshallAction extends IAction {
  object: IInputPin;
  result: IOutputPin[];
  unmarshallType: IClassifier;
  context?: IClassifier;
  input?: IInputPin[];
  isLocallyReentrant: boolean;
  localPostcondition?: IConstraint[];
  localPrecondition?: IConstraint[];
  output?: IOutputPin[];
  handler?: IExceptionHandler[];
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
}

export class UnmarshallAction extends Entity implements IUnmarshallAction {

  set object(value: InputPin) {
    this.setElement<InputPin>('object', value);
  }

  get object(): InputPin {
    const value = this.getElement<InputPin>('object');
    if (!value) throw 'The value of object is not set';
    return value;
  }

  set result(value: OutputPin[]) {
    this.setElements<OutputPin>('result', value);
  }

  get result(): OutputPin[] {
    const value = this.getElements<OutputPin>('result');
    if (!value) throw 'The value of result is not set';
    return value;
  }

  set unmarshallType(value: Classifier) {
    this.setElement<Classifier>('unmarshallType', value);
  }

  get unmarshallType(): Classifier {
    const value = this.getElement<Classifier>('unmarshallType');
    if (!value) throw 'The value of unmarshallType is not set';
    return value;
  }

  set context(value: Classifier | undefined) {
    this.setElement<Classifier>('context', value);
  }

  get context(): Classifier | undefined {
    return this.getElement<Classifier>('context');
  }

  set input(value: InputPin[] | undefined) {
    this.setElements<InputPin>('input', value);
  }

  get input(): InputPin[] | undefined {
    return this.getElements<InputPin>('input');
  }

  set isLocallyReentrant(value: boolean) {
    this.setBoolean('isLocallyReentrant', value);
  }

  get isLocallyReentrant(): boolean {
    const value = this.getBoolean('isLocallyReentrant');
    if (!value) throw 'The value of isLocallyReentrant is not set';
    return value;
  }

  set localPostcondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPostcondition', value);
  }

  get localPostcondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPostcondition');
  }

  set localPrecondition(value: Constraint[] | undefined) {
    this.setElements<Constraint>('localPrecondition', value);
  }

  get localPrecondition(): Constraint[] | undefined {
    return this.getElements<Constraint>('localPrecondition');
  }

  set output(value: OutputPin[] | undefined) {
    this.setElements<OutputPin>('output', value);
  }

  get output(): OutputPin[] | undefined {
    return this.getElements<OutputPin>('output');
  }

  set handler(value: ExceptionHandler[] | undefined) {
    this.setElements<ExceptionHandler>('handler', value);
  }

  get handler(): ExceptionHandler[] | undefined {
    return this.getElements<ExceptionHandler>('handler');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }
}
export interface IValuePin extends IInputPin {
  value: IValueSpecification;
  isControl: boolean;
  inState?: IState[];
  isControlType: boolean;
  ordering: ObjectNodeOrderingKind;
  selection?: IBehavior;
  upperBound?: IValueSpecification;
  isOrdered: boolean;
  isUnique: boolean;
  lower: number;
  lowerValue?: IValueSpecification;
  upper: number;
  upperValue?: IValueSpecification;
  type?: IType;
  activity?: IActivity;
  inGroup?: IActivityGroup[];
  inInterruptibleRegion?: IInterruptibleActivityRegion[];
  inPartition?: IActivityPartition[];
  inStructuredNode?: IStructuredActivityNode;
  incoming?: IActivityEdge[];
  outgoing?: IActivityEdge[];
  redefinedNode?: IActivityNode[];
  ownedComment?: IComment[];
  ownedElement?: IElement[];
  owner?: IElement;
  clientDependency?: IDependency[];
  name?: string;
  nameExpression?: IStringExpression;
  namespace?: INamespace;
  qualifiedName?: string;
  visibility?: VisibilityKind;
  isLeaf: boolean;
  redefinedElement?: IRedefinableElement[];
  redefinitionContext?: IClassifier[];
}

export class ValuePin extends Entity implements IValuePin {

  set value(value: ValueSpecification) {
    this.setElement<ValueSpecification>('value', value);
  }

  get value(): ValueSpecification {
    const value = this.getElement<ValueSpecification>('value');
    if (!value) throw 'The value of value is not set';
    return value;
  }

  set isControl(value: boolean) {
    this.setBoolean('isControl', value);
  }

  get isControl(): boolean {
    const value = this.getBoolean('isControl');
    if (!value) throw 'The value of isControl is not set';
    return value;
  }

  set inState(value: State[] | undefined) {
    this.setElements<State>('inState', value);
  }

  get inState(): State[] | undefined {
    return this.getElements<State>('inState');
  }

  set isControlType(value: boolean) {
    this.setBoolean('isControlType', value);
  }

  get isControlType(): boolean {
    const value = this.getBoolean('isControlType');
    if (!value) throw 'The value of isControlType is not set';
    return value;
  }

  set ordering(value: ObjectNodeOrderingKind) {
    this.setEnum('ordering', value);
  }

  get ordering(): ObjectNodeOrderingKind {
    const value = this.getEnum('ordering');
    if (!value) throw 'The value of ordering is not set';
    return value;
  }

  set selection(value: Behavior | undefined) {
    this.setElement<Behavior>('selection', value);
  }

  get selection(): Behavior | undefined {
    return this.getElement<Behavior>('selection');
  }

  set upperBound(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperBound', value);
  }

  get upperBound(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperBound');
  }

  set isOrdered(value: boolean) {
    this.setBoolean('isOrdered', value);
  }

  get isOrdered(): boolean {
    const value = this.getBoolean('isOrdered');
    if (!value) throw 'The value of isOrdered is not set';
    return value;
  }

  set isUnique(value: boolean) {
    this.setBoolean('isUnique', value);
  }

  get isUnique(): boolean {
    const value = this.getBoolean('isUnique');
    if (!value) throw 'The value of isUnique is not set';
    return value;
  }

  set lower(value: number) {
    this.setInteger('lower', value);
  }

  get lower(): number {
    const value = this.getInteger('lower');
    if (!value) throw 'The value of lower is not set';
    return value;
  }

  set lowerValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('lowerValue', value);
  }

  get lowerValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('lowerValue');
  }

  set upper(value: number) {
    this.setFloat('upper', value);
  }

  get upper(): number {
    const value = this.getFloat('upper');
    if (!value) throw 'The value of upper is not set';
    return value;
  }

  set upperValue(value: ValueSpecification | undefined) {
    this.setElement<ValueSpecification>('upperValue', value);
  }

  get upperValue(): ValueSpecification | undefined {
    return this.getElement<ValueSpecification>('upperValue');
  }

  set type(value: Type | undefined) {
    this.setElement<Type>('type', value);
  }

  get type(): Type | undefined {
    return this.getElement<Type>('type');
  }

  set activity(value: Activity | undefined) {
    this.setElement<Activity>('activity', value);
  }

  get activity(): Activity | undefined {
    return this.getElement<Activity>('activity');
  }

  set inGroup(value: ActivityGroup[] | undefined) {
    this.setElements<ActivityGroup>('inGroup', value);
  }

  get inGroup(): ActivityGroup[] | undefined {
    return this.getElements<ActivityGroup>('inGroup');
  }

  set inInterruptibleRegion(value: InterruptibleActivityRegion[] | undefined) {
    this.setElements<InterruptibleActivityRegion>('inInterruptibleRegion', value);
  }

  get inInterruptibleRegion(): InterruptibleActivityRegion[] | undefined {
    return this.getElements<InterruptibleActivityRegion>('inInterruptibleRegion');
  }

  set inPartition(value: ActivityPartition[] | undefined) {
    this.setElements<ActivityPartition>('inPartition', value);
  }

  get inPartition(): ActivityPartition[] | undefined {
    return this.getElements<ActivityPartition>('inPartition');
  }

  set inStructuredNode(value: StructuredActivityNode | undefined) {
    this.setElement<StructuredActivityNode>('inStructuredNode', value);
  }

  get inStructuredNode(): StructuredActivityNode | undefined {
    return this.getElement<StructuredActivityNode>('inStructuredNode');
  }

  set incoming(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('incoming', value);
  }

  get incoming(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('incoming');
  }

  set outgoing(value: ActivityEdge[] | undefined) {
    this.setElements<ActivityEdge>('outgoing', value);
  }

  get outgoing(): ActivityEdge[] | undefined {
    return this.getElements<ActivityEdge>('outgoing');
  }

  set redefinedNode(value: ActivityNode[] | undefined) {
    this.setElements<ActivityNode>('redefinedNode', value);
  }

  get redefinedNode(): ActivityNode[] | undefined {
    return this.getElements<ActivityNode>('redefinedNode');
  }

  set ownedComment(value: Comment[] | undefined) {
    this.setElements<Comment>('ownedComment', value);
  }

  get ownedComment(): Comment[] | undefined {
    return this.getElements<Comment>('ownedComment');
  }

  set ownedElement(value: Element[] | undefined) {
    this.setElements<Element>('ownedElement', value);
  }

  get ownedElement(): Element[] | undefined {
    return this.getElements<Element>('ownedElement');
  }

  set owner(value: Element | undefined) {
    this.setElement<Element>('owner', value);
  }

  get owner(): Element | undefined {
    return this.getElement<Element>('owner');
  }

  set clientDependency(value: Dependency[] | undefined) {
    this.setElements<Dependency>('clientDependency', value);
  }

  get clientDependency(): Dependency[] | undefined {
    return this.getElements<Dependency>('clientDependency');
  }

  set name(value: string | undefined) {
    this.setString('name', value);
  }

  get name(): string | undefined {
    return this.getString('name');
  }

  set nameExpression(value: StringExpression | undefined) {
    this.setElement<StringExpression>('nameExpression', value);
  }

  get nameExpression(): StringExpression | undefined {
    return this.getElement<StringExpression>('nameExpression');
  }

  set namespace(value: Namespace | undefined) {
    this.setElement<Namespace>('namespace', value);
  }

  get namespace(): Namespace | undefined {
    return this.getElement<Namespace>('namespace');
  }

  set qualifiedName(value: string | undefined) {
    this.setString('qualifiedName', value);
  }

  get qualifiedName(): string | undefined {
    return this.getString('qualifiedName');
  }

  set visibility(value: VisibilityKind | undefined) {
    this.setEnum('visibility', value);
  }

  get visibility(): VisibilityKind | undefined {
    return this.getEnum('visibility');
  }

  set isLeaf(value: boolean) {
    this.setBoolean('isLeaf', value);
  }

  get isLeaf(): boolean {
    const value = this.getBoolean('isLeaf');
    if (!value) throw 'The value of isLeaf is not set';
    return value;
  }

  set redefinedElement(value: RedefinableElement[] | undefined) {
    this.setElements<RedefinableElement>('redefinedElement', value);
  }

  get redefinedElement(): RedefinableElement[] | undefined {
    return this.getElements<RedefinableElement>('redefinedElement');
  }

  set redefinitionContext(value: Classifier[] | undefined) {
    this.setElements<Classifier>('redefinitionContext', value);
  }

  get redefinitionContext(): Classifier[] | undefined {
    return this.getElements<Classifier>('redefinitionContext');
  }
}




